var VideoGameCore;
!(function(c) {
    var t = (function(i) {
        function t(t) {
            void 0 === t && (t = null);
            var e = i.call(this) || this;
            return (
                (e.resultTimer = -1),
                (e.payoutTimer = -1),
                (e.payoutOverTimer = -1),
                (e.payoutOtherTimers = []),
                (e.isAllIn = !1),
                (e.vid = t),
                e.listenToRoomTimerStore(),
                (e.sendBetMap = new Core.HashMap()),
                e
            );
        }
        return (
            __extends(t, i),
            Object.defineProperty(t.prototype, 'vid', {
                get: function() {
                    return this._vid;
                },
                set: function(t) {
                    this._vid = t;
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(t.prototype, 'gameSocket', {
                get: function() {
                    return this.socketList[0];
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(t.prototype, 'gmcode', {
                get: function() {
                    return this.roomTimerStore.gmcode;
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(t.prototype, 'totalBet', {
                get: function() {
                    return this.donePool.totalAmount;
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(t.prototype, 'unconfirmedBet', {
                get: function() {
                    return (
                        this.stakePool.totalAmount - this.donePool.totalAmount
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(t.prototype, 'betEnabled', {
                get: function() {
                    return this.isBetEnabled();
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.isBetEnabled = function() {
                return (
                    !this.diffPool.pending &&
                    this.roomTimerStore.isBettingStatus &&
                    this.roomTimerStore.timeout > 0 &&
                    null != this.gmcode
                );
            }),
            (t.prototype.getDisablePlayTypes = function() {
                var t = [];
                return t;
            }),
            Object.defineProperty(t.prototype, 'repeatEnabled', {
                get: function() {
                    return this.isRepeatEnabled();
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.isRepeatEnabled = function() {
                for (
                    var t = this.lastPool.totalAmount,
                        e = this.getDisablePlayTypes(),
                        i = 0,
                        r = 0;
                    r < e.length;
                    r++
                )
                    if (((i = e[r]), this.lastPool.getAmount(i) > 0)) return !1;
                return (
                    this.betEnabled &&
                    this.stakePool.totalAmount <= 0 &&
                    t > 0 &&
                    t <= this.getBalance()
                );
            }),
            Object.defineProperty(t.prototype, 'confirmEnabled', {
                get: function() {
                    return (
                        this.betEnabled &&
                        this.stakePool.totalAmount > this.donePool.totalAmount
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(t.prototype, 'cancelEnabled', {
                get: function() {
                    return this.confirmEnabled;
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.addChipEnabled = function(t) {
                return this.betEnabled;
            }),
            Object.defineProperty(t.prototype, 'canLeaveTable', {
                get: function() {
                    return this.donePool.totalAmount <= 0;
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.addChipByPlayType = function(t, e) {
                for (var i = [], r = 2; r < arguments.length; r++)
                    i[r - 2] = arguments[r];
                if (this.addChipEnabled(t)) {
                    e || (e = this.getChipValue());
                    var s = this.calculateAllIn(t, e),
                        n = !1;
                    if (
                        ((t === c.PLAYTYPE_BANKER_INS ||
                            t == c.PLAYTYPE_PLAYER_INS) &&
                            (n = !0),
                        s < c.getMinBalance() && !n)
                    )
                        return void this.dispatchAddChipAction(
                            c.i,
                            [t].concat(i)
                        );
                    if (!n)
                        if ('MYR' === c.VideoPlazaStore.instance.currencyCode) {
                            var o = Math.floor(s);
                            s = s >= o + 0.5 ? o + 0.5 : o;
                        } else s = Math.floor(s);
                    var a = this.stakePool.getAmount.apply(
                            this.stakePool,
                            [t].concat(i)
                        ),
                        h = a + s;
                    if (1 === this.checkLimit(t, h)) {
                        if (
                            (this.dispatchAddChipAction(c.r, [t].concat(i)),
                            a == this.getBetLimitByPlayType(t).max)
                        )
                            return;
                        h = this.getBetLimitByPlayType(t).max;
                    } else
                        e > s && this.dispatchAddChipAction(c.s, [t].concat(i));
                    var u = this.stakePool.setAmount.apply(
                        this.stakePool,
                        [t, h].concat(i)
                    );
                    return this.dispatchAction(c.n, u), u;
                }
            }),
            (t.prototype.getChipValue = function() {
                return c.VideoPlazaStore.instance.selectedChipValue;
            }),
            (t.prototype.dispatchAddChipAction = function(t, e) {
                this.dispatchAction(t);
            }),
            (t.prototype.getBalance = function() {
                return c.UserStore.instance.balance;
            }),
            (t.prototype.repeatBet = function() {
                if (this.betEnabled) {
                    if (this.lastPool.totalAmount > this.getBalance())
                        return void this.dispatchAction(c.i);
                    this.stakePool.copy(this.lastPool);
                    for (
                        var t,
                            e = [],
                            i = this.stakePool.getAllStakeData(),
                            r = 0;
                        r < i.length;
                        r++
                    )
                        (t = i[r]),
                            e.indexOf(t.playType) < 0 && e.push(t.playType);
                    this.dispatchAction(c.o, e);
                }
            }),
            (t.prototype.confirmBet = function() {
                var i = this;
                this.dispatchAction(c.h),
                    this.confirmEnabled &&
                        ((this.diffPool = this.stakePool.calculateDiff(
                            this.donePool
                        )),
                        this.diffPool.getAllStakeData().forEach(function(t) {
                            var e = t.playType;
                            t.amount <= 0 ||
                                (0 === i.checkLimit(e, i.stakePool.getAmount(e))
                                    ? (i.sendBetToServer(t),
                                      i.dispatchAction(c.u))
                                    : e === i.stakePool.getLastBetPlayType() &&
                                      i.getBalance() - i.diffPool.totalAmount <
                                          c.getMinBalance()
                                        ? (i.sendBetToServer(t),
                                          i.dispatchAction(c.u))
                                        : (i.cancelBetByPlayType(e),
                                          i.dispatchAction(c.r),
                                          (i.isAllIn = !1)));
                        }));
            }),
            (t.prototype.cancelBet = function(t) {
                void 0 === t && (t = !0),
                    this.stakePool.copy(this.donePool),
                    t && this.dispatchAction(c.f);
            }),
            (t.prototype.calculateAllIn = function(t, e) {
                var i = this.getBalance(),
                    r = this.stakePool.calculateDiff(this.donePool).totalAmount;
                if (r + e > i) {
                    var s = i - r;
                    return (this.isAllIn = !0), s;
                }
                return e;
            }),
            (t.prototype.checkLimit = function(t, e) {
                var i = this.getBetLimitByPlayType(t);
                return e < i.min ? 2 : e > i.max ? 1 : 0;
            }),
            (t.prototype.cancelBetByPlayType = function(t) {
                this.stakePool.setAmount(t, this.donePool.getAmount(t));
            }),
            (t.prototype.reset = function() {
                this.stakePool && this.stakePool.clear(),
                    this.donePool && this.donePool.clear(),
                    this.diffPool && this.diffPool.clear(),
                    (this.sendBetMap = new Core.HashMap());
            }),
            (t.prototype.clearAll = function() {
                this.reset(),
                    this.hasTimeout('result') &&
                        (Core.NonstopTimer.instance.clearTimeout(
                            this.resultTimer
                        ),
                        (this.resultTimer = -1)),
                    this.hasTimeout('payout') &&
                        (Core.NonstopTimer.instance.clearTimeout(
                            this.payoutTimer
                        ),
                        (this.payoutTimer = -1)),
                    this.hasTimeout('payoutOver') &&
                        (Core.NonstopTimer.instance.clearTimeout(
                            this.payoutOverTimer
                        ),
                        (this.payoutOverTimer = -1));
                for (var t; this.payoutOtherTimers.length > 0; )
                    (t = this.payoutOtherTimers.pop()),
                        Core.NonstopTimer.instance.hasTimeout(t) &&
                            Core.NonstopTimer.instance.clearTimeout(t);
                this.payoutOtherTimers = [];
            }),
            (t.prototype.hasTimeout = function(t) {
                void 0 === t && (t = '');
                var e = !1;
                switch (t) {
                    case 'result':
                        e = Core.NonstopTimer.instance.hasTimeout(
                            this.resultTimer
                        );
                        break;
                    case 'payout':
                        e = Core.NonstopTimer.instance.hasTimeout(
                            this.payoutTimer
                        );
                        break;
                    case 'payoutOver':
                        e = Core.NonstopTimer.instance.hasTimeout(
                            this.payoutOverTimer
                        );
                }
                return e;
            }),
            (t.prototype.release = function() {
                this.clearAll(), i.prototype.release.call(this);
            }),
            (t.prototype.sendBetToServer = function(t) {
                return this.gameSocket.connected
                    ? ((t.seq = Core.getSequence()),
                      (t.pending = !0),
                      void (this.sendBetMap && this.sendBetMap.set(t.seq, t)))
                    : (this.cancelBetByPlayType(t.playType),
                      this.dispatchAction(c.C),
                      void this.dispatchAction(Core.l));
            }),
            (t.prototype.onSocketData = function(t, e) {
                this.isInvalidVid(t);
            }),
            (t.prototype.isInvalidVid = function(t) {
                return t.vid && this.vid !== t.vid;
            }),
            (t.prototype.m = function(t) {
                var e = this.diffPool.getStakeDataBySeq(t.seqNo);
                if (!e) {
                    var i = this.sendBetMap.get(t.seqNo);
                    if (!i) return;
                    (e = this.diffPool.setAmount(i.playType, i.amount)),
                        (e.seq = t.seqNo),
                        this.stakePool.setAmount(
                            e.playType,
                            e.amount + this.donePool.getAmount(e.playType)
                        );
                }
                (e.pending = !1), (e.success = 0 == t.retCode);
                e.playType;
                0 !== t.retCode &&
                    (this.cancelBetByPlayType(e.playType),
                    this.dispatchAction(c.v, t.retCode)),
                    this.diffPool.pending ||
                        (this.copyToDonePool(),
                        this.updateLastPool(),
                        this.betRespondDo());
            }),
            (t.prototype.copyToDonePool = function() {
                this.donePool.copy(this.stakePool);
            }),
            (t.prototype.updateLastPool = function() {
                this.lastPool.copy(this.donePool),
                    this.isAllIn &&
                        (this.lastPool.clear(), (this.isAllIn = !1));
            }),
            (t.prototype.betRespondDo = function() {
                this.dispatchAction(c.G, this.diffPool.success),
                    Core.globalStore.dispatchGlobal(c.G);
            }),
            (t.prototype._ = function(t) {
                this.gmcode === t.code &&
                    (this.resultTimer = Core.NonstopTimer.instance.setTimeout(
                        this.gameResultTimeoutDo.bind(this, t),
                        this,
                        c.StreamConfig.instance.getAverageDelay()
                    ));
            }),
            (t.prototype.gameResultTimeoutDo = function(t) {
                this.dispatchAction(c.P, t), this.reset();
            }),
            (t.prototype.V = function(t) {
                this.payoutTimer = Core.NonstopTimer.instance.setTimeout(
                    this.payoutTimeoutDo.bind(this, t),
                    this,
                    c.StreamConfig.instance.getAverageDelay()
                );
            }),
            (t.prototype.payoutTimeoutDo = function(t) {
                this.dispatchAction(c.g, t.payout), this.payoutOverTimeoutDo();
            }),
            (t.prototype.payoutOverTimeoutDo = function(t) {
                var e = this;
                t || (t = this.vid),
                    this.payoutOverTimer <= 0 &&
                        (this.payoutOverTimer = Core.NonstopTimer.instance.setTimeout(
                            function() {
                                Core.NonstopTimer.instance.clearTimeout(
                                    e.payoutOverTimer
                                ),
                                    (e.payoutOverTimer = -1),
                                    Core.globalStore.dispatchGlobal(c.g, t);
                            },
                            this,
                            3500
                        ));
            }),
            (t.prototype.p = function(t) {
                this.payoutOtherTimers.push(
                    Core.NonstopTimer.instance.setTimeout(
                        this.payoutOtherTimeoutDo.bind(this, t),
                        this,
                        c.StreamConfig.instance.getAverageDelay()
                    )
                );
            }),
            (t.prototype.payoutOtherTimeoutDo = function(t) {
                this.dispatchAction(c.k, {
                    loginname: t.loginname,
                    payouts: t.ptPayouts
                });
            }),
            (t.prototype.listenToRoomTimerStore = function() {
                this.roomTimerStore;
                this.roomTimerStore &&
                    (this.roomTimerStore.addActionListener(
                        c.w,
                        this.onOtherStoreAction,
                        this
                    ),
                    this.roomTimerStore.addActionListener(
                        c.z,
                        this.onOtherStoreAction,
                        this
                    ));
            }),
            (t.prototype.onOtherStoreAction = function(t) {
                switch (t.type) {
                    case c.w:
                        this.cancelBet();
                        break;
                    case c.z:
                        this.clearAll(), this.dispatchAction(c.T);
                }
            }),
            (t.prototype.checkConfirmedByType = function(t) {
                return (
                    this.stakePool.getAmount(t) === this.donePool.getAmount(t)
                );
            }),
            t
        );
    })(Core.NetworkStoreBase);
    (c.BetStoreBase = t),
        __reflect(t.prototype, 'VideoGameCore.BetStoreBase', [
            'VideoGameCore.BetTableStoreInterface'
        ]);
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(n) {
    var h;
    !(function(t) {
        (t[(t.WEB_NODE = 0)] = 'WEB_NODE'), (t[(t.BITMAP = 1)] = 'BITMAP');
    })((h = n.VIDEO_RENDER_MODE || (n.VIDEO_RENDER_MODE = {})));
    var t = (function(i) {
        function t(t) {
            void 0 === t && (t = n.DEFAULT_ROOT_ID);
            var e = i.call(this) || this;
            return (
                (e.needDestroy = !0),
                (e.rootId = n.DEFAULT_ROOT_ID),
                (e.renderMode = h.WEB_NODE),
                (e.rootId = t),
                e
            );
        }
        return (
            __extends(t, i),
            Object.defineProperty(t.prototype, 'player', {
                get: function() {
                    return n.VideoFactory.instance.getPlayerById(this.rootId);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.childrenCreated = function() {
                (this.webNode = new n.DraggableWebNode(this.rootId)),
                    (this.bitmap = new egret.Bitmap()),
                    (this.bitmap.width = this.width),
                    (this.bitmap.height = this.height),
                    (this.cacheCanvas = document.createElement('canvas')),
                    (this.cacheCanvas.width = this.width),
                    (this.cacheCanvas.height = this.height),
                    (this.cacheCtx = this.cacheCanvas.getContext('2d')),
                    this.addChild(this.webNode),
                    this.addChild(this.bitmap);
            }),
            (t.prototype.onRemoveFromStage = function() {
                i.prototype.onRemoveFromStage.call(this);
                var t = n.VideoFactory.instance.getVideoStoreById(this.rootId);
                this.clearBitamp(),
                    n.VideoFactory.instance.stopPlayer(
                        this.rootId,
                        this.needDestroy
                    ),
                    this.videoLoadingGrp && (this.videoLoadingGrp.visible = !1),
                    (t.vid = null);
            }),
            (t.prototype.getStoreList = function() {
                var t = n.VideoFactory.instance.getVideoStoreById(this.rootId);
                return [t];
            }),
            (t.prototype.onStoreChange = function(t, e, i) {
                var r = n.VideoFactory.instance.getVideoStoreById(this.rootId);
                switch (e) {
                    case Core.t:
                        this.initWebNode(),
                            this.switchMode(this.renderMode),
                            r.isOpen && this.toggleLoading(!0);
                        break;
                    case n.O:
                        this.toggleBg(!0), this.toggleLoading(!1);
                        break;
                    case n.I:
                    case n.R:
                        r.isOpen && (this.toggleBg(!0), this.toggleLoading(!0));
                        break;
                    case n.j:
                        var s = this.player.getPlayerElement();
                        this.webNode.bindScalableElement(s),
                            this.updateVideoSize({
                                width: this.width,
                                height: this.height
                            }),
                            this.toggleBg(!1),
                            this.toggleLoading(!1);
                        break;
                    case n.B:
                        this.toggleBg(!0), this.toggleLoading(!1);
                        break;
                    case n.A:
                        this.switchMode(i);
                        break;
                    case n.N:
                        this.updateLayer(i);
                        break;
                    case n.D:
                        this.updateVideoSize(i);
                        break;
                    case n.U:
                        this.changeDraggable();
                        break;
                    case n.F:
                        this.renderMode === h.WEB_NODE &&
                            this.webNode.appendChildElement(i);
                        break;
                    case n.K:
                        this.renderMode === h.WEB_NODE &&
                            this.webNode.removeChildElementByClassName(i);
                }
            }),
            (t.prototype.initWebNode = function() {
                var t = this.player.getContainerElement(),
                    e = this.player.getMediaElement();
                t && e
                    ? (this.webNode.bindContainerElement(e.parentElement),
                      this.webNode.bind(t))
                    : egret.setTimeout(this.initWebNode, this, 100);
            }),
            (t.prototype.initBitmap = function() {
                this.addEventListener(
                    egret.Event.ENTER_FRAME,
                    this.onDecodeFrame,
                    this
                );
            }),
            (t.prototype.clearBitamp = function() {
                this.removeEventListener(
                    egret.Event.ENTER_FRAME,
                    this.onDecodeFrame,
                    this
                );
            }),
            (t.prototype.onDecodeFrame = function() {
                var t = this.player.getPlayerElement();
                t &&
                    t instanceof HTMLVideoElement &&
                    (this.cacheCtx.drawImage(
                        t,
                        0,
                        0,
                        this.bitmap.width,
                        this.bitmap.height
                    ),
                    (this.bitmap.bitmapData = new egret.BitmapData(
                        this.cacheCanvas
                    )));
            }),
            (t.prototype.toggleBg = function(t) {
                this.videoBgGrp && (this.videoBgGrp.visible = t),
                    this.renderMode === h.BITMAP && (this.bitmap.visible = !t);
            }),
            (t.prototype.toggleLoading = function(t) {
                this.videoLoadingGrp && (this.videoLoadingGrp.visible = t);
            }),
            (t.prototype.clipPlayer = function(t, e, i, r, s, n, o) {
                if (this.webNode && this.renderMode === h.WEB_NODE)
                    n
                        ? this.webNode.clip(t, e, i, r, s, n, o)
                        : this.webNode.clip(t, e, i, r, s, function() {}, o);
                else if (this.renderMode === h.BITMAP) {
                    var a = this.width / i;
                    (this.bitmap.width = this.width * a),
                        (this.bitmap.height = this.height * a),
                        (this.bitmap.x = -t * a),
                        (this.bitmap.y = -e * a),
                        n && n();
                }
            }),
            (t.prototype.switchMode = function(t) {
                t === h.WEB_NODE
                    ? ((this.renderMode = h.WEB_NODE),
                      (this.bitmap.visible = !1),
                      this.clearBitamp(),
                      this.player.show())
                    : t === h.BITMAP &&
                      ((this.renderMode = h.BITMAP),
                      this.player.hide(),
                      this.initBitmap(),
                      (this.bitmap.visible = !0));
            }),
            (t.prototype.updateLayer = function(t) {
                this.renderMode == h.WEB_NODE && this.webNode.setLayerIndex(t);
            }),
            (t.prototype.updateVideoSize = function(t) {
                var e = t.width,
                    i = t.height;
                this.player.resize(e, i),
                    this.webNode.resize(e, i),
                    (this.bitmap.width = e),
                    (this.bitmap.height = i),
                    (this.cacheCanvas.width = e),
                    (this.cacheCanvas.height = i);
            }),
            (t.prototype.changeDraggable = function() {
                if (this.renderMode == h.WEB_NODE) {
                    var t = n.VideoFactory.instance.getVideoStoreById(
                        this.rootId
                    );
                    t.draggable
                        ? this.webNode.enableDrag()
                        : this.webNode.disableDrag();
                }
            }),
            (t.prototype.getVolume = function() {
                return this.player ? this.player.getVolume() : 0;
            }),
            (t.prototype.setVolume = function(t) {
                this.player && this.player.setVolume(t);
            }),
            t
        );
    })(Core.StoreView);
    (n.VideoPanelBase = t),
        __reflect(t.prototype, 'VideoGameCore.VideoPanelBase');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t = (function(i) {
        function t(t) {
            void 0 === t && (t = null);
            var e = i.call(this, t) || this;
            return (
                (e.isDB = !1),
                (e.isPair = !1),
                (e.isSS = !1),
                (e.playtypes = r.BET_PLAYTYPES),
                (e.stakePool = new r.StakePoolBac()),
                (e.donePool = new r.StakePoolBac()),
                (e.diffPool = new r.StakePoolBac()),
                (e.lastPool = new r.StakePoolBac()),
                e
            );
        }
        return (
            __extends(t, i),
            Object.defineProperty(t.prototype, 'vid', {
                get: function() {
                    return this._vid;
                },
                set: function(t) {
                    this.setVid(t);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.setVid = function(t) {
                (this._vid = t),
                    null == this._vid
                        ? (this.isDB = !1)
                        : r.PCGameConfig.instance.checkDragonBonus(this._vid)
                            ? (this.isDB = !0)
                            : (this.isDB = !1),
                    this.isDB &&
                        this.playtypes &&
                        (this.playtypes = this.playtypes.concat(
                            r.BET_PLAYTYPES_DB
                        )),
                    null == this._vid
                        ? (this.isPair = !1)
                        : r.PCGameConfig.instance.checkPairs(this._vid)
                            ? (this.isPair = !0)
                            : (this.isPair = !1),
                    this.isPair &&
                        this.playtypes &&
                        (this.playtypes = this.playtypes.concat(
                            r.BET_PLAYTYPES_PAIR
                        )),
                    null == this._vid
                        ? (this.isSS = !1)
                        : r.PCGameConfig.instance.checkSuperSix(this._vid)
                            ? (this.isSS = !0)
                            : (this.isSS = !1),
                    this.isSS &&
                        this.playtypes &&
                        (this.playtypes = this.playtypes.concat(
                            r.BET_PLAYTYPES_SS
                        ));
            }),
            Object.defineProperty(t.prototype, 'noComm', {
                get: function() {
                    if (
                        void 0 ===
                            Core.StorageManager.instance.getObject(
                                r.COMM_FREE_KEY
                            )[this.vid] ||
                        !r.UserStore.instance.checkInitNoComm(this.vid)
                    ) {
                        var t = r.PCGameConfig.instance.specialVidsConfig.noComm.split(
                            ' '
                        );
                        t.indexOf(this.vid) > -1 &&
                            !r.UserStore.instance.checkInitNoComm(this.vid) &&
                            ((Core.StorageManager.instance.getObject(
                                r.COMM_FREE_KEY
                            )[this.vid] = 'true'),
                            r.UserStore.instance.setInitNoComm(this.vid));
                    }
                    return (
                        'true' ===
                            Core.StorageManager.instance.getObject(
                                r.COMM_FREE_KEY
                            )[this.vid] &&
                        r.PCGameConfig.instance.checkNoCommToggleSwitch()
                    );
                },
                set: function(t) {
                    var e = Core.StorageManager.instance.getObject(
                        r.COMM_FREE_KEY
                    );
                    (e[this.vid] = t ? 'true' : 'false'),
                        Core.StorageManager.instance.setObject(
                            r.COMM_FREE_KEY,
                            e
                        ),
                        this.dispatchAction(r.J);
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(t.prototype, 'commToggleEnabled', {
                get: function() {
                    return (
                        this.stakePool.getAmount(r.PLAYTYPE_BANKER) <= 0 &&
                        this.stakePool.getAmount(r.PLAYTYPE_SUPER_SIX) <= 0
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.getRealPlaytype = function(t) {
                return t === r.PLAYTYPE_BANKER_NO_COMMISSION
                    ? r.PLAYTYPE_BANKER
                    : t;
            }),
            t
        );
    })(r.BetStoreBase);
    (r.BetStoreBaseBac = t),
        __reflect(t.prototype, 'VideoGameCore.BetStoreBaseBac');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(o) {
    var t;
    !(function(e) {
        var t = (function(n) {
            function t() {
                var t = n.call(this) || this;
                return (
                    (t.playTypeRates = new Core.HashMap()),
                    (t.stakePool = new o.StakePoolRou()),
                    (t.donePool = new o.StakePoolRou()),
                    (t.diffPool = new o.StakePoolRou()),
                    (t.lastPool = new o.StakePoolRou()),
                    t
                );
            }
            return (
                __extends(t, n),
                (t.prototype.getPlayTypeRate = function(t) {
                    return this.playTypeRates.has(t)
                        ? this.playTypeRates.get(t)
                        : 0;
                }),
                (t.prototype.getAmountByType = function(t, e) {
                    return (
                        void 0 === e && (e = []), this.stakePool.getAmount(t, e)
                    );
                }),
                (t.prototype.getUnconfirmedAmountByType = function(t, e) {
                    return (
                        void 0 === e && (e = []),
                        this.stakePool.getAmount(t, e) -
                            this.donePool.getAmount(t, e)
                    );
                }),
                (t.prototype.getStakeDataList = function() {
                    return this.stakePool.getAllStakeData();
                }),
                (t.prototype.addChipByPlayType = function(t, e, i) {
                    return (
                        void 0 === i && (i = []),
                        n.prototype.addChipByPlayType.call(this, t, e, i)
                    );
                }),
                (t.prototype.confirmBet = function() {
                    var i = this;
                    if ((this.dispatchAction(o.h), this.confirmEnabled)) {
                        var r = [];
                        (this.diffPool = this.stakePool.calculateDiff(
                            this.donePool
                        )),
                            this.diffPool.stakeDataMap.forEach(function(t) {
                                var e = t.playType;
                                t.amount <= 0 ||
                                    (0 ===
                                    i.checkLimit(
                                        e,
                                        i.stakePool.getAmount(e, t.nums)
                                    )
                                        ? r.push(t)
                                        : e ===
                                              i.stakePool.getLastBetPlayType() &&
                                          o.UserStore.instance.balance -
                                              i.diffPool.totalAmount <
                                              1
                                            ? r.push(t)
                                            : (i.cancelBetByPlayType(e, t.nums),
                                              i.dispatchAction(o.r)));
                            }, this),
                            r.length > 0 && this.sendBetBundleToServer(r);
                    }
                }),
                (t.prototype.repeatBet = function() {
                    if (this.betEnabled) {
                        if (
                            this.lastPool.totalAmount >
                            o.UserStore.instance.balance
                        )
                            return void this.dispatchAction(o.i);
                        this.stakePool.copy(this.lastPool),
                            this.dispatchAction(o.o);
                    }
                }),
                (t.prototype.getBetLimitByPlayType = function(t) {
                    return o.UserStore.instance.getBetLimitByPlayType(
                        t,
                        e.RouStore.instance.tableCode
                    );
                }),
                (t.prototype.cancelBetByPlayType = function(t, e) {
                    this.stakePool.setAmount(
                        t,
                        this.donePool.getAmount(t, e),
                        e
                    );
                }),
                (t.prototype.onSocketData = function(t, e) {
                    if (
                        (n.prototype.onSocketData.call(this, t, e),
                        !this.isInvalidVid(t))
                    ) {
                        var i;
                        switch (t.respId) {
                            case o.ROU_GAME_PAYOUT_RATE:
                                var r = t,
                                    s = this.playTypeRates.keys;
                                for (i = 0; i < s.length; i++)
                                    this.playTypeRates['delete'](s[i]);
                                for (i = 0; i < r.payoutRates.length; i++)
                                    this.playTypeRates.set(
                                        r.payoutRates[i].playType,
                                        r.payoutRates[i].rate
                                    );
                        }
                    }
                }),
                (t.prototype.m = function(e) {
                    var t = this.diffPool.getStakeDataListBySeq(e.seqNo);
                    t &&
                        t.forEach(function(t) {
                            (t.pending = !1), (t.success = 0 == e.retCode);
                        }),
                        0 !== e.retCode
                            ? this.cancelBet()
                            : (this.donePool.copy(this.stakePool),
                              this.lastPool.copy(this.donePool)),
                        0 !== e.retCode && this.dispatchAction(o.v, e.retCode),
                        this.dispatchAction(o.G, 0 == e.retCode);
                }),
                (t.prototype.payoutTimeoutDo = function(t) {
                    n.prototype.payoutTimeoutDo.call(this, t),
                        this.dispatchAction(o.k, { payouts: t.ptPayouts });
                }),
                t
            );
        })(o.BetStoreBase);
        (e.BetTableStoreBase = t),
            __reflect(t.prototype, 'VideoGameCore.Rou.BetTableStoreBase');
    })((t = o.Rou || (o.Rou = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t;
    !(function(t) {
        var e = (function(r) {
            function t() {
                var t = r.call(this) || this;
                return (
                    (t.playtypes = s.SHB_BET_PLAYTYPES),
                    (t.stakePool = new s.StakePool()),
                    (t.donePool = new s.StakePool()),
                    (t.diffPool = new s.StakePool()),
                    (t.lastPool = new s.StakePool()),
                    t
                );
            }
            return (
                __extends(t, r),
                (t.prototype.getAmountByType = function(t) {
                    return this.stakePool.getAmount(t);
                }),
                (t.prototype.getUnconfirmedAmountByType = function(t) {
                    return (
                        this.stakePool.getAmount(t) - this.donePool.getAmount(t)
                    );
                }),
                (t.prototype.getStakeDataList = function() {
                    return this.stakePool.getAllStakeData();
                }),
                (t.prototype.onSocketData = function(t, e) {
                    if (
                        (r.prototype.onSocketData.call(this, t, e),
                        !this.isInvalidVid(t))
                    )
                        switch (t.respId) {
                            case s.W:
                                this.V(t);
                                break;
                            case s.X:
                                var i = t;
                                this._(i);
                        }
                }),
                (t.prototype.payoutTimeoutDo = function(t) {
                    r.prototype.payoutTimeoutDo.call(this, t),
                        this.dispatchAction(s.k, { payouts: t.ptPayouts });
                }),
                t
            );
        })(s.BetStoreBase);
        (t.BetTableStoreBase = e),
            __reflect(e.prototype, 'VideoGameCore.Shb.BetTableStoreBase');
    })((t = s.Shb || (s.Shb = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(a) {
    var t = (function(s) {
        function t() {
            var t = (null !== s && s.apply(this, arguments)) || this;
            return (t.needDestroy = Core.isIE()), t;
        }
        return (
            __extends(t, s),
            (t.prototype.getStoreList = function() {
                return s.prototype.getStoreList
                    .call(this)
                    .concat([a.SettingStore.instance]);
            }),
            (t.prototype.onStoreChange = function(t, e, i) {
                s.prototype.onStoreChange.call(this, t, e, i);
                var r = a.VideoFactory.instance.getVideoStoreById(this.rootId);
                switch (e) {
                    case Core.t:
                        this.updateStreamList(),
                            r.isOpen &&
                                a.VideoFactory.instance.startPlayer(
                                    this.rootId
                                );
                        break;
                    case a.O:
                        a.VideoFactory.instance.stopPlayer(this.rootId);
                        break;
                    case a.I:
                    case a.R:
                        r.isOpen &&
                            (a.VideoFactory.instance.stopPlayer(
                                this.rootId,
                                !r.isPlaying && Core.isIE() && e === a.R
                            ),
                            this.updateStreamList(),
                            r.getStreamList().length > 0 &&
                                a.VideoFactory.instance.startPlayer(
                                    this.rootId
                                ));
                        break;
                    case a.B:
                        a.SettingStore.instance.getVideoAutoChange() &&
                            r.signal <= 1 &&
                            (r.line += 1);
                        break;
                    case a.j:
                    case a.ot:
                    case a.at:
                        this.updateLiveVolume();
                }
            }),
            (t.prototype.updateStreamList = function() {
                var t = a.VideoFactory.instance.getVideoStoreById(this.rootId),
                    e = t.vid;
                if (e) {
                    var i = a.StreamConfig.instance.getKey(
                            e,
                            egret.OrientationMode.LANDSCAPE
                        ),
                        r = a.StreamConfig.instance.getStreamLineList(i),
                        s = a.VideoPlazaStore.instance.getLiveStreamParamsByVid(
                            e
                        );
                    if (r) {
                        var n = new Array(),
                            o = t.isHD ? '2' : '1';
                        r.forEach(function(t) {
                            var e = {};
                            t.url &&
                                (e.url = (t.url + s).replace(
                                    '{resolution}',
                                    o
                                )),
                                t.icon &&
                                    (e.hls = (t.icon + s).replace(
                                        '{resolution}',
                                        o
                                    )),
                                t.rtmp &&
                                    (e.rtmp = (t.rtmp + s).replace(
                                        '{resolution}',
                                        o
                                    )),
                                n.push(e);
                        }),
                            t.filePath ||
                                (t.filePath = { url: '', hls: '', rtmp: '' }),
                            t.setLineHost(n),
                            t.updateStreamList();
                    }
                }
            }),
            (t.prototype.getLiveSoundEnable = function() {
                return a.SettingStore.instance.getLiveSoundEnable();
            }),
            (t.prototype.getLiveVolume = function() {
                return a.SettingStore.instance.getLiveVolume();
            }),
            (t.prototype.updateLiveVolume = function() {
                var t = a.VideoFactory.instance.getVideoStoreById(this.rootId);
                if (t.isOpen) {
                    var e = this.getLiveVolume();
                    this.getLiveSoundEnable()
                        ? this.setVolume(e)
                        : this.setVolume(0);
                }
            }),
            t
        );
    })(a.VideoPanelBase);
    (a.PCVideoPanelBase = t),
        __reflect(t.prototype, 'VideoGameCore.PCVideoPanelBase');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(f) {
        var t = (function(e) {
            function t() {
                var t = (null !== e && e.apply(this, arguments)) || this;
                return (
                    (t.receiveMouseInfo = !1),
                    (t.m_miPaiEnabled = !1),
                    (t.cardIndex = 0),
                    (t.side = 0),
                    (t.startTouchPoints = new Core.HashMap()),
                    (t.currentTouchPoints = new Core.HashMap()),
                    (t.touchPointIds = []),
                    t
                );
            }
            return (
                __extends(t, e),
                (t.prototype.getPokerData = function() {
                    return 1 == this.side &&
                        this.getPPokerData() &&
                        this.cardIndex - 1 < this.getPPokerData().length
                        ? this.getPPokerData()[this.cardIndex - 1]
                        : 0 == this.side &&
                          this.getBPokerData() &&
                          this.cardIndex - 1 < this.getBPokerData().length
                            ? this.getBPokerData()[this.cardIndex - 1]
                            : null;
                }),
                (t.prototype.getMouseInfo = function() {
                    if (this.receiveMouseInfo) {
                        if (
                            1 == this.side &&
                            this.getPMouseInfo() &&
                            this.cardIndex - 1 < this.getPMouseInfo().length
                        )
                            return this.getPMouseInfo()[this.cardIndex - 1];
                        if (
                            0 == this.side &&
                            this.getBMouseInfo() &&
                            this.cardIndex - 1 < this.getBMouseInfo().length
                        )
                            return this.getBMouseInfo()[this.cardIndex - 1];
                    }
                    return null;
                }),
                Object.defineProperty(t.prototype, 'pokerRotation', {
                    get: function() {
                        return this.rotationGrp ? this.rotationGrp.rotation : 0;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.onRemoveFromStage = function() {
                    e.prototype.onRemoveFromStage.call(this),
                        this.touchArea &&
                            (this.touchArea.removeEventListener(
                                egret.TouchEvent.TOUCH_BEGIN,
                                this.touchEventHandler,
                                this
                            ),
                            this.touchArea.removeEventListener(
                                egret.TouchEvent.TOUCH_END,
                                this.touchEventHandler,
                                this
                            ),
                            this.touchArea.removeEventListener(
                                egret.TouchEvent.TOUCH_MOVE,
                                this.touchEventHandler,
                                this
                            ),
                            this.touchArea.removeEventListener(
                                egret.TouchEvent.TOUCH_RELEASE_OUTSIDE,
                                this.touchEventHandler,
                                this
                            ),
                            this.touchArea.removeEventListener(
                                egret.TouchEvent.TOUCH_CANCEL,
                                this.touchEventHandler,
                                this
                            ),
                            this.touchArea.removeEventListener(
                                mouse.MouseEvent.MOUSE_OUT,
                                this.touchEventHandler,
                                this
                            ));
                }),
                (t.prototype.onStoreChange = function(t, e, i) {
                    switch (e) {
                        case Core.t:
                            (this.rotationGrp = new eui.Group()),
                                (this.rotationGrp.touchEnabled = !1),
                                this.addChild(this.rotationGrp),
                                (this.touchArea = new eui.Rect(
                                    this.width,
                                    this.height
                                )),
                                (this.touchArea.fillAlpha = 0),
                                this.addChild(this.touchArea),
                                this.touchArea.addEventListener(
                                    egret.TouchEvent.TOUCH_BEGIN,
                                    this.touchEventHandler,
                                    this
                                ),
                                this.touchArea.addEventListener(
                                    egret.TouchEvent.TOUCH_END,
                                    this.touchEventHandler,
                                    this
                                ),
                                this.touchArea.addEventListener(
                                    egret.TouchEvent.TOUCH_MOVE,
                                    this.touchEventHandler,
                                    this
                                ),
                                this.touchArea.addEventListener(
                                    egret.TouchEvent.TOUCH_RELEASE_OUTSIDE,
                                    this.touchEventHandler,
                                    this
                                ),
                                this.touchArea.addEventListener(
                                    egret.TouchEvent.TOUCH_CANCEL,
                                    this.touchEventHandler,
                                    this
                                ),
                                this.touchArea.addEventListener(
                                    mouse.MouseEvent.MOUSE_OUT,
                                    this.touchEventHandler,
                                    this
                                ),
                                (this.poker = new eui.Image(
                                    this.getImgByCardCode(
                                        1,
                                        this.pokerImagePrefix
                                    )
                                )),
                                (this.pokerBg = new eui.Image(
                                    this.getPokerBgImageName()
                                )),
                                this.addChild(this.pokerBg),
                                this.addChild(this.poker),
                                (this.poker.width = this.pokerWidth),
                                (this.poker.height = this.pokerHeight),
                                (this.pokerBg.width = this.pokerWidth),
                                (this.pokerBg.height = this.pokerHeight),
                                (this.buffWidth =
                                    (this.width - this.pokerWidth) / 2),
                                (this.buffHeight =
                                    (this.height - this.pokerHeight) / 2),
                                (this.poker.x = this.buffWidth),
                                (this.poker.y = this.buffHeight),
                                (this.pokerBg.x = this.buffWidth),
                                (this.pokerBg.y = this.buffHeight),
                                (this.maskMaker = new f.MaskMaker(
                                    this.pokerWidth,
                                    this.pokerHeight
                                )),
                                (this.maskMaker.firstMask.x = this.buffWidth),
                                (this.maskMaker.firstMask.y = this.buffHeight),
                                this.addChild(this.maskMaker.firstMask),
                                (this.maskMaker.secondMask.x = this.buffWidth),
                                (this.maskMaker.secondMask.y = this.buffHeight),
                                this.addChild(this.maskMaker.secondMask),
                                this.setChildIndex(this.touchArea, -1),
                                this.onInit();
                    }
                    if (
                        ((this.visible = this.isVisible),
                        this.visible && this.pokerBg)
                    ) {
                        this.pokerBg.source != this.getPokerBgImageName() &&
                            (this.pokerBg.source = this.getPokerBgImageName());
                        var r = !1,
                            s = this.getPokerData();
                        if (
                            ((this.poker.visible = !0),
                            (this.pokerBg.visible = !0),
                            (this.poker.mask = null),
                            (this.pokerBg.mask = null),
                            s
                                ? ((this.poker.source = this.getImgByCardCode(
                                      s.card,
                                      this.pokerImagePrefix
                                  )),
                                  s.show
                                      ? ((r = !0), this.setOpenCard())
                                      : s.isInvaild &&
                                        ((r = !0), this.setInvaildCard()))
                                : ((r = !0), this.setInvaildCard()),
                            !r)
                        ) {
                            r = !0;
                            var n = -1,
                                o = 1,
                                a = -1,
                                h = 1,
                                u = !1,
                                c = this.getMouseInfo();
                            c &&
                                ((u =
                                    2 == this.cardIndex
                                        ? 90 == c.rot2
                                        : 90 == c.rot1),
                                (this.rotation = u ? 90 : 0),
                                (n = c.x),
                                (o = c.y),
                                (a = c.baseX),
                                (h = c.baseY)),
                                this.miPaiEnabled &&
                                this.checkOpen(n, o, a, h, u)
                                    ? (1 == this.side
                                          ? this.askShowCard(this.cardIndex, 1)
                                          : this.askShowCard(this.cardIndex, 2),
                                      (s.show = !0),
                                      this.setOpenCard())
                                    : this.updateMask(n, o, a, h, u);
                        }
                    }
                }),
                (t.prototype.checkOpen = function(t, e, i, r, s) {
                    s && ((e = -e), (r = -r));
                    var n = i + t,
                        o = r + e;
                    return (0 > i && n > 0) ||
                        (i > 0 && 0 > n) ||
                        (0 > r && o > 0) ||
                        (r > 0 && 0 > o)
                        ? !0
                        : !1;
                }),
                (t.prototype.setOpenCard = function() {
                    var t = this.getMouseInfo();
                    if (t) {
                        var e =
                            2 == this.cardIndex ? 90 == t.rot2 : 90 == t.rot1;
                        this.rotation = e ? 90 : 0;
                    }
                    (this.poker.mask = null),
                        (this.pokerBg.mask = null),
                        (this.poker.visible = !0),
                        (this.pokerBg.visible = !0),
                        this.maskMaker.updateMask(0, 0),
                        (this.poker.mask = this.maskMaker.secondMask),
                        (this.pokerBg.mask = this.maskMaker.firstMask),
                        (this.poker.scaleX = 1),
                        (this.poker.x = this.buffWidth),
                        (this.poker.y = this.buffHeight),
                        (this.poker.mask.x = this.poker.x),
                        (this.poker.mask.y = this.poker.y),
                        (this.pokerBg.mask.x = this.poker.x),
                        (this.pokerBg.mask.y = this.poker.y),
                        this.addChild(this.pokerBg),
                        this.addChild(this.pokerBg.mask),
                        this.addChild(this.poker),
                        this.addChild(this.poker.mask),
                        this.setChildIndex(this.rotationGrp, -1),
                        this.setChildIndex(this.touchArea, -1),
                        (this.rotationGrp.anchorOffsetX = 0),
                        (this.rotationGrp.anchorOffsetY = 0),
                        (this.rotationGrp.rotation = 0),
                        (this.miPaiEnabled = !1),
                        this.resetTouch();
                }),
                (t.prototype.setInvaildCard = function() {
                    (this.poker.mask = null),
                        (this.pokerBg.mask = null),
                        (this.poker.visible = !1),
                        (this.pokerBg.visible = !1),
                        (this.poker.mask = this.maskMaker.secondMask),
                        (this.pokerBg.mask = this.maskMaker.firstMask),
                        this.addChild(this.pokerBg),
                        this.addChild(this.pokerBg.mask),
                        this.addChild(this.poker),
                        this.addChild(this.poker.mask),
                        this.setChildIndex(this.rotationGrp, -1),
                        this.setChildIndex(this.touchArea, -1),
                        (this.rotationGrp.anchorOffsetX = 0),
                        (this.rotationGrp.anchorOffsetY = 0),
                        (this.rotationGrp.rotation = 0),
                        this.resetTouch();
                }),
                (t.prototype.resetTouch = function() {
                    var e = this;
                    this.touchPointIds.forEach(function(t) {
                        e.startTouchPoints['delete'](t),
                            e.currentTouchPoints['delete'](t);
                    }, this),
                        (this.touchPointIds = []);
                }),
                (t.prototype.touchEventHandler = function(t) {
                    var e = this;
                    if (!this.miPaiEnabled) return void this.resetTouch();
                    switch (t.type) {
                        case egret.TouchEvent.TOUCH_BEGIN:
                            this.startTouchPoints.has(t.touchPointID) ||
                                (this.startTouchPoints.set(
                                    t.touchPointID,
                                    new egret.Point(t.localX, t.localY)
                                ),
                                this.touchPointIds.push(t.touchPointID));
                        case egret.TouchEvent.TOUCH_MOVE:
                            if (!this.startTouchPoints.has(t.touchPointID)) {
                                this.resetTouch();
                                break;
                            }
                            this.currentTouchPoints.has(t.touchPointID) ||
                                this.currentTouchPoints.set(
                                    t.touchPointID,
                                    new egret.Point(t.localX, t.localY)
                                ),
                                (this.currentTouchPoints.get(t.touchPointID).x =
                                    t.localX),
                                (this.currentTouchPoints.get(t.touchPointID).y =
                                    t.localY);
                            break;
                        case mouse.MouseEvent.MOUSE_OUT:
                        case egret.TouchEvent.TOUCH_CANCEL:
                        case egret.TouchEvent.TOUCH_RELEASE_OUTSIDE:
                        case egret.TouchEvent.TOUCH_END:
                            this.startTouchPoints['delete'](t.touchPointID),
                                this.currentTouchPoints['delete'](
                                    t.touchPointID
                                );
                            var i = this.touchPointIds.indexOf(t.touchPointID);
                            i >= 0 && this.touchPointIds.splice(i, 1);
                    }
                    var r = this.getPokerData();
                    if (r && !r.show && !r.isInvaild) {
                        var s = null,
                            n = null;
                        this.touchPointIds.forEach(function(t) {
                            null != s
                                ? ((s.x =
                                      (e.startTouchPoints.get(t).x + s.x) / 2),
                                  (s.y =
                                      (e.startTouchPoints.get(t).y + s.y) / 2),
                                  (n.x =
                                      (e.currentTouchPoints.get(t).x + n.x) /
                                      2),
                                  (n.y =
                                      (e.currentTouchPoints.get(t).y + n.y) /
                                      2))
                                : ((s = new egret.Point(
                                      e.startTouchPoints.get(t).x,
                                      e.startTouchPoints.get(t).y
                                  )),
                                  (n = new egret.Point(
                                      e.currentTouchPoints.get(t).x,
                                      e.currentTouchPoints.get(t).y
                                  )));
                        }, this),
                            null == s &&
                                ((s = new egret.Point(0, 0)),
                                (n = new egret.Point(0, 0)));
                        var o =
                                (n.x - this.buffWidth - this.pokerWidth / 2) /
                                (this.pokerWidth / 2),
                            a =
                                (n.y - this.buffHeight - this.pokerHeight / 2) /
                                (this.pokerHeight / 2),
                            h =
                                (s.x - this.buffWidth - this.pokerWidth / 2) /
                                (this.pokerWidth / 2),
                            u =
                                (s.y - this.buffHeight - this.pokerHeight / 2) /
                                (this.pokerHeight / 2),
                            c = h >= 0.5 ? 1 : -0.5 >= h ? -1 : 0,
                            f = u >= 0.5 ? 1 : -0.5 >= u ? -1 : 0,
                            C = 90 == this.rotation;
                        if (this.checkOpen(o, a, c, f, !1))
                            1 == this.side
                                ? this.askShowCard(this.cardIndex, 1)
                                : this.askShowCard(this.cardIndex, 2),
                                (r.show = !0),
                                this.setOpenCard();
                        else {
                            (this.poker.mask = null),
                                (this.pokerBg.mask = null),
                                this.updateMask(o, a, c, f, !1);
                            var l = new m();
                            C
                                ? ((l.x = -a),
                                  (l.y = o),
                                  (l.baseX = -f),
                                  (l.baseY = c),
                                  (l.rot1 = 2 == this.cardIndex ? 0 : 90),
                                  (l.rot2 = 2 == this.cardIndex ? 90 : 0))
                                : ((l.x = o),
                                  (l.y = a),
                                  (l.baseX = c),
                                  (l.baseY = f),
                                  (l.rot1 = 0),
                                  (l.rot2 = 0)),
                                0 == this.side
                                    ? ((this.getBMouseInfo()[
                                          this.cardIndex - 1
                                      ] = l),
                                      this.miCard(this.cardIndex, 1, [l]))
                                    : ((this.getPMouseInfo()[
                                          this.cardIndex - 1
                                      ] = l),
                                      this.miCard(this.cardIndex, 0, [l]));
                        }
                    }
                }),
                (t.prototype.updateMask = function(t, e, i, r, s) {
                    var n = this.pokerWidth,
                        o = this.pokerHeight;
                    if (s) {
                        var a = e;
                        (e = -t), (t = a), (a = r), (r = -i), (i = a);
                    }
                    var h = ((t + 1) * n) / 2,
                        u = ((e + 1) * o) / 2,
                        c = ((i + 1) * n) / 2,
                        f = ((r + 1) * o) / 2;
                    0 == i && (h = c), 0 == r && (u = f);
                    var C = -1 / ((u - f) / (h - c)),
                        l = (u + f) / 2 - (C * (h + c)) / 2;
                    (h - c == 0 || (u - f) / (h - c) == 0) &&
                        ((C = h - c == 0 ? 0 : null),
                        (l = h - c == 0 ? (u + f) / 2 : (h + c) / 2),
                        0 == l && ((C = 0), (i = 0), (r = 0))),
                        ((0 > i && -1 > t) ||
                            (i > 0 && t > 1) ||
                            (0 > r && -1 > e) ||
                            (r > 0 && e > 1) ||
                            (0 == i && 0 == r)) &&
                            ((C = 0), (l = 0), (i = 0), (r = 0)),
                        this.maskMaker.updateMask(C, l);
                    var m = (0 * n) / 2,
                        d = (2 * o) / 2,
                        v = null == C ? 0 : C,
                        G = v * m - d + l,
                        _ = v * c - f + l;
                    null == C && ((G = n > h ? 1 : -1), (_ = n > c ? 1 : -1)),
                        !((G > 0 && _ > 0) || (0 >= G && 0 >= _)) ||
                        (0 == C && 0 == l)
                            ? ((this.poker.mask = this.maskMaker.firstMask),
                              (this.pokerBg.mask = this.maskMaker.secondMask))
                            : ((this.poker.mask = this.maskMaker.secondMask),
                              (this.pokerBg.mask = this.maskMaker.firstMask)),
                        0 == i && 0 == r
                            ? ((this.poker.scaleX = 1),
                              (this.poker.x = this.buffWidth),
                              (this.poker.y = this.buffHeight),
                              (this.poker.mask.x = this.poker.x),
                              (this.poker.mask.y = this.poker.y),
                              (this.pokerBg.mask.x = this.poker.x),
                              (this.pokerBg.mask.y = this.poker.y),
                              this.addChild(this.pokerBg),
                              this.addChild(this.pokerBg.mask),
                              this.addChild(this.poker),
                              this.addChild(this.poker.mask),
                              this.setChildIndex(this.rotationGrp, -1),
                              this.setChildIndex(this.touchArea, -1),
                              (this.rotationGrp.anchorOffsetX = 0),
                              (this.rotationGrp.anchorOffsetY = 0),
                              (this.rotationGrp.rotation = 0))
                            : ((this.poker.x = n + this.buffWidth),
                              (this.poker.y = this.buffHeight),
                              (this.poker.scaleX = -1),
                              (this.poker.mask.x = this.buffWidth),
                              (this.poker.mask.y = this.poker.y),
                              (this.pokerBg.mask.x = this.buffWidth),
                              (this.pokerBg.mask.y = this.buffHeight),
                              this.addChild(this.pokerBg),
                              this.addChild(this.pokerBg.mask),
                              (this.rotationGrp.scaleX = -1),
                              this.rotationGrp.addChild(this.poker),
                              this.rotationGrp.addChild(this.poker.mask),
                              this.setChildIndex(this.rotationGrp, -1),
                              this.setChildIndex(this.touchArea, -1),
                              (this.rotationGrp.anchorOffsetX =
                                  (h + c) / 2 + this.buffWidth),
                              (this.rotationGrp.anchorOffsetY =
                                  (u + f) / 2 + this.buffHeight),
                              (this.rotationGrp.rotation =
                                  180 + ((180 * Math.atan(v)) / Math.PI) * 2),
                              null == C && (this.rotationGrp.rotation = 0),
                              (this.rotationGrp.x =
                                  (h + c) / 2 + this.buffWidth),
                              (this.rotationGrp.y =
                                  (u + f) / 2 + this.buffHeight));
                }),
                (t.prototype.rotatePanel = function() {
                    0 == this.rotation
                        ? (this.rotation = 90)
                        : (this.rotation = 0),
                        this.clearMouseInfo();
                }),
                (t.prototype.onInit = function() {}),
                Object.defineProperty(t.prototype, 'miPaiEnabled', {
                    get: function() {
                        return this.m_miPaiEnabled;
                    },
                    set: function(t) {
                        this.m_miPaiEnabled = t;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                t
            );
        })(Core.StoreView);
        (f.MiPaiPanel = t),
            __reflect(t.prototype, 'VideoGameCore.MiPai.MiPaiPanel');
        var m = (function() {
            function t() {}
            return t;
        })();
        (f.MouseInfo = m),
            __reflect(m.prototype, 'VideoGameCore.MiPai.MouseInfo');
    })((e = t.MiPai || (t.MiPai = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(a) {
    var t;
    !(function(t) {
        var e = (function(o) {
            function t(t, e, i, r, s) {
                void 0 === i && (i = 1),
                    void 0 === r && (r = 6),
                    void 0 === s && (s = 0.5);
                var n = o.call(this) || this;
                return (
                    (n.colOffset = 0),
                    (n.maxOffset = 0),
                    (n.gridColor = 0),
                    (n.gridAlpha = 1),
                    (n.edgeGridColor = 2236962),
                    (n.edgeGridAlpha = 1),
                    (n.width = t),
                    (n.height = e),
                    (n.gridLineWidth = s),
                    (n.rowNum = r),
                    (n.gridSize =
                        n instanceof a.RoadPaper.EuRoadRouMainPaper
                            ? n.width / 10
                            : n.height / n.rowNum),
                    (n.colNum =
                        n instanceof a.RoadPaper.EuRoadRouMainPaper
                            ? 10
                            : Math.ceil(n.width / n.gridSize)),
                    (n.bundleSize = i),
                    n instanceof a.RoadPaper.EuRoadRouMainPaper ||
                        n.drawGridPaper(),
                    (n.cacheAsBitmap = !0),
                    (n.touchEnabled = !1),
                    (n.touchChildren = !1),
                    n
                );
            }
            return (
                __extends(t, o),
                (t.prototype.setGridColor = function(t, e) {
                    void 0 === t && (t = 0),
                        void 0 === e && (e = 1),
                        (this.gridColor = t),
                        (this.gridAlpha = e),
                        this.drawGridPaper();
                }),
                (t.prototype.setEdgeGridColor = function(t, e) {
                    void 0 === t && (t = 2236962),
                        void 0 === e && (e = 1),
                        (this.edgeGridColor = t),
                        (this.edgeGridAlpha = e),
                        this.drawGridPaper();
                }),
                (t.prototype.drawGridPaper = function() {
                    this.graphics.lineStyle(
                        2 * this.gridLineWidth,
                        this.edgeGridColor,
                        this.edgeGridAlpha
                    ),
                        this.graphics.drawRect(0, 0, this.width, this.height),
                        this.graphics.lineStyle(
                            this.gridLineWidth,
                            this.gridColor,
                            this.gridAlpha
                        );
                    for (var t = 1; t < this.rowNum; t++)
                        t % this.bundleSize == 0 &&
                            (this.graphics.moveTo(0, t * this.gridSize),
                            this.graphics.lineTo(
                                this.width,
                                t * this.gridSize
                            ));
                    for (var t = 1; t < this.colNum; t++)
                        t % this.bundleSize == 0 &&
                            (this.graphics.moveTo(t * this.gridSize, 0),
                            this.graphics.lineTo(
                                t * this.gridSize,
                                this.height
                            ));
                }),
                (t.prototype.setColOffset = function(t) {
                    0 > t && (t = 0), (this.colOffset = t);
                }),
                (t.prototype.refreshGridPaper = function(t, e) {
                    void 0 === e && (e = -1),
                        this.graphics.clear(),
                        this.graphics.lineStyle(this.gridLineWidth, t),
                        this.graphics.drawRect(0, 0, this.width, this.height),
                        this.graphics.lineStyle(this.gridLineWidth, t);
                    for (var i = 1; i < this.rowNum; i++)
                        i % this.bundleSize == 0 &&
                            (this.graphics.moveTo(0, i * this.gridSize),
                            this.graphics.lineTo(
                                this.width,
                                i * this.gridSize
                            ));
                    e >= 0
                        ? this.graphics.lineStyle(this.gridLineWidth, e)
                        : this.graphics.lineStyle(this.gridLineWidth, t);
                    for (var i = 1; i < this.colNum; i++)
                        i % this.bundleSize == 0 &&
                            (this.graphics.moveTo(i * this.gridSize, 0),
                            this.graphics.lineTo(
                                i * this.gridSize,
                                this.height
                            ));
                }),
                t
            );
        })(egret.Sprite);
        (t.GridPaper = e),
            __reflect(e.prototype, 'VideoGameCore.RoadPaper.GridPaper');
    })((t = a.RoadPaper || (a.RoadPaper = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(e) {
        function t() {
            var t = e.call(this) || this;
            return (t.dataList = []), (t.firstPage = 0), (t.curPage = 0), t;
        }
        return (
            __extends(t, e),
            Object.defineProperty(t.prototype, 'maxPage', {
                get: function() {
                    return this.itemPerPage &&
                        this.itemPerPage > 0 &&
                        this.dataList.length > 0
                        ? Math.ceil(this.dataList.length / this.itemPerPage) - 1
                        : 0;
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.getDataOnCurPage = function() {
                return this.getDataByPage(this.curPage);
            }),
            (t.prototype.getDataByPage = function(t) {
                return [];
            }),
            (t.prototype.onSocketData = function(t, e) {}),
            (t.prototype.goPrevPage = function() {
                this.curPage > this.firstPage &&
                    (this.curPage--, this.dispatchAction(i.ht));
            }),
            (t.prototype.goNextPage = function() {
                this.curPage < this.maxPage &&
                    (this.curPage++, this.dispatchAction(i.ht));
            }),
            (t.prototype.goSelectPage = function(t) {
                t >= this.firstPage &&
                    t <= this.maxPage &&
                    this.curPage !== t &&
                    ((this.curPage = t), this.dispatchAction(i.ht));
            }),
            (t.prototype.goFirstPage = function() {
                this.goSelectPage(this.firstPage);
            }),
            (t.prototype.goLastPage = function() {
                this.goSelectPage(this.maxPage);
            }),
            (t.prototype.isFirstPage = function() {
                return this.curPage === this.firstPage;
            }),
            (t.prototype.isLastPage = function() {
                return this.curPage === this.maxPage;
            }),
            (t.prototype.hasPrevPage = function() {
                return this.curPage > this.firstPage;
            }),
            (t.prototype.hasNextPage = function() {
                return this.curPage < this.maxPage;
            }),
            (t.prototype.getCurPageNum = function() {
                return this.curPage + 1 - this.firstPage;
            }),
            (t.prototype.getMaxPageNum = function() {
                return this.maxPage + 1 - this.firstPage;
            }),
            t
        );
    })(Core.NetworkStoreBase);
    (i.PaginationStoreBase = t),
        __reflect(t.prototype, 'VideoGameCore.PaginationStoreBase');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(a) {
    var t = (function(e) {
        function t() {
            var t = e.call(this) || this;
            return (
                (t.pokerDataQue = []),
                (t.bDataQue = []),
                (t.pDataQue = []),
                (t.bScore = 0),
                (t.pScore = 0),
                (t.bWin = !1),
                (t.pWin = !1),
                (t.tie = !1),
                (t.bPair = !1),
                (t.pPair = !1),
                t
            );
        }
        return (
            __extends(t, e),
            Object.defineProperty(t.prototype, 'visible', {
                get: function() {
                    return this.pokerDataQue.length > 0;
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.onSocketData = function(t, e) {
                if (!t.vid || this.vid === t.vid)
                    switch (t.respId) {
                        case a.ut:
                        case a.ct:
                        case a.ft:
                        case a.Ct:
                            this.resetByAction();
                            break;
                        case a.lt:
                            var i = t;
                            11 == i.status && this.resetByAction();
                            break;
                        case a.mt:
                            if (t instanceof a.dt) {
                                var r = t;
                                if ((this.resetAll(), 11 != r.status)) {
                                    if (
                                        r.gmtype != a.GAME_BAC &&
                                        r.gmtype != a.GAME_DT
                                    )
                                        return;
                                    for (
                                        var s = r.gmtype === a.GAME_DT ? 0 : 1,
                                            n = 0,
                                            o = 0;
                                        o < r.pcards.length;
                                        o++
                                    )
                                        0 != r.pcards[o] &&
                                            (n++,
                                            this.pokerDataQue.push(
                                                new h(r.pcards[o], 1 - s, n)
                                            ));
                                    for (var o = 0; o < r.bcards.length; o++)
                                        0 != r.bcards[o] &&
                                            (n++,
                                            this.pokerDataQue.push(
                                                new h(r.bcards[o], s, n)
                                            ));
                                    this.parsePokerDataQue(),
                                        this.dispatchAction(a.vt);
                                }
                            }
                    }
            }),
            (t.prototype.resetByAction = function() {
                Core.NonstopTimer.instance.clearTimeout(this.resultTimer),
                    (this.resultTimer = 0),
                    Core.NonstopTimer.instance.clearTimeout(this.resetTimer),
                    (this.resetTimer = 0),
                    this.resetAll(),
                    this.dispatchAction();
            }),
            (t.prototype.resetAll = function() {
                (this.pokerDataQue = []),
                    (this.bDataQue = []),
                    (this.pDataQue = []),
                    (this.pScore = 0),
                    (this.bScore = 0),
                    (this.pWin = !1),
                    (this.bWin = !1),
                    (this.tie = !1),
                    (this.bPair = !1),
                    (this.pPair = !1);
            }),
            (t.prototype.parsePokerDataQue = function() {
                (this.bDataQue = []),
                    (this.pDataQue = []),
                    (this.pScore = 0),
                    (this.bScore = 0);
                for (var t = 0; t < this.pokerDataQue.length; t++) {
                    var e = this.pokerDataQue[t],
                        i = e.cardValue;
                    (i = 10 > i ? i : 0),
                        0 == e.who && this.pDataQue.length <= a.MAX_POKER_NUM
                            ? (this.pDataQue.push(e),
                              e.show && (this.pScore += i))
                            : 1 == e.who &&
                              this.bDataQue.length <= a.MAX_POKER_NUM &&
                              (this.bDataQue.push(e),
                              e.show && (this.bScore += i));
                }
                (this.pScore %= 10), (this.bScore %= 10);
            }),
            (t.prototype.release = function() {
                e.prototype.release.call(this);
            }),
            t
        );
    })(Core.NetworkStoreBase);
    (a.PokerBaseStore = t),
        __reflect(t.prototype, 'VideoGameCore.PokerBaseStore', [
            'VideoGameCore.PokerStoreInterface'
        ]);
    var h = (function() {
        function t(t, e, i, r) {
            void 0 === i && (i = -1),
                void 0 === r && (r = !0),
                (this.card = t),
                (this.who = e),
                (this.index = i),
                (this.show = r),
                (this.cardValue = 15 & t);
        }
        return (
            Object.defineProperty(t.prototype, 'isInvaild', {
                get: function() {
                    return 0 == this.card;
                },
                enumerable: !0,
                configurable: !0
            }),
            t
        );
    })();
    (a.PokerData = h), __reflect(h.prototype, 'VideoGameCore.PokerData');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t = (function(e) {
        function t() {
            var t = e.call(this) || this;
            return (t.roadData = new s.RoadPaper.RoadData([])), t;
        }
        return (
            __extends(t, e),
            (t.prototype.onSocketConnected = function(t) {}),
            (t.prototype.onSocketData = function(t, e) {
                if (!t.vid || this.vid === t.vid)
                    switch (t.respId) {
                        case s.Ct:
                            this.resetByAction();
                            break;
                        case s.Gt:
                            var i = t;
                            this.onBeadList(i, e);
                            break;
                        case s.lt:
                            var r = t;
                            11 == r.status && this.resetByAction();
                            break;
                        case s.Ct:
                            this.lastGmcode = void 0;
                            break;
                        case s.lt:
                            var r = t;
                            11 == r.status && (this.lastGmcode = void 0);
                    }
            }),
            (t.prototype.onBeadList = function(t, e) {
                return t.beadList
                    ? ((this.roadData = new s.RoadPaper.RoadData(t.beadList)),
                      t.beadList.length > 0 &&
                          (this.lastGmcode =
                              t.beadList[t.beadList.length - 1].gmcode),
                      void this.dispatchUpdateAction())
                    : void console.warn('No valid bead list!');
            }),
            (t.prototype.onGameResult = function(t, e) {
                var i = this;
                (this.lastGmcode && this.lastGmcode === t.code) ||
                    (!this.lastGmcode ||
                    this.checkGmcodeValid(this.lastGmcode, t.code)
                        ? (this.timerId = Core.NonstopTimer.instance.setTimeout(
                              function() {
                                  !i.roadData ||
                                      (i.lastGmcode &&
                                          !i.checkGmcodeValid(
                                              i.lastGmcode,
                                              t.code
                                          )) ||
                                      ((i.lastGmcode = t.code),
                                      i.roadData.appendDaLuProto(t.bead),
                                      i.dispatchUpdateAction()),
                                      i.clearTimer();
                              },
                              this,
                              s.StreamConfig.instance.getAverageDelay()
                          ))
                        : this.requestBeadListAgain(e, this.vid));
            }),
            (t.prototype.dispatchUpdateAction = function() {
                this.dispatchAction();
            }),
            (t.prototype.checkGmcodeValid = function(t, e) {
                if (t.substr(0, 10) != e.substr(0, 10)) return !0;
                var i = t.charAt(t.length - 1),
                    r = e.charAt(e.length - 1),
                    s = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ',
                    n = s.indexOf(r) - s.indexOf(i);
                return 1 == n || -35 == n;
            }),
            (t.prototype.requestBeadListAgain = function(t, e) {
                Core.NonstopTimer.instance.setTimeout(
                    function() {
                        s.PlazaSocket.instance.writeBytes(
                            s.getCMDGetAllBacResults(e)
                        );
                    },
                    this,
                    s.StreamConfig.instance.getAverageDelay()
                );
            }),
            (t.prototype.resetByAction = function() {
                (this.roadData = new s.RoadPaper.RoadData([])),
                    this.clearTimer(),
                    this.dispatchUpdateAction();
            }),
            (t.prototype.clearTimer = function() {
                this.timerId &&
                    (Core.NonstopTimer.instance.clearTimeout(this.timerId),
                    (this.timerId = null));
            }),
            (t.prototype.release = function() {
                e.prototype.release.call(this);
            }),
            t
        );
    })(Core.NetworkStoreBase);
    (s.RoadMapBaseStore = t),
        __reflect(t.prototype, 'VideoGameCore.RoadMapBaseStore');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(e) {
        function t() {
            var t = e.call(this) || this;
            return (
                (t.gmcode = null),
                (t.gameStatus = -1),
                (t.timeout = 0),
                (t.maxTimeout = 25),
                t
            );
        }
        return (
            __extends(t, e),
            Object.defineProperty(t.prototype, 'roomName', {
                get: function() {
                    var t = '',
                        e = i.RoomConfig.instance.getRoomInfoByVid(this.vid);
                    return null != e && (t = e.roomname), t;
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.onSocketData = function(t, e) {
                if (!t.vid || this.vid === t.vid)
                    switch (t.respId) {
                        case i.ut:
                        case i.ct:
                        case i.ft:
                            this.onGameStart(t);
                            break;
                        case i.mt:
                            this.onGameCurrentStatus(t);
                            break;
                        case i.lt:
                            this.onVideoStatus(t);
                            break;
                        case i.Ct:
                            this.onShuffle();
                    }
            }),
            (t.prototype.onGameStart = function(t) {
                var e = t;
                this.gmcode != e.gmcode &&
                    (this.dispatchAction(i.z),
                    (this.gmcode = e.gmcode),
                    this.onGameStartDo(),
                    this.dispatchAction(i.Z),
                    Core.globalStore.dispatchGlobal(i.Z));
            }),
            (t.prototype.onGameStartDo = function() {}),
            (t.prototype.onGameCurrentStatus = function(t) {
                var e = t;
                this.gmcode != e.gmcode &&
                    (this.dispatchAction(i.z),
                    Core.globalStore.dispatchGlobal(i.z)),
                    (this.gmcode = e.gmcode),
                    (this.gameStatus = e.status),
                    this.updateTimeout(e.max_timeout, e.timeout),
                    this.dispatchAction(i.Y);
            }),
            (t.prototype.onVideoStatus = function(t) {
                var e = t;
                (this.gameStatus = e.status),
                    this.updateTimeout(e.max_timeout, e.timeout),
                    11 === e.status
                        ? this.onShuffle()
                        : this.dispatchAction(i.st, e.vid);
            }),
            (t.prototype.onShuffle = function() {
                (this.gameStatus = 11),
                    this.dispatchAction(i.it),
                    Core.globalStore.dispatchGlobal(i.it);
            }),
            (t.prototype.startCountDown = function() {
                this.timeout > 0 &&
                    !Core.NonstopTimer.instance.hasInterval(
                        this.countDownInterval
                    ) &&
                    (this.countDown(),
                    (this.countDownInterval = Core.NonstopTimer.instance.setInterval(
                        this.countDown,
                        this,
                        1e3
                    )));
            }),
            (t.prototype.updateTimeout = function(t, e) {
                (this.maxTimeout = t > 0 ? t : 25),
                    this.isBettingStatus
                        ? ((this.timeout = e), this.startCountDown())
                        : (this.timeout = 0);
            }),
            (t.prototype.countDown = function() {
                this.timeout > 0
                    ? (this.timeout--, this.dispatchAction(i._t))
                    : (Core.NonstopTimer.instance.clearInterval(
                          this.countDownInterval
                      ),
                      (this.gameStatus = 2),
                      this.dispatchAction(i.w));
            }),
            (t.prototype.release = function() {
                e.prototype.release.call(this),
                    Core.NonstopTimer.instance.clearInterval(
                        this.countDownInterval
                    );
            }),
            Object.defineProperty(t.prototype, 'isBettingStatus', {
                get: function() {
                    return 1 === this.gameStatus || 6 === this.gameStatus;
                },
                enumerable: !0,
                configurable: !0
            }),
            t
        );
    })(Core.NetworkStoreBase);
    (i.RoomTimerBaseStore = t),
        __reflect(t.prototype, 'VideoGameCore.RoomTimerBaseStore', [
            'VideoGameCore.RoomTimerStoreInterface'
        ]);
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(a) {
    var t = (function(e) {
        function t() {
            var t = e.call(this) || this;
            return t.clearAllPlayers(), t;
        }
        return (
            __extends(t, e),
            (t.prototype.clearAllPlayers = function() {
                this.allPlayerMap = new Core.ArrayMap();
            }),
            (t.prototype.getPlayer = function(t) {
                var e = this.allPlayerMap.get(t);
                return (
                    e ||
                        ((e = new a.TableSeatPlayer(t)),
                        this.allPlayerMap.set(t, e)),
                    e
                );
            }),
            (t.prototype.getPlayerBySeatNum = function(t) {
                for (
                    var e = null, i = this.getTablePlayers(), r = 0;
                    r < i.length;
                    r++
                )
                    if (i[r].seat === t) {
                        e = i[r];
                        break;
                    }
                return e;
            }),
            (t.prototype.getTablePlayers = function(t) {
                void 0 === t && (t = ''), '' == t && (t = this.tableCode);
                for (
                    var e, i = [], r = this.getPlayerList(), s = 0;
                    s < r.length;
                    s++
                )
                    (e = r[s]),
                        e.tableCode === t &&
                            a.isValidSeatNum(e.seat) &&
                            i.push(e);
                return i;
            }),
            (t.prototype.getPlayerList = function() {
                return this.allPlayerMap.values;
            }),
            (t.prototype.setPlayerData = function(t) {
                if (-2 == t.action) this.setPlayerLeave(t.loginname);
                else {
                    for (
                        var e = this.getPlayerList(), i = void 0, r = 0;
                        r < e.length;
                        r++
                    )
                        (i = e[r]),
                            i.seat == t.seat &&
                                i.tableCode == t.tableCode &&
                                this.allPlayerMap['delete'](i.loginname);
                    if (!t.tableCode) return;
                    (i = this.getPlayer(t.loginname)),
                        t.nickname && (i.nickname = t.nickname),
                        t.action && (i.action = t.action),
                        t.sex && (i.sex = t.sex),
                        t.vid && (i.vid = t.vid),
                        t.tableCode && (i.tableCode = t.tableCode),
                        t.currency && (i.currency = t.currency),
                        t.credit && (i.credit = t.credit),
                        t.seat && (i.seat = t.seat);
                }
            }),
            (t.prototype.setPlayerLeave = function(t) {
                this.allPlayerMap['delete'](t);
            }),
            (t.prototype.updatePlayerCredit = function(t, e, i) {
                void 0 === i && (i = 0);
                var r = this.getPlayer(t);
                null != r &&
                    ((r.credit = e),
                    i > 0
                        ? Core.NonstopTimer.instance.setTimeout(
                              function() {
                                  t == Core.LoginStore.instance.loginName &&
                                      a.UserStore.instance.setBalance(e),
                                      this.dispatchAction(a.bt, r);
                              },
                              this,
                              i
                          )
                        : (t == Core.LoginStore.instance.loginName &&
                              a.UserStore.instance.setBalance(e),
                          this.dispatchAction(a.Pt, r)));
            }),
            (t.prototype.onSocketConnected = function(t) {}),
            (t.prototype.onSocketData = function(t, e) {
                if (!t.vid || this.vid === t.vid)
                    switch (t.respId) {
                        case a.Vt:
                            var i = t;
                            0 == i.code && (this.tableCode = i.table);
                            break;
                        case a.gt:
                        case a.GAME_LAST_POSITION:
                        case a.GAME_USERLIST:
                        case a.GAME_USERLIST_WITH_VID:
                            this.onUserPosition(t);
                            break;
                        case a.pt:
                            var r = t;
                            this.updatePlayerCredit(r.name, r.left);
                            break;
                        case a.kt:
                            var s = t;
                            this.updatePlayerCredit(s.name, s.left);
                            break;
                        case a.W:
                            var n = t;
                            this.updatePlayerCredit(
                                Core.LoginStore.instance.loginName,
                                n.balance,
                                a.StreamConfig.instance.getAverageDelay()
                            );
                            break;
                        case a.wt:
                            var o = t;
                            this.updatePlayerCredit(
                                o.loginname,
                                o.credit,
                                a.StreamConfig.instance.getAverageDelay()
                            );
                    }
            }),
            (t.prototype.release = function() {
                e.prototype.release.call(this), this.clearAllPlayers();
            }),
            (t.prototype.onUserPosition = function(t) {
                for (var e = 0; e < t.players.length; e++)
                    this.setPlayerData(t.players[e]);
                (this.tableCode = this.getPlayer(
                    Core.LoginStore.instance.loginName
                ).tableCode),
                    this.dispatchAction(a.zt, this.getPlayerList());
            }),
            t
        );
    })(Core.NetworkStoreBase);
    (a.TableSeatBaseStore = t),
        __reflect(t.prototype, 'VideoGameCore.TableSeatBaseStore', [
            'VideoGameCore.TableSeatStoreInterface'
        ]);
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(a) {
    var t;
    !(function(i) {
        var t = (function(s) {
            function t() {
                var t = s.call(this) || this;
                return (
                    (t.MAX_VALID_NUM = 36),
                    (t.tablePool = new a.TablePoolBj()),
                    (t.stakePool = new a.StakePoolBj()),
                    (t.donePool = new a.StakePoolBj()),
                    (t.diffPool = new a.StakePoolBj()),
                    (t.lastPool = new a.StakePoolBj()),
                    (t.playtypes = a.BJ_BET_PLAYTYPES),
                    (t.socketList = [a.BjGameSocket.instance]),
                    t
                );
            }
            return (
                __extends(t, s),
                Object.defineProperty(t.prototype, 'roomTimerStore', {
                    get: function() {
                        return i.RoomTimerStore.instance;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, 'betEnabled', {
                    get: function() {
                        var t = !this.diffPool.pending;
                        if (t) {
                            var e = this.roomTimerStore.gameStatus,
                                t = 5 === e;
                            t ||
                                (t =
                                    10 === e &&
                                    this.roomTimerStore.timeout > 0);
                        }
                        return t;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, 'mySeatNum', {
                    get: function() {
                        var t = i.TableSeatStore.instance.getPlayer(
                            Core.LoginStore.instance.loginName
                        );
                        return null != t ? t.seat : 0;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, 'isMeInSeat', {
                    get: function() {
                        return a.isValidSeatNum(this.mySeatNum);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.getBetAmount = function(t, e) {
                    return this.stakePool.getAmount(t, e);
                }),
                (t.prototype.getConfirmAmount = function(t, e) {
                    return this.donePool.getAmount(t, e);
                }),
                (t.prototype.addChipByPlayType = function(t, e) {
                    return s.prototype.addChipByPlayType.call(
                        this,
                        t,
                        a.VideoPlazaStore.instance.selectedChipValue,
                        e
                    );
                }),
                (t.prototype.addChipValueByPlayType = function(t, e, i) {
                    return s.prototype.addChipByPlayType.call(this, t, e, i);
                }),
                (t.prototype.confirmBet = function() {
                    var e = this;
                    this.dispatchAction(a.h),
                        this.confirmEnabled &&
                            ((this.diffPool = this.stakePool.calculateDiff(
                                this.donePool
                            )),
                            this.diffPool.stakeDataMap.forEach(function(t) {
                                if (t.amount > 0) {
                                    if (
                                        (t.playType ===
                                            a.PLAYTYPE_BJ_PERFECT_PAIR ||
                                            t.playType ===
                                                a.PLAYTYPE_BJ_TWENTY_FIRST_PLUS_THREE) &&
                                        e.donePool.getAmount(
                                            a.PLAYTYPE_BJ_ANTE,
                                            e.mySeatNum
                                        ) <= 0
                                    )
                                        return void (
                                            e.diffPool.getAmount(
                                                a.PLAYTYPE_BJ_ANTE,
                                                e.mySeatNum
                                            ) <= 0 &&
                                            e.stakePool.setAmount(
                                                t.playType,
                                                0,
                                                e.mySeatNum
                                            )
                                        );
                                    0 ===
                                    e.checkLimit(
                                        t.playType,
                                        e.stakePool.getAmount(
                                            t.playType,
                                            t.betSeatNum
                                        )
                                    )
                                        ? e.sendBetToServer(t)
                                        : t.playType ===
                                              e.stakePool.getLastBetPlayType() &&
                                          a.UserStore.instance.balance -
                                              t.amount <
                                              1
                                            ? e.sendBetToServer(t)
                                            : (e.stakePool.setAmount(
                                                  t.playType,
                                                  e.getConfirmAmount(
                                                      t.playType,
                                                      t.betSeatNum
                                                  ),
                                                  t.betSeatNum
                                              ),
                                              e.dispatchAction(a.r));
                                }
                            }, this));
                }),
                (t.prototype.repeatBet = function() {
                    var e = this;
                    if (this.betEnabled) {
                        if (
                            this.lastPool.totalAmount >
                            a.UserStore.instance.balance
                        )
                            return void this.dispatchAction(a.i);
                        this.stakePool.clear(),
                            this.lastPool.stakeDataMap.forEach(function(t) {
                                e.stakePool.setAmount(
                                    t.playType,
                                    t.amount,
                                    e.mySeatNum
                                );
                            }, this),
                            this.dispatchAction(a.o);
                    }
                }),
                (t.prototype.getBetLimitByPlayType = function(t) {
                    return a.UserStore.instance.getBetLimitByPlayType(t);
                }),
                (t.prototype.sendBetToServer = function(t) {
                    s.prototype.sendBetToServer.call(this, t),
                        this.gameSocket.connected &&
                            a.BjGameSocket.instance.writeBytes(
                                a.getCMDGameBetExtBj(
                                    this.vid,
                                    this.gmcode,
                                    t,
                                    t.seq
                                )
                            );
                }),
                (t.prototype.addBetToPool = function(t, e, i, r, s, n, o) {
                    void 0 === o && (o = !0),
                        t === Core.LoginStore.instance.loginName &&
                            i == a.PLAYTYPE_BJ_SIDE &&
                            (e = 8),
                        this.tablePool.addBetToPool(e, i, r, n, o, s),
                        t === Core.LoginStore.instance.loginName &&
                            (this.donePool.setAmount(i, r, s),
                            r > this.stakePool.getAmount(i, s) &&
                                this.stakePool.setAmount(i, r, s));
                }),
                (t.prototype.getTablePoolAmount = function(t, e, i) {
                    var r = 0,
                        s = this.tablePool.getPlayerPool(t);
                    if (null != s) {
                        var n = s.getStakeData(e, i);
                        if (null != n) {
                            r = n.amount;
                            var o = (a.PLAYTYPE_UNKNOWN, null);
                            switch (n.playType) {
                                case a.PLAYTYPE_BJ_ANTE:
                                    o = s.getStakeData(a.PLAYTYPE_BJ_DOUBLE, i);
                                    break;
                                case a.PLAYTYPE_BJ_DOUBLE:
                                    o = s.getStakeData(a.PLAYTYPE_BJ_ANTE, i);
                                    break;
                                case a.PLAYTYPE_BJ_SIDE:
                                    o = s.getStakeData(
                                        a.PLAYTYPE_BJ_SIDE_DOUBLE,
                                        i
                                    );
                                    break;
                                case a.PLAYTYPE_BJ_SIDE_DOUBLE:
                                    o = s.getStakeData(a.PLAYTYPE_BJ_SIDE, i);
                            }
                            null != o && (r += o.amount);
                        }
                    }
                    return r;
                }),
                (t.prototype.onSocketData = function(t, e) {
                    if (
                        (s.prototype.onSocketData.call(this, t, e),
                        !this.isInvalidVid(t))
                    ) {
                        switch (t.respId) {
                            case a.BJ_VID_POOL_RESP:
                                this.onTablePool(t);
                                break;
                            case a.BJ_BET_RESP:
                                this.m(t);
                                break;
                            case a.St:
                                var i = t;
                                this.addBetToPool(
                                    i.name,
                                    i.seatNum,
                                    i.playType,
                                    i.value,
                                    i.betSeatNum,
                                    i.currency
                                ),
                                    this.dispatchAction(a.T);
                                break;
                            case a.BJ_PAYOUT_ME:
                                this.V(t);
                                break;
                            case a.BJ_PAYOUT_OTHER:
                            case a.wt:
                                this.p(t);
                                break;
                            case a.yt:
                                var r = t;
                                this._(r);
                                break;
                            case a.BJ_FINAL_PAYOFF:
                                this.onFinalPayoff(t);
                        }
                    }
                }),
                (t.prototype.reset = function() {
                    s.prototype.reset.call(this), this.tablePool.clear();
                }),
                (t.prototype.copyToDonePool = function() {
                    var e = this,
                        i = new a.StakePoolBj();
                    i.copy(this.donePool),
                        s.prototype.copyToDonePool.call(this),
                        this.diffPool.stakeDataMap.forEach(function(t) {
                            t.success &&
                                i.setAmount(
                                    t.playType,
                                    e.stakePool.getAmount(
                                        t.playType,
                                        t.betSeatNum
                                    ),
                                    t.betSeatNum
                                );
                        }),
                        this.donePool.clear(),
                        this.donePool.copy(i);
                }),
                (t.prototype.updateLastPool = function() {
                    var e = this;
                    s.prototype.updateLastPool.call(this),
                        this.lastPool.clear(),
                        this.donePool.stakeDataMap.forEach(function(t) {
                            [
                                a.PLAYTYPE_BJ_ANTE,
                                a.PLAYTYPE_BJ_PERFECT_PAIR,
                                a.PLAYTYPE_BJ_TWENTY_FIRST_PLUS_THREE
                            ].indexOf(t.playType) > -1 &&
                                e.lastPool.setAmount(
                                    t.playType,
                                    t.amount,
                                    e.mySeatNum
                                );
                        }, this);
                }),
                (t.prototype.betRespondDo = function() {
                    var t = this.diffPool.success;
                    (this.diffPool = this.stakePool.calculateDiff(
                        this.donePool
                    )),
                        this.diffPool.totalAmount > 0
                            ? t
                                ? this.confirmBet()
                                : this.cancelBet(!0)
                            : (this.dispatchAction(a.G, t),
                              this.checkSideBet());
                }),
                (t.prototype.checkSideBet = function() {
                    var t = i.getBJSetting();
                    if (null == t)
                        for (var e = 0; e < a.MAX_TABLE_SEAT; e++)
                            if (
                                this.getConfirmAmount(
                                    a.PLAYTYPE_BJ_SIDE,
                                    e + 1
                                ) > 0
                            ) {
                                this.dispatchAction(a.Et);
                                break;
                            }
                }),
                (t.prototype.payoutActionDo = function(t, e) {
                    if (
                        (this.dispatchAction(a.k, { seatNum: t, payouts: e }),
                        null != e)
                    )
                        for (var i = 0; i < e.length; i++) {
                            var r = e[i].playtype,
                                s = e[i].betSeatNum,
                                n = this.tablePool.getPlayerPool(t);
                            null != n && n.removeAmount(r, s),
                                t == this.mySeatNum &&
                                    this.stakePool.removeAmount(r, s);
                        }
                }),
                (t.prototype.payoutTimeoutDo = function(t) {
                    this.payoutOverTimeoutDo(),
                        this.payoutActionDo(this.mySeatNum, t.ptPayouts);
                }),
                (t.prototype.payoutOtherTimeoutDo = function(t) {
                    var e = i.TableSeatStore.instance.getPlayer(t.loginname);
                    null != e && this.payoutActionDo(e.seat, t.ptPayouts);
                }),
                (t.prototype.onFinalPayoff = function(t) {
                    var e = t;
                    Core.NonstopTimer.instance.setTimeout(
                        function() {
                            this.dispatchAction(a.g, e.winAmount);
                        },
                        this,
                        a.StreamConfig.instance.getAverageDelay()
                    );
                }),
                (t.prototype.getCurrencyBySeatNum = function(t) {
                    return this.tablePool.getCurrency(t);
                }),
                (t.prototype.onTablePool = function(t) {
                    var e = t;
                    if (null != e.betPoolInfos) {
                        for (
                            var i = e.betPoolInfos.length, r = void 0, s = 0;
                            i > s;
                            s++
                        )
                            (r = e.betPoolInfos[s]),
                                this.addBetToPool(
                                    r.loginname,
                                    r.seatNum,
                                    r.playType,
                                    r.amount,
                                    e.betSeatNum,
                                    r.currency,
                                    !1
                                );
                        this.dispatchAction(a.T);
                    }
                    this.diffPool.clear();
                }),
                t
            );
        })(a.BetStoreBase);
        (i.BetTableStoreBase = t),
            __reflect(t.prototype, 'VideoGameCore.Bj.BetTableStoreBase');
    })((t = a.Bj || (a.Bj = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(m) {
    var t;
    !(function(l) {
        var t = (function(e) {
            function t() {
                var t = e.call(this) || this;
                return (
                    (t.socketList = [m.BjGameSocket.instance]),
                    t.resetAll(),
                    (t.Tt = [
                        m.BJ_HAND_STATUS.DOUBLE,
                        m.BJ_HAND_STATUS.STAND,
                        m.BJ_HAND_STATUS.HIT
                    ]),
                    t
                );
            }
            return (
                __extends(t, e),
                Object.defineProperty(t.prototype, 'roomTimerStore', {
                    get: function() {
                        return l.RoomTimerStore.instance;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, 'betTableStore', {
                    get: function() {
                        return l.BetTableStore.instance;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.onSocketData = function(t, e) {
                    if (!t.vid || this.vid === t.vid) {
                        var i;
                        switch (t.respId) {
                            case m.xt:
                                var r = t;
                                11 == r.status && this.resetByAction(),
                                    this.setCurHandIndex(r.curHandIndex);
                                break;
                            case m.BJ_SNAPSHOT:
                                var s = t;
                                (this.gmcode = s.gmcode),
                                    (this.allHandData = new Core.HashMap()),
                                    s.dealerCardlist.length > 0 &&
                                        ((i = new m.BjHandData()),
                                        i.setCardList(s.dealerCardlist),
                                        this.setHandData(
                                            m.BJ_HAND_INDEX_DEALER,
                                            i
                                        ));
                                for (
                                    var n = s.playerHandData.values, o = 0;
                                    o < n.length;
                                    o++
                                )
                                    this.setHandData(n[o].handIndex, n[o]);
                                this.setCurHandIndex(s.curHandIndex),
                                    this.dispatchAction(m.vt);
                                break;
                            case m.BJ_START_GAME:
                                var a = t;
                                this.resetByAction(), (this.gmcode = a.gmcode);
                                break;
                            case m.BJ_RECEIVE_CARD:
                                var h = t;
                                this.gmcode == h.gmcode &&
                                    ((i = this.getHandData(h.handIndex)),
                                    i.appandCard(h.card),
                                    this.setHandData(h.handIndex, i)),
                                    this.dispatchAction(m.vt);
                                break;
                            case m.BJ_INSURE_RES:
                                var u = t;
                                0 == u.retCode
                                    ? this.popupCommandNotice()
                                    : u.seatNum <= 0
                                        ? this.popupCommandNotice(26)
                                        : this.dispatchAction(m.Ot, {
                                              tag: 'insure_failed'
                                          });
                                break;
                            case m.BJ_CMD_RESP:
                                var c = t;
                                0 == c.errCode &&
                                    this.doCommandSuccess(
                                        c.handIndex,
                                        c.cmdType
                                    ),
                                    this.popupCommandNotice(c.errCode);
                                break;
                            case m.BJ_CMD_OTHER:
                                var f = t;
                                this.doCommandSuccess(f.handIndex, f.cmdType);
                                break;
                            case m.yt:
                                var C = t;
                                (this.resultTimer = Core.NonstopTimer.instance.setTimeout(
                                    function() {
                                        (i = new m.BjHandData()),
                                            i.setCardList(C.info.cardlist),
                                            this.setHandData(
                                                m.BJ_HAND_INDEX_DEALER,
                                                i
                                            ),
                                            this.dispatchAction(m.vt);
                                    },
                                    this,
                                    5e3
                                )),
                                    (this.resetTimer = Core.NonstopTimer.instance.setTimeout(
                                        function() {
                                            this.resetAll(),
                                                this.dispatchAction(m.vt);
                                        },
                                        this,
                                        2e4
                                    ));
                        }
                    }
                }),
                (t.prototype.getHandData = function(t) {
                    var e;
                    return (
                        null != this.allHandData && this.allHandData.has(t)
                            ? (e = this.allHandData.get(t))
                            : ((e = new m.BjHandData()), (e.handIndex = t)),
                        e
                    );
                }),
                (t.prototype.setHandData = function(t, e) {
                    null != this.allHandData && this.allHandData.set(t, e);
                }),
                (t.prototype.checkSpiltedCards = function(t) {
                    var e = this.getHandStatus(
                        m.getBJHandIndexBySeatNum(t) + 1
                    );
                    return (
                        this.betTableStore.tablePool.getAmount(
                            t,
                            m.PLAYTYPE_BJ_ANTE_SPLIT,
                            t
                        ) > 0 ||
                        m.isBJHandStatusHasCmd(e, m.BJ_HAND_STATUS.SPLIT)
                    );
                }),
                (t.prototype.popupCommandNotice = function(t) {
                    void 0 === t && (t = 0);
                    var e;
                    (e =
                        0 == t
                            ? { tag: 'command_success' }
                            : { tag: 'command_failed', param: t }),
                        this.dispatchAction(m.Ot, e);
                }),
                (t.prototype.doCommandSuccess = function(t, e) {
                    var i = [m.It],
                        r = this.getHandData(t),
                        s = r.handStatus;
                    switch (e) {
                        case m.BJ_HAND_STATUS.SPLIT:
                            var n = r.getCardList();
                            null != n &&
                                n.length >= 2 &&
                                ((s |= m.BJ_HAND_STATUS.SPLIT),
                                r.setCardList([n[0]]),
                                (r.handStatus = s),
                                this.setHandData(r.handIndex, r),
                                (r = new m.BjHandData()),
                                (r.handIndex = t + 1),
                                r.setCardList([n[1]]),
                                (r.handStatus = s),
                                this.setHandData(r.handIndex, r),
                                i.push(m.vt));
                            break;
                        default:
                            (r.handStatus = s | e),
                                this.setHandData(r.handIndex, r);
                    }
                    for (var o = 0; o < i.length; o++)
                        this.dispatchAction(i[o], t);
                }),
                (t.prototype.setCurHandIndex = function(t) {
                    if (
                        ((this.curHandIndex = t),
                        this.dispatchAction(m.Rt),
                        40 === this.roomTimerStore.gameStatus)
                    ) {
                        var e = m.getBJSeatNumByHandIndex(this.curHandIndex);
                        if (m.isBJPlayerHandIndex(this.curHandIndex)) {
                            for (
                                var i = '',
                                    r = l.TableSeatStore.instance.getTablePlayers(),
                                    s = 0;
                                s < r.length;
                                s++
                            )
                                if (r[s].seat === e) {
                                    i = Core.getAnonymousName(
                                        r[s].loginname,
                                        r[s].nickname
                                    );
                                    break;
                                }
                            i.length > 0 &&
                                this.dispatchAction(m.Ot, {
                                    tag: 'wait_player',
                                    param: i
                                });
                        }
                        var n = this.betTableStore.mySeatNum;
                        if (this.betTableStore.isMeInSeat) {
                            var o = m.BJ_HAND_INDEX_DEALER;
                            if (
                                m.getBJSeatNumByHandIndex(this.curHandIndex) ==
                                n
                            )
                                o = this.curHandIndex;
                            else {
                                var a = m.getBJHandIndexBySeatNum(n);
                                if (this.curHandIndex <= a) {
                                    var h = this.getHandStatus(a);
                                    h == m.BJ_HAND_STATUS.NONE && (o = a);
                                }
                            }
                            if (m.isBJPlayerHandIndex(o)) {
                                var u = [],
                                    c = [],
                                    f = this.getCardList(o),
                                    C = m.getBjCardsReuslt(f);
                                null != f &&
                                    C != m.BJ_RESULT_TYPE.BLACKJACK &&
                                    C != m.BJ_RESULT_TYPE.BEST_HAND &&
                                    ((u = this.Tt.slice()),
                                    f.length == m.BJ_BASE_HAND_CARD_NUM
                                        ? this.checkSpiltedCards(n)
                                            ? m.removeValueFromArray(
                                                  u,
                                                  m.BJ_HAND_STATUS.DOUBLE
                                              )
                                            : m.getBjCardPointValue(f[0]) ==
                                                  m.getBjCardPointValue(f[1]) &&
                                              (u = u.concat(
                                                  m.BJ_HAND_STATUS.SPLIT
                                              ))
                                        : f.length > m.BJ_BASE_HAND_CARD_NUM &&
                                          m.removeValueFromArray(
                                              u,
                                              m.BJ_HAND_STATUS.DOUBLE
                                          ),
                                    m.UserStore.instance.balance <
                                        this.betTableStore.getConfirmAmount(
                                            m.PLAYTYPE_BJ_ANTE,
                                            this.betTableStore.mySeatNum
                                        ) &&
                                        c.push(
                                            m.BJ_HAND_STATUS.SPLIT,
                                            m.BJ_HAND_STATUS.DOUBLE
                                        )),
                                    this.dispatchAction(m.Lt, {
                                        btnAry: u,
                                        cards: f,
                                        disableAry: c
                                    });
                            } else this.dispatchAction(m.Lt);
                        }
                    } else
                        [60, 70, 80].indexOf(this.roomTimerStore.gameStatus) >=
                            0 && this.dispatchAction(m.Lt);
                }),
                (t.prototype.resetByAction = function() {
                    Core.NonstopTimer.instance.clearTimeout(this.resultTimer),
                        (this.resultTimer = 0),
                        Core.NonstopTimer.instance.clearTimeout(
                            this.resetTimer
                        ),
                        (this.resetTimer = 0),
                        this.resetAll(),
                        this.dispatchAction();
                }),
                (t.prototype.resetAll = function() {
                    (this.gmcode = ''), (this.allHandData = new Core.HashMap());
                }),
                (t.prototype.getHandStatus = function(t) {
                    var e = this.getHandData(t);
                    return null != e ? e.handStatus : m.BJ_HAND_STATUS.NONE;
                }),
                (t.prototype.getCardList = function(t) {
                    var e = this.getHandData(t);
                    return null != e ? e.getCardList() : [];
                }),
                (t.prototype.sendCmdToServer = function(t, e) {
                    return m.BjGameSocket.instance.connected
                        ? (m.BjGameSocket.instance.writeBytes(
                              m.getCMDBjCommand(this.vid, this.gmcode, t, e)
                          ),
                          !0)
                        : !1;
                }),
                (t.prototype.sendInsureToServer = function(t) {
                    return m.BjGameSocket.instance.connected
                        ? (m.BjGameSocket.instance.writeBytes(
                              m.getCMDBJInsureReq(this.vid, this.gmcode, t)
                          ),
                          !0)
                        : !1;
                }),
                (t.prototype.release = function() {
                    e.prototype.release.call(this);
                }),
                t
            );
        })(Core.NetworkStoreBase);
        (l.PokerStoreBase = t),
            __reflect(t.prototype, 'VideoGameCore.Bj.PokerStoreBase');
    })((t = m.Bj || (m.Bj = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(l) {
    var t = (function(C) {
        function t(t) {
            void 0 === t && (t = null);
            var e = C.call(this, t) || this;
            return (e.socketList = [l.LinkGameSocket.instance]), e;
        }
        return (
            __extends(t, C),
            Object.defineProperty(t.prototype, 'roomTimerStore', {
                get: function() {
                    return l.LinkStoreFactory.instance.roomTimerStoreMap.get(
                        this.vid
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(t.prototype, 'roadMapStore', {
                get: function() {
                    return l.LinkStoreFactory.instance.roadMapStoreMap.get(
                        this.vid
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.onSocketData = function(t, e) {
                if (
                    (C.prototype.onSocketData.call(this, t, e),
                    !t.vid || this.vid === t.vid)
                ) {
                    switch (t.respId) {
                        case l.jt:
                        case l.Bt:
                        case l.At:
                            var i = t;
                            this.m(i);
                            break;
                        case l.Nt:
                            var r = t;
                            this._(r);
                            break;
                        case l.Mt:
                            var s = t;
                            this._(s);
                            break;
                        case l.X:
                            var n = t;
                            this._(n);
                            break;
                        case l.Ht:
                            var o = t;
                            this._(o);
                            break;
                        case l.Ut:
                        case l.Ft:
                            var a = t;
                            this.V(a);
                            break;
                        case l.mt:
                            var h = t;
                            this.reset();
                            var u = Core.StorageManager.instance.getItem(
                                this.vid
                            );
                            if (u) {
                                var c = JSON.parse(u),
                                    f = JSON.parse(u);
                                c.code ==
                                    Core.LoginStore.instance.loginName +
                                        h.gmcode &&
                                    (this.stakePool.setupByData(c.data),
                                    this.donePool.setupByData(f.data));
                            }
                            this.updateBetHistory(), this.dispatchAction(l.Kt);
                    }
                }
            }),
            Object.defineProperty(t.prototype, 'noComm', {
                get: function() {
                    return l.GameLinkStore.instance.noComm;
                },
                set: function(t) {
                    this.dispatchAction(l.J);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.betRespondDo = function() {
                this.updateBetHistory(),
                    this.storeBet(),
                    C.prototype.betRespondDo.call(this);
            }),
            (t.prototype.updateBetHistory = function() {
                var r = this,
                    s = this.roomTimerStore.gmcode,
                    n = [];
                this.donePool.stakeDataMap.forEach(function(t) {
                    var e = t.playType;
                    e === l.PLAYTYPE_BANKER &&
                        r.noComm &&
                        (e = l.PLAYTYPE_BANKER_NO_COMMISSION);
                    var i = {
                        vid: r.vid,
                        gmcode: s,
                        playType: e,
                        betAmount: t.amount
                    };
                    n.push(i);
                }),
                    l.MultiBetHistoryStore.instance.updateBetRecord(
                        n.reverse()
                    );
            }),
            (t.prototype.payoutTimeoutDo = function(i) {
                var r = this;
                C.prototype.payoutTimeoutDo.call(this, i);
                var t = i.ptPayouts.map(function(t) {
                    var e = {
                        vid: r.vid,
                        gmcode: i.gmcode,
                        playType: t.playtype,
                        betPayout: t.value
                    };
                    return e;
                });
                l.MultiBetHistoryStore.instance.updateBetRecord(t);
            }),
            (t.prototype.sendBetToServer = function(t) {
                if (
                    (C.prototype.sendBetToServer.call(this, t),
                    this.gameSocket.connected)
                ) {
                    var e = t.playType;
                    e === l.PLAYTYPE_BANKER &&
                        this.noComm &&
                        (e = l.PLAYTYPE_BANKER_NO_COMMISSION),
                        l.LinkGameSocket.instance.writeBytes(
                            l.getCMDRoadBetExt(
                                this.vid,
                                this.gmcode,
                                e,
                                t.amount,
                                t.seq
                            )
                        );
                }
            }),
            (t.prototype.getAmountByType = function(t) {
                return this.stakePool.getAmount(t);
            }),
            (t.prototype.getDoneByType = function(t) {
                return this.donePool.getAmount(t);
            }),
            (t.prototype.getBetLimitByPlayType = function(t) {
                return l.UserStore.instance.getBetLimitByPlayType(t);
            }),
            (t.prototype.getDisablePlayTypes = function() {
                var t = [],
                    e = l.LinkStoreFactory.instance.roadMapStoreMap.get(
                        this.vid
                    );
                return (
                    e.roadData &&
                        e.roadData.totalCount >= l.MAX_BET_GAME_BAC_BIG_SMALL &&
                        t.push(l.PLAYTYPE_BIG, l.PLAYTYPE_SMALL),
                    t
                );
            }),
            (t.prototype.storeBet = function() {
                this.stakePool.totalAmount > 0 &&
                    Core.StorageManager.instance.setItem(
                        this.vid,
                        this.stakePool.toJsonWithCode(
                            Core.LoginStore.instance.loginName + this.gmcode
                        )
                    );
            }),
            (t.prototype.getChipValue = function() {
                return l.VideoPlazaStore.instance.linkSelectedChipValue;
            }),
            (t.prototype.checkRouLimit = function(t, e) {
                var i = this.getBetLimitByPlayType(t);
                return e < i.min ? 2 : e > i.max ? 1 : 0;
            }),
            (t.prototype.release = function() {
                C.prototype.release.call(this);
            }),
            (t.prototype.clearData = function() {
                this.donePool.stakeDataMap = new Core.ArrayMap();
            }),
            t
        );
    })(l.BetStoreBaseBac);
    (l.MultiBetTableStore = t),
        __reflect(t.prototype, 'VideoGameCore.MultiBetTableStore');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(a) {
    var t;
    !(function(t) {
        var e = (function(e) {
            function t() {
                var t = e.call(this) || this;
                return (
                    (t.pendingSelectAnchorTable = !1),
                    (t.selectingVids = []),
                    (t.pendingSelectAnchorTable = !1),
                    (t.vids = []),
                    t
                );
            }
            return (
                __extends(t, e),
                (t.prototype.onSocketData = function(t, e) {
                    var i = this;
                    switch (t.respId) {
                        case a.Zt:
                            this.onFollowerConn(t);
                            break;
                        case a.Yt:
                            var r = t;
                            if (0 == this.vids.length) {
                                var s = this.getAvailableRoomInfoList(),
                                    n =
                                        0 === r.vids.length
                                            ? [s[0].vid]
                                            : r.vids;
                                this.selectVideo(n);
                            } else
                                r.vids.length && this.pendingSelectAnchorTable
                                    ? (this.selectVideo(r.vids),
                                      (this.pendingSelectAnchorTable = !1))
                                    : this.selectVideo(this.vids);
                            break;
                        case a.qt:
                            this.Jt(t);
                            break;
                        case a.Wt:
                            this.onUnfollowAnchor();
                            break;
                        case a.Qt:
                            this.onAnchorSelectVideo(t);
                            break;
                        case a.Xt:
                            var o = t;
                            this.dispatchAction(a.$t, { anchorID: o.anchorID });
                            break;
                        case a.te:
                            dclib(
                                'Anchor: ANCHORLIST_STATUS_R => ' +
                                    this.anchorID
                            );
                            break;
                        case a.ee:
                        case a.ie:
                            this.pendingSelectAnchorTable &&
                                Core.NonstopTimer.instance.setTimeout(
                                    function() {
                                        i.selectAnchorVideo();
                                    },
                                    this,
                                    a.StreamConfig.instance.getAverageDelay() +
                                        2e3
                                );
                    }
                }),
                (t.prototype.connectGameSocket = function() {
                    a.LiveGameSocket.instance.autoConnect();
                }),
                (t.prototype.selectVideo = function(t) {
                    (this.selectingVids = t.slice()),
                        a.LiveGameSocket.instance.writeBytes(
                            a.getCMDSelectVideo(t)
                        );
                }),
                (t.prototype.Jt = function(t) {
                    var e = this;
                    if (t.vids.length <= 0) this.leaveTable();
                    else {
                        this.prepareChangeGame(),
                            this.vids.forEach(function(t) {
                                e.selectingVids.indexOf(t) < 0 &&
                                    e.getStoreFactory().releaseStore(t);
                            }),
                            (this.vids = this.selectingVids.slice()),
                            (this.selectingVids = []);
                        for (var i = 0; i < this.vids.length; i++)
                            this.getStoreFactory().setupStoresByVid(
                                this.vids[i]
                            );
                        1 === this.vids.length &&
                            (this.gametype = Core.Config.HostConfig.instance.getHostByVid(
                                this.vids[0]
                            ).gameType),
                            this.dispatchAction(a.re, {
                                vids: this.vids,
                                gametype: this.gametype
                            }),
                            t.vids.indexOf(this.vids[0]) <= -1 &&
                                this.dispatchAction(a.se, { vids: t.vids });
                    }
                }),
                (t.prototype.requestFollowAnchor = function(t) {
                    t &&
                        ((this.anchorID = t),
                        dclib(
                            'Anchor: requestFollowAnchor => ' + this.anchorID
                        )),
                        a.LiveGameSocket.instance.writeBytes(
                            a.getCMDClientFollow(this.anchorID)
                        );
                }),
                (t.prototype.requestUnFollowAnchor = function() {
                    this.anchorID &&
                        a.LiveGameSocket.instance.writeBytes(
                            a.getCMDClientUnFollow(this.anchorID)
                        );
                }),
                (t.prototype.sendActionHasBet = function() {
                    this.dispatchAction(a.ne);
                }),
                (t.prototype.leaveTable = function(t, e) {
                    return (
                        void 0 === t && (t = !1),
                        t || this.canLeaveTable()
                            ? (a.LiveGameSocket.instance.writeBytes(
                                  a.getCMDLeaveVideo()
                              ),
                              this.requestUnFollowAnchor(),
                              this.onUnfollowAnchor(),
                              this.prepareChangeGame(),
                              this.getStoreFactory().releaseStoreAll(),
                              (this.vids = []),
                              (this.selectingVids = []),
                              (this.pendingSelectAnchorTable = !1),
                              void Core.pageNavigator.popPage(e))
                            : void this.dispatchAction(a.ne)
                    );
                }),
                (t.prototype.isBetted = function() {
                    var t = !1;
                    if (this.vids.length) {
                        var e = this.getStoreFactory().betStoreMap.get(
                            this.vids[0]
                        );
                        e && (t = !e.canLeaveTable);
                    }
                    return t;
                }),
                (t.prototype.getAvailableRoomInfoList = function() {
                    for (
                        var t = a.RoomConfig.instance.getAllRoomInfoByFilter({
                                gameType: this.getSupportedLiveGameType()
                            }),
                            e = [],
                            i = 0;
                        i < t.length;
                        i++
                    ) {
                        var r = t[i];
                        a.VideoPlazaStore.instance.getMaintainingStatus(
                            r.platformtype,
                            r.vid
                        ) || e.push(r);
                    }
                    return e;
                }),
                (t.prototype.combinations = function(t, e) {
                    var o = [];
                    return (
                        (function t(e, i, r) {
                            if (0 == r) return o.push(e);
                            for (var s = 0, n = i.length; n - r >= s; s++)
                                t(e.concat(i[s]), i.slice(s + 1), r - 1);
                        })([], t, e),
                        o
                    );
                }),
                (t.prototype.release = function() {
                    e.prototype.release.call(this);
                }),
                (t.prototype.onSocketDie = function(t) {
                    t === a.LiveGameSocket.instance &&
                        Core.globalStore.dispatchGlobal(a.oe);
                }),
                (t.prototype.prepareChangeGame = function() {
                    this.vids && this.vids.length && this.dispatchAction(a.ae);
                }),
                (t.prototype.onUnfollowAnchor = function() {
                    dclib('Anchor: onUnfollowAnchor => Empty'),
                        (this.anchorID = ''),
                        this.dispatchAction(a.he);
                }),
                (t.prototype.selectAnchorVideo = function() {
                    if (this.canSelectAnchorVideo()) {
                        var t = a.VideoPlazaStore.instance.anchorDataMap.get(
                            this.anchorID
                        );
                        if (t) {
                            var e = t.status.vidList;
                            e.length &&
                                (this.compareVids(this.vids, e) ||
                                    this.selectVideo(e));
                        }
                        this.pendingSelectAnchorTable = !1;
                    } else
                        this.dispatchAction(a.ne),
                            (this.pendingSelectAnchorTable = !0);
                }),
                (t.prototype.compareVids = function(t, e) {
                    var i = t.length === e.length;
                    if (i)
                        for (var r = 0; r < t.length; r++)
                            if (e.indexOf(t[r]) < 0) {
                                i = !1;
                                break;
                            }
                    return i;
                }),
                (t.prototype.canSelectAnchorVideo = function() {
                    return this.canLeaveTable();
                }),
                t
            );
        })(Core.NetworkStoreBase);
        (t.LiveStoreBase = e),
            __reflect(e.prototype, 'VideoGameCore.Live.LiveStoreBase');
    })((t = a.Live || (a.Live = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(f) {
    var t;
    !(function(r) {
        var a = 36,
            t = (function(c) {
                function t() {
                    var t = c.call(this) || this;
                    return (
                        (t.resultStat = null),
                        (t.videoPool = new f.VideoPool()),
                        t
                    );
                }
                return (
                    __extends(t, c),
                    Object.defineProperty(t.prototype, 'roomTimerStore', {
                        get: function() {
                            return r.RoomTimerStore.instance;
                        },
                        enumerable: !0,
                        configurable: !0
                    }),
                    Object.defineProperty(t.prototype, 'mySeatNum', {
                        get: function() {
                            var t = f.TableSeatStore.instance.getPlayer(
                                Core.LoginStore.instance.loginName
                            );
                            return null != t ? t.seat : 0;
                        },
                        enumerable: !0,
                        configurable: !0
                    }),
                    (t.prototype.getSocketList = function() {
                        return [r.RouGameSocket.instance];
                    }),
                    (t.prototype.getBetLimitByPlayType = function(t) {
                        return f.UserStore.instance.getBetLimitByPlayType(
                            t,
                            r.RouStore.instance.tableCode
                        );
                    }),
                    (t.prototype.cancelBetByPlayType = function(t, e) {
                        this.stakePool.setAmount(
                            t,
                            this.donePool.getAmount(t, e),
                            e
                        );
                    }),
                    (t.prototype.sendBetBundleToServer = function(t) {
                        var e = this;
                        if (!this.gameSocket.connected)
                            return (
                                t.forEach(function(t) {
                                    e.cancelBetByPlayType(t.playType);
                                }),
                                this.dispatchAction(f.C),
                                void this.dispatchAction(Core.l)
                            );
                        var i = Core.getSequence();
                        r.RouGameSocket.instance.writeBytes(
                            f.getCMDGameBetExtRou(this.gmcode, t, i)
                        );
                    }),
                    (t.prototype.onSocketData = function(t, e) {
                        if (
                            (c.prototype.onSocketData.call(this, t, e),
                            !this.isInvalidVid(t))
                        ) {
                            var i;
                            switch (t.respId) {
                                case f.ue:
                                    this.m(t);
                                    break;
                                case f.W:
                                    this.V(t);
                                    break;
                                case f.ce:
                                case f.fe:
                                    this.onTablePool(t);
                                    break;
                                case f.pt:
                                    var r,
                                        s = t;
                                    for (i = 0; i < s.betNum; i++)
                                        (r = s.stakeInfos[i]),
                                            this.videoPool.addBetToPool(
                                                s.name,
                                                s.nick,
                                                r.playType,
                                                r.amount,
                                                s.currency,
                                                r.nums
                                            );
                                    break;
                                case f.kt:
                                    var r,
                                        n = t;
                                    for (i = 0; i < n.betNum; i++)
                                        (r = n.stakeInfos[i]),
                                            this.videoPool.addBetToPool(
                                                n.name,
                                                n.nick,
                                                r.playType,
                                                r.amount,
                                                n.currency,
                                                r.nums
                                            );
                                    this.dispatchAction(f.T);
                                    break;
                                case f.Ht:
                                    var o = t;
                                    this._(o);
                                    break;
                                case f.ROU_GAME_RESULT_STAT:
                                    var a = t;
                                    this.resultStat = [];
                                    for (var h = 0; h < a.stat.length; h++) {
                                        var u =
                                            0 == a.totalRound
                                                ? 0
                                                : Math.round(
                                                      (a.stat[h] /
                                                          a.totalRound) *
                                                          1e3
                                                  ) / 10;
                                        this.resultStat.push({
                                            value: h,
                                            frequency: u
                                        });
                                    }
                                    this.dispatchAction(f.Ce);
                            }
                        }
                    }),
                    (t.prototype.onTablePool = function(t) {
                        var e = t;
                        if (null != e.betPoolInfos)
                            for (
                                var i, r = e.betPoolInfos.length, s = 0;
                                r > s;
                                s++
                            ) {
                                i = e.betPoolInfos[s];
                                var n = i.playType;
                                if (
                                    (this.videoPool.addBetToPool(
                                        i.loginname,
                                        i.nickname,
                                        n,
                                        i.amount,
                                        i.currency,
                                        i.nums,
                                        !1
                                    ),
                                    i.loginname ===
                                        Core.LoginStore.instance.loginName)
                                ) {
                                    var o = i.nums.filter(function(t, e, i) {
                                        return a >= t;
                                    });
                                    this.donePool.setAmount(n, i.amount, o),
                                        this.lastPool.setAmount(n, i.amount, o),
                                        i.amount >
                                            this.stakePool.getAmount(n, o) &&
                                            this.stakePool.setAmount(
                                                n,
                                                i.amount,
                                                o
                                            );
                                }
                            }
                        this.diffPool.clear(), this.dispatchAction(f.T);
                    }),
                    (t.prototype.gameResultTimeoutDo = function(t) {
                        c.prototype.gameResultTimeoutDo.call(this, t);
                    }),
                    t
                );
            })(r.BetTableStoreBase);
        (r.BetTableStoreCommon = t),
            __reflect(t.prototype, 'VideoGameCore.Rou.BetTableStoreCommon');
    })((t = f.Rou || (f.Rou = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t;
    !(function(i) {
        var t = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                Object.defineProperty(e, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (e.init = function() {
                    return this.initInstance(this);
                }),
                Object.defineProperty(e.prototype, 'urlList', {
                    get: function() {
                        return Core.Config.HostConfig.instance.getHostByVid(
                            this.vid
                        ).urlList;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(e.prototype, 'respMap', {
                    get: function() {
                        return (
                            this._respMap ||
                                ((this._respMap = new Core.HashMap()),
                                this._respMap.set(r.we, r.ze),
                                this._respMap.set(r.Se, r.ye),
                                this._respMap.set(r.Ee, r.Te),
                                this._respMap.set(r.ce, r.xe),
                                this._respMap.set(r.mt, i.dt),
                                this._respMap.set(r.ue, r.Oe),
                                this._respMap.set(r.pt, r.Ie),
                                this._respMap.set(r.kt, r.Re),
                                this._respMap.set(r.ft, r.Le),
                                this._respMap.set(r.W, r.je),
                                this._respMap.set(r.wt, r.Be),
                                this._respMap.set(r.Ae, r.Ne),
                                this._respMap.set(r.Gt, r.Me),
                                this._respMap.set(r.Nt, r.De),
                                this._respMap.set(r.lt, r.He),
                                this._respMap.set(r.Ue, r.Fe),
                                this._respMap.set(r.Ke, r.Ze),
                                this._respMap.set(r.Ye, r.qe),
                                this._respMap.set(r.Ct, r.Je),
                                this._respMap.set(r.gt, r.We),
                                this._respMap.set(r.GAME_LAST_POSITION, r.We),
                                this._respMap.set(r.GAME_USERLIST, r.We),
                                this._respMap.set(
                                    r.GAME_USERLIST_WITH_VID,
                                    r.We
                                ),
                                this._respMap.set(r.Qe, r.Xe),
                                this._respMap.set(r.SBAC_BET_HINTS, i.$e),
                                this._respMap.set(r.SBAC_BET_HINTS_EXT, i.ti)),
                            this._respMap
                        );
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(e.prototype, 'tag', {
                    get: function() {
                        return '[GameSocket ' + this.vid + ']';
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                e
            );
        })(Core.Network.WebSocketBase);
        (i.SBacGameSocket = t),
            __reflect(t.prototype, 'VideoGameCore.Sbac.SBacGameSocket');
    })((t = r.Sbac || (r.Sbac = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.getStoreList = function() {
                return [r.VideoPlazaStore.instance, r.SettingStore.instance];
            }),
            (e.prototype.onStoreChange = function(t, e, i) {
                switch (e) {
                    case r.ni:
                        this.killGameSocket();
                }
            }),
            e
        );
    })(Core.PCPageBase);
    (r.PCGamePageBase = t),
        __reflect(t.prototype, 'VideoGameCore.PCGamePageBase');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(e) {
    var t = (function() {
        function t() {
            (this.amount = 0),
                (this.seq = -1),
                (this.pending = !1),
                (this.success = !1),
                (this.playType = e.PLAYTYPE_UNKNOWN);
        }
        return (
            (t.prototype.copy = function(t) {
                (this.playType = t.playType),
                    (this.amount = t.amount),
                    (this.seq = t.seq),
                    (this.pending = t.pending);
            }),
            t
        );
    })();
    (e.StakeData = t), __reflect(t.prototype, 'VideoGameCore.StakeData');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t = (function() {
        function i() {
            (this.stakeDataMap = new Core.ArrayMap()), (this.currency = '');
        }
        return (
            (i.prototype.setAmount = function(t, e) {
                var i = this.stakeDataMap.get(t);
                return (
                    i ||
                        ((i = new r.StakeData()),
                        (i.playType = t),
                        this.stakeDataMap.set(t, i)),
                    (i.amount = e),
                    i
                );
            }),
            (i.prototype.getAmount = function(t) {
                var e = this.stakeDataMap.get(t);
                return e ? e.amount : 0;
            }),
            Object.defineProperty(i.prototype, 'totalAmount', {
                get: function() {
                    var e = 0;
                    return (
                        this.stakeDataMap.forEach(function(t) {
                            e += t.amount;
                        }, this),
                        e
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            (i.prototype.getAllStakeData = function() {
                return this.stakeDataMap.values;
            }),
            (i.prototype.getStakeDataBySeq = function(t) {
                var e = this.stakeDataMap.getItemByProperty('seq', t);
                return e.length > 0 ? e[0] : null;
            }),
            Object.defineProperty(i.prototype, 'pending', {
                get: function() {
                    var e = !1;
                    return (
                        this.stakeDataMap.forEach(function(t) {
                            t.pending && (e = !0);
                        }, this),
                        e
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(i.prototype, 'success', {
                get: function() {
                    var e = !1;
                    return (
                        this.stakeDataMap.forEach(function(t) {
                            t.success && (e = !0);
                        }, this),
                        e
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            (i.prototype.copy = function(t) {
                var e = this;
                return (
                    this.clear(),
                    t.stakeDataMap.forEach(function(t) {
                        e.setAmount(t.playType, t.amount);
                    }, this),
                    this
                );
            }),
            (i.prototype.calculateDiff = function(t) {
                var e = new i().copy(this);
                return (
                    t.stakeDataMap.forEach(function(t) {
                        e.setAmount(
                            t.playType,
                            e.getAmount(t.playType) - t.amount
                        );
                    }, this),
                    e
                );
            }),
            (i.prototype.clear = function() {
                this.stakeDataMap = new Core.ArrayMap();
            }),
            (i.prototype.getLastBetPlayType = function() {
                var t = this.stakeDataMap.lastValue;
                return t ? t.playType : r.PLAYTYPE_UNKNOWN;
            }),
            (i.prototype.toJsonWithCode = function(t) {
                return JSON.stringify({
                    code: t,
                    data: this.stakeDataMap.toJSON()
                });
            }),
            (i.prototype.setupByData = function(t) {
                this.stakeDataMap.setupByData(t.slice());
            }),
            (i.prototype.setLoginName = function(t) {
                this.loginname = t;
            }),
            (i.prototype.setNickname = function(t) {
                this.nickname = t;
            }),
            i
        );
    })();
    (r.StakePool = t), __reflect(t.prototype, 'VideoGameCore.StakePool');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(o) {
    var t = (function() {
        function t(t) {
            void 0 === t && (t = 7),
                (this.maxSeatNum = t),
                (this.playerPoolMap = new Core.HashMap());
            for (var e, i = 0; t > i; i++)
                (e = new o.StakePool()), this.playerPoolMap.set(i + 1, e);
        }
        return (
            (t.prototype.isTableSeatNum = function(t) {
                return t >= 1 && t <= this.maxSeatNum;
            }),
            (t.prototype.addBetToPool = function(t, e, i, r, s) {
                void 0 === s && (s = !0),
                    e === o.PLAYTYPE_BANKER_NO_COMMISSION &&
                        (e = o.PLAYTYPE_BANKER);
                var n = this.getPlayerPool(t);
                null !== n
                    ? ((n.currency = r),
                      s && (i += n.getAmount(e)),
                      n.setAmount(e, i))
                    : console.error('Seat ' + t + ' does not exist');
            }),
            (t.prototype.getPlayerPool = function(t) {
                return this.isTableSeatNum(t)
                    ? this.playerPoolMap.get(t)
                    : null;
            }),
            (t.prototype.getAmount = function(t, e) {
                var i = this.getPlayerPool(t);
                return null !== i ? i.getAmount(e) : 0;
            }),
            (t.prototype.getTotalAmount = function(t) {
                var e = this.getPlayerPool(t);
                return null !== e ? e.totalAmount : 0;
            }),
            (t.prototype.getCurrency = function(t) {
                var e = this.getPlayerPool(t);
                return null !== e ? e.currency : '';
            }),
            (t.prototype.clear = function() {
                this.playerPoolMap.forEach(function(t) {
                    t.clear();
                }, this);
            }),
            t
        );
    })();
    (o.TablePool = t), __reflect(t.prototype, 'VideoGameCore.TablePool');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t;
    !(function(i) {
        var t = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                Object.defineProperty(e, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (e.init = function() {
                    return this.initInstance(this);
                }),
                Object.defineProperty(e.prototype, 'urlList', {
                    get: function() {
                        return Core.Config.HostConfig.instance.getHostByVid(
                            this.vid
                        ).urlList;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(e.prototype, 'respMap', {
                    get: function() {
                        return (
                            this._respMap ||
                                ((this._respMap = new Core.HashMap()),
                                this._respMap.set(r.we, r.ze),
                                this._respMap.set(r.Se, r.ye),
                                this._respMap.set(r.oi, r.Vip.ai),
                                this._respMap.set(
                                    r.VIP_VIDEO_LIMITSET,
                                    r.Vip.VipVideoLimitSet
                                ),
                                this._respMap.set(r.mt, i.dt),
                                this._respMap.set(r.fe, r.xe),
                                this._respMap.set(r.ue, r.Oe),
                                this._respMap.set(r.pt, r.Ie),
                                this._respMap.set(r.kt, r.Re),
                                this._respMap.set(r.ft, r.Le),
                                this._respMap.set(r.W, r.je),
                                this._respMap.set(r.wt, r.Be),
                                this._respMap.set(r.Ae, r.Ne),
                                this._respMap.set(r.NOTIFY_TURN_CARD, r.Led.hi),
                                this._respMap.set(r.TURNCARD_PERSON, r.Led.ui),
                                this._respMap.set(
                                    r.TURNCARD_MOUSE_MI_CARD_MOBILE,
                                    r.MiPai.ci
                                ),
                                this._respMap.set(r.VIP_WHO_MI_CARD, r.Vip.fi),
                                this._respMap.set(
                                    r.VIP_START_MI_CARD,
                                    r.Vip.Ci
                                ),
                                this._respMap.set(r.VIP_END_MI_CARD, r.Vip.li),
                                this._respMap.set(
                                    r.FUNCTION_BUTTON_STATUS,
                                    r.Led.mi
                                ),
                                this._respMap.set(r.Gt, r.Me),
                                this._respMap.set(r.Nt, r.De),
                                this._respMap.set(r.lt, r.He),
                                this._respMap.set(r.di, r.vi),
                                this._respMap.set(r.Ue, r.Fe),
                                this._respMap.set(r.Ke, r.Ze),
                                this._respMap.set(r.Ye, r.qe),
                                this._respMap.set(r.VIP_SHOW_CARD, r.Gi),
                                this._respMap.set(r.Ct, r.Je),
                                this._respMap.set(r.VIP_NEW_SHOE, r.Vip._i),
                                this._respMap.set(r.gt, r.We),
                                this._respMap.set(
                                    r.GAME_LAST_POSITION_OLD,
                                    r.We
                                ),
                                this._respMap.set(r.GAME_USERLIST, r.We),
                                this._respMap.set(
                                    r.GAME_USERLIST_WITH_VID,
                                    r.We
                                ),
                                this._respMap.set(r.Qe, r.Xe),
                                this._respMap.set(r.VIP_BAC_SET_INFO, r.Vip.bi),
                                this._respMap.set(r.Pi, r.Vip.Vi),
                                this._respMap.set(
                                    r.LED_CONTACT_PERSON,
                                    r.Led.gi
                                )),
                            this._respMap
                        );
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(e.prototype, 'tag', {
                    get: function() {
                        return '[GameSocket ' + this.vid + ']';
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                e
            );
        })(Core.Network.WebSocketBase);
        (i.AbacGameSocket = t),
            __reflect(t.prototype, 'VideoGameCore.Abac.AbacGameSocket');
    })((t = r.Abac || (r.Abac = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            Object.defineProperty(e, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.init = function() {
                return this.initInstance(this);
            }),
            Object.defineProperty(e.prototype, 'urlList', {
                get: function() {
                    return Core.Config.HostConfig.instance.getHostByVid(
                        this.vid
                    ).urlList;
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.prototype.getEncryptIDs = function() {
                return [i.GAME_BET_EXT];
            }),
            (e.prototype.getDecryptIDs = function() {
                return [i.mt, i.pi, i.ki];
            }),
            Object.defineProperty(e.prototype, 'respMap', {
                get: function() {
                    return (
                        this._respMap ||
                            ((this._respMap = new Core.HashMap()),
                            this._respMap.set(i.we, i.ze),
                            this._respMap.set(i.wi, i.zi),
                            this._respMap.set(i.Vt, i.Si),
                            this._respMap.set(i.fe, i.xe),
                            this._respMap.set(i.mt, i.dt),
                            this._respMap.set(i.ue, i.Oe),
                            this._respMap.set(i.pt, i.Ie),
                            this._respMap.set(i.kt, i.Re),
                            this._respMap.set(i.ft, i.Le),
                            this._respMap.set(i.W, i.je),
                            this._respMap.set(i.wt, i.Be),
                            this._respMap.set(i.Ae, i.Ne),
                            this._respMap.set(i.Gt, i.Me),
                            this._respMap.set(i.Nt, i.De),
                            this._respMap.set(i.ki, i.yi),
                            this._respMap.set(i.lt, i.He),
                            this._respMap.set(i.Ue, i.Fe),
                            this._respMap.set(i.Ke, i.Ze),
                            this._respMap.set(i.pi, i.Ei),
                            this._respMap.set(i.Ct, i.Je),
                            this._respMap.set(i.gt, i.We),
                            this._respMap.set(i.GAME_LAST_POSITION, i.We),
                            this._respMap.set(i.GAME_USERLIST, i.We),
                            this._respMap.set(i.GAME_USERLIST_WITH_VID, i.We),
                            this._respMap.set(i.Qe, i.Xe),
                            this._respMap.set(i.Ti, i.xi),
                            this._respMap.set(i.Oi, i.Led.Ii),
                            this._respMap.set(i.Ri, i.Led.Li),
                            this._respMap.set(i.ji, i.Led.Bi),
                            this._respMap.set(i.Ai, i.Ni)),
                        this._respMap
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(e.prototype, 'tag', {
                get: function() {
                    return '[GameSocket ' + this.vid + ']';
                },
                enumerable: !0,
                configurable: !0
            }),
            e
        );
    })(Core.Network.CryptoWebSocket);
    (i.BacGameSocket = t),
        __reflect(t.prototype, 'VideoGameCore.BacGameSocket');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            Object.defineProperty(e, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.init = function() {
                return this.initInstance(this);
            }),
            Object.defineProperty(e.prototype, 'urlList', {
                get: function() {
                    return Core.Config.HostConfig.instance.getHostByVid(
                        this.vid
                    ).urlList;
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(e.prototype, 'respMap', {
                get: function() {
                    return (
                        this._respMap ||
                            ((this._respMap = new Core.HashMap()),
                            this._respMap.set(i.Se, i.ye),
                            this._respMap.set(i.Ue, i.Fe),
                            this._respMap.set(i.Ke, i.Ze),
                            this._respMap.set(i.we, i.ze),
                            this._respMap.set(i.xt, i.He),
                            this._respMap.set(i.BJ_USER_BET_INFO, i.Mi),
                            this._respMap.set(i.BJ_LAST_POSITION, i.Bj.We),
                            this._respMap.set(i.BJ_USER_LIST, i.Bj.We),
                            this._respMap.set(i.BJ_PLAYER_ENTRY_LEAVE, i.Bj.We),
                            this._respMap.set(i.BJ_ENTER_TABLE_RESP, i.Bj.Di),
                            this._respMap.set(i.BJ_SNAPSHOT, i.Bj.dt),
                            this._respMap.set(i.BJ_VID_POOL_RESP, i.Bj.xe),
                            this._respMap.set(i.BJ_BET_RESP, i.Oe),
                            this._respMap.set(i.Hi, i.Ui),
                            this._respMap.set(i.yt, i.Fi),
                            this._respMap.set(i.BJ_START_GAME, i.Bj.Le),
                            this._respMap.set(i.Ki, i.Bj.Ie),
                            this._respMap.set(i.St, i.Bj.Re),
                            this._respMap.set(i.BJ_RECEIVE_CARD, i.Bj.Zi),
                            this._respMap.set(i.BJ_CMD_RESP, i.Bj.Yi),
                            this._respMap.set(i.BJ_CMD_OTHER, i.Bj.qi),
                            this._respMap.set(i.BJ_INSURE_RES, i.Bj.Ji),
                            this._respMap.set(i.BJ_PAYOUT_ME, i.Bj.je),
                            this._respMap.set(i.wt, i.Bj.Be),
                            this._respMap.set(i.BJ_PAYOUT_OTHER, i.Bj.Be),
                            this._respMap.set(i.BJ_FINAL_PAYOFF, i.Bj.Wi),
                            this._respMap.set(i.Qi, i.Bj.Ne),
                            this._respMap.set(i.Xi, i.Bj.$i),
                            this._respMap.set(
                                i.BJ_GAME_BET_CANCEL_NOTICE,
                                i.Bj.tr
                            )),
                        this._respMap
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(e.prototype, 'tag', {
                get: function() {
                    return '[GameSocket ' + this.vid + ']';
                },
                enumerable: !0,
                configurable: !0
            }),
            e
        );
    })(Core.Network.WebSocketBase);
    (i.BjGameSocket = t), __reflect(t.prototype, 'VideoGameCore.BjGameSocket');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            Object.defineProperty(e, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.init = function() {
                return this.initInstance(this);
            }),
            Object.defineProperty(e.prototype, 'urlList', {
                get: function() {
                    return Core.Config.HostConfig.instance.getHostByVid(
                        this.vid
                    ).urlList;
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(e.prototype, 'respMap', {
                get: function() {
                    return (
                        this._respMap ||
                            ((this._respMap = new Core.HashMap()),
                            this._respMap.set(i.we, i.ze),
                            this._respMap.set(i.Se, i.ye),
                            this._respMap.set(i.Ee, i.Te),
                            this._respMap.set(i.ce, i.xe),
                            this._respMap.set(i.mt, i.dt),
                            this._respMap.set(i.ue, i.Oe),
                            this._respMap.set(i.ft, i.Le),
                            this._respMap.set(i.W, i.je),
                            this._respMap.set(i.Ae, i.Ne),
                            this._respMap.set(i.lt, i.He),
                            this._respMap.set(i.Ye, i.qe),
                            this._respMap.set(i.pi, i.Ei),
                            this._respMap.set(i.er, i.ir),
                            this._respMap.set(i.rr, i.sr),
                            this._respMap.set(i.gt, i.We),
                            this._respMap.set(i.Ti, i.xi),
                            this._respMap.set(i.nr, i.Bull.or),
                            this._respMap.set(i.Ue, i.Fe),
                            this._respMap.set(i.Ke, i.Ze)),
                        this._respMap
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(e.prototype, 'tag', {
                get: function() {
                    return '[GameSocket ' + this.vid + ']';
                },
                enumerable: !0,
                configurable: !0
            }),
            e
        );
    })(Core.Network.WebSocketBase);
    (i.BullGameSocket = t),
        __reflect(t.prototype, 'VideoGameCore.BullGameSocket');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t;
    !(function(i) {
        var t = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                Object.defineProperty(e, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (e.init = function() {
                    return this.initInstance(this);
                }),
                Object.defineProperty(e.prototype, 'urlList', {
                    get: function() {
                        return Core.Config.HostConfig.instance.getHostByVid(
                            this.vid
                        ).urlList;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(e.prototype, 'respMap', {
                    get: function() {
                        return (
                            this._respMap ||
                                ((this._respMap = new Core.HashMap()),
                                this._respMap.set(r.we, r.ze),
                                this._respMap.set(r.Se, r.ye),
                                this._respMap.set(r.oi, r.Vip.ai),
                                this._respMap.set(
                                    r.VIP_VIDEO_LIMITSET,
                                    r.Vip.VipVideoLimitSet
                                ),
                                this._respMap.set(r.mt, i.dt),
                                this._respMap.set(r.fe, r.xe),
                                this._respMap.set(r.ue, r.Oe),
                                this._respMap.set(r.pt, r.Ie),
                                this._respMap.set(r.kt, r.Re),
                                this._respMap.set(r.ft, r.Le),
                                this._respMap.set(r.W, r.je),
                                this._respMap.set(r.wt, r.Be),
                                this._respMap.set(r.Ae, r.Ne),
                                this._respMap.set(r.VIP_WHO_MI_CARD, r.Vip.fi),
                                this._respMap.set(
                                    r.VIP_START_MI_CARD,
                                    r.Vip.Ci
                                ),
                                this._respMap.set(r.VIP_END_MI_CARD, r.Vip.li),
                                this._respMap.set(
                                    r.VIP_MOUSE_MI_CARD_EX,
                                    r.Vip.ar
                                ),
                                this._respMap.set(r.Gt, r.Me),
                                this._respMap.set(r.Nt, r.De),
                                this._respMap.set(r.lt, r.He),
                                this._respMap.set(r.di, r.vi),
                                this._respMap.set(r.Ue, r.Fe),
                                this._respMap.set(r.Ye, r.qe),
                                this._respMap.set(r.VIP_SHOW_CARD, r.Gi),
                                this._respMap.set(r.Ct, r.Je),
                                this._respMap.set(r.VIP_NEW_SHOE, r.Vip._i),
                                this._respMap.set(r.gt, r.We),
                                this._respMap.set(
                                    r.GAME_LAST_POSITION_OLD,
                                    r.We
                                ),
                                this._respMap.set(r.GAME_USERLIST, r.We),
                                this._respMap.set(
                                    r.GAME_USERLIST_WITH_VID,
                                    r.We
                                ),
                                this._respMap.set(r.Qe, r.Xe),
                                this._respMap.set(r.VIP_BAC_SET_INFO, r.Vip.bi),
                                this._respMap.set(r.Pi, r.Vip.Vi)),
                            this._respMap
                        );
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(e.prototype, 'tag', {
                    get: function() {
                        return '[GameSocket ' + this.vid + ']';
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                e
            );
        })(Core.Network.WebSocketBase);
        (i.CbacGameSocket = t),
            __reflect(t.prototype, 'VideoGameCore.Cbac.CbacGameSocket');
    })((t = r.Cbac || (r.Cbac = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            Object.defineProperty(e, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.init = function() {
                return this.initInstance(this);
            }),
            Object.defineProperty(e.prototype, 'urlList', {
                get: function() {
                    return Core.Config.HostConfig.instance.getHostByVid(
                        this.vid
                    ).urlList;
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(e.prototype, 'respMap', {
                get: function() {
                    return (
                        this._respMap ||
                            ((this._respMap = new Core.HashMap()),
                            this._respMap.set(i.we, i.ze),
                            this._respMap.set(i.wi, i.zi),
                            this._respMap.set(i.Vt, i.Si),
                            this._respMap.set(i.ce, i.xe),
                            this._respMap.set(i.mt, i.dt),
                            this._respMap.set(i.ue, i.Oe),
                            this._respMap.set(i.pt, i.Ie),
                            this._respMap.set(i.kt, i.Re),
                            this._respMap.set(i.ft, i.Le),
                            this._respMap.set(i.W, i.je),
                            this._respMap.set(i.wt, i.Be),
                            this._respMap.set(i.Ae, i.Ne),
                            this._respMap.set(i.hr, i.ur),
                            this._respMap.set(i.Mt, i.cr),
                            this._respMap.set(i.lt, i.He),
                            this._respMap.set(i.Ue, i.Fe),
                            this._respMap.set(i.Ke, i.Ze),
                            this._respMap.set(i.fr, i.Cr),
                            this._respMap.set(i.Ct, i.Je),
                            this._respMap.set(i.gt, i.We),
                            this._respMap.set(i.GAME_LAST_POSITION, i.We),
                            this._respMap.set(i.GAME_USERLIST, i.We),
                            this._respMap.set(i.GAME_USERLIST_WITH_VID, i.We),
                            this._respMap.set(i.Qe, i.Xe)),
                        this._respMap
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(e.prototype, 'tag', {
                get: function() {
                    return '[GameSocket ' + this.vid + ']';
                },
                enumerable: !0,
                configurable: !0
            }),
            e
        );
    })(Core.Network.WebSocketBase);
    (i.DtGameSocket = t), __reflect(t.prototype, 'VideoGameCore.DtGameSocket');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t;
    !(function(i) {
        var t = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                Object.defineProperty(e, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (e.init = function() {
                    return this.initInstance(this);
                }),
                Object.defineProperty(e.prototype, 'urlList', {
                    get: function() {
                        return Core.Config.HostConfig.instance.getHostByVid(
                            this.vid
                        ).urlList;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(e.prototype, 'respMap', {
                    get: function() {
                        return (
                            this._respMap ||
                                ((this._respMap = new Core.HashMap()),
                                this._respMap.set(r.Se, r.ye),
                                this._respMap.set(r.Ue, r.Fe),
                                this._respMap.set(r.Ke, r.Ze),
                                this._respMap.set(r.we, r.ze),
                                this._respMap.set(r.Ae, r.Ne),
                                this._respMap.set(r.gt, r.We),
                                this._respMap.set(r.lt, r.He),
                                this._respMap.set(r.LED_LAST_POSITION, i.lr),
                                this._respMap.set(r.mt, i.dt),
                                this._respMap.set(r.oi, r.mr),
                                this._respMap.set(r.ce, r.xe),
                                this._respMap.set(r.VIP_SHOW_CARD, r.Gi),
                                this._respMap.set(r.Ye, r.qe),
                                this._respMap.set(r.TURNCARD_PERSON, i.ui),
                                this._respMap.set(r.dr, i.vr),
                                this._respMap.set(r.di, r.vi),
                                this._respMap.set(
                                    r.TURNCARD_MOUSE_MI_CARD_MOBILE,
                                    r.MiPai.ci
                                ),
                                this._respMap.set(r.Gt, r.Me),
                                this._respMap.set(r.Nt, r.De),
                                this._respMap.set(r.ft, r.Le),
                                this._respMap.set(r.ue, r.Oe),
                                this._respMap.set(r.pt, r.Ie),
                                this._respMap.set(r.kt, r.Re),
                                this._respMap.set(r.W, r.je),
                                this._respMap.set(r.TURN_CARD_COMMAND, i.Gr),
                                this._respMap.set(
                                    r.FUNCTION_BUTTON_STATUS,
                                    i.mi
                                ),
                                this._respMap.set(r.Oi, i.Ii),
                                this._respMap.set(r.Ri, i.Li),
                                this._respMap.set(r.ji, i.Bi),
                                this._respMap.set(r.NOTIFY_TURN_CARD, i.hi),
                                this._respMap.set(r.wt, r.Be),
                                this._respMap.set(r.Ct, r.Je),
                                this._respMap.set(r.VIP_NEW_SHOE, r.Vip._i),
                                this._respMap.set(r.CUT_SHOE_START, i._r),
                                this._respMap.set(r.CUT_SHOE_INFO, i.br),
                                this._respMap.set(r.Pr, i.Vr),
                                this._respMap.set(
                                    r.VIP_VIDEO_LIMITSET,
                                    r.Vip.VipVideoLimitSet
                                ),
                                this._respMap.set(r.CLIENT_LIST, i.gr),
                                this._respMap.set(r.GAME_USERLIST, r.We),
                                this._respMap.set(
                                    r.GAME_USERLIST_WITH_VID,
                                    r.We
                                )),
                            this._respMap
                        );
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(e.prototype, 'tag', {
                    get: function() {
                        return '[GameSocket ' + this.vid + ']';
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                e
            );
        })(Core.Network.WebSocketBase);
        (i.LedGameSocket = t),
            __reflect(t.prototype, 'VideoGameCore.Led.LedGameSocket');
    })((t = r.Led || (r.Led = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            Object.defineProperty(e, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.init = function() {
                return this.initInstance(this);
            }),
            Object.defineProperty(e.prototype, 'urlList', {
                get: function() {
                    return Core.Config.HostConfig.instance.getHost(
                        'multi-table'
                    ).urlList;
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(e.prototype, 'respMap', {
                get: function() {
                    return (
                        this._respMap ||
                            ((this._respMap = new Core.HashMap()),
                            this._respMap.set(i.we, i.ze),
                            this._respMap.set(i.Se, i.ye),
                            this._respMap.set(i.pr, i.ye),
                            this._respMap.set(i.kr, i.wr),
                            this._respMap.set(i.mt, i.dt),
                            this._respMap.set(i.Nt, i.De),
                            this._respMap.set(i.Mt, i.cr),
                            this._respMap.set(i.lt, i.He),
                            this._respMap.set(i.Ue, i.Fe),
                            this._respMap.set(i.ut, i.zr),
                            this._respMap.set(i.ct, i.zr),
                            this._respMap.set(i.jt, i.Sr),
                            this._respMap.set(i.Bt, i.Sr),
                            this._respMap.set(i.At, i.Sr),
                            this._respMap.set(i.MULTI_TABLE_ROU_BET_RES, i.yr),
                            this._respMap.set(i.Er, i.Tr),
                            this._respMap.set(i.Ut, i.xr),
                            this._respMap.set(i.Ft, i.xr),
                            this._respMap.set(i.Ye, i.qe),
                            this._respMap.set(i.Or, i.Ir),
                            this._respMap.set(i.Rr, i.Lr),
                            this._respMap.set(i.jr, i.Br),
                            this._respMap.set(i.Ct, i.Je),
                            this._respMap.set(i.Gt, i.Me),
                            this._respMap.set(i.hr, i.ur),
                            this._respMap.set(i.Ar, i.Nr),
                            this._respMap.set(i.X, i.Mr),
                            this._respMap.set(i.Ht, i.Dr),
                            this._respMap.set(i.SHB_GAME_INFO, i.Mi)),
                        this._respMap
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(e.prototype, 'tag', {
                get: function() {
                    return '[LinkGameSocket]';
                },
                enumerable: !0,
                configurable: !0
            }),
            e
        );
    })(Core.Network.WebSocketBase);
    (i.LinkGameSocket = t),
        __reflect(t.prototype, 'VideoGameCore.LinkGameSocket');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            Object.defineProperty(e, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.init = function() {
                return this.initInstance(this);
            }),
            Object.defineProperty(e.prototype, 'urlList', {
                get: function() {
                    return Core.Config.HostConfig.instance.getHost(
                        'multi-table-live'
                    ).urlList;
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(e.prototype, 'respMap', {
                get: function() {
                    return (
                        this._respMap ||
                            ((this._respMap = new Core.HashMap()),
                            this._respMap.set(i.Zt, i.Hr),
                            this._respMap.set(i.Ur, i.Fr),
                            this._respMap.set(i.Yt, i.Kr),
                            this._respMap.set(i.qt, i.Zr),
                            this._respMap.set(i.Qt, i.Yr),
                            this._respMap.set(i.qr, i.Jr),
                            this._respMap.set(i.Xt, i.Wr),
                            this._respMap.set(i.Ue, i.Fe),
                            this._respMap.set(i.we, i.ze),
                            this._respMap.set(i.mt, i.dt),
                            this._respMap.set(i.Ye, i.qe),
                            this._respMap.set(i.Qr, i.Live.Le),
                            this._respMap.set(i.lt, i.He),
                            this._respMap.set(i.Ct, i.Je),
                            this._respMap.set(i.Gt, i.Me),
                            this._respMap.set(i.hr, i.ur),
                            this._respMap.set(i.er, i.ir),
                            this._respMap.set(i.Ar, i.Nr),
                            this._respMap.set(i.Xr, i.$r),
                            this._respMap.set(i.Nt, i.De),
                            this._respMap.set(i.X, i.Mr),
                            this._respMap.set(i.Mt, i.cr),
                            this._respMap.set(i.rr, i.sr),
                            this._respMap.set(i.Ht, i.Dr),
                            this._respMap.set(i.ts, i.Live.Oe),
                            this._respMap.set(i.es, i.rs),
                            this._respMap.set(i.ss, i.ns),
                            this._respMap.set(i.as, i.hs),
                            this._respMap.set(i.ee, i.us),
                            this._respMap.set(i.fs, i.Cs),
                            this._respMap.set(i.ls, i.ms),
                            this._respMap.set(i.ds, i.vs),
                            this._respMap.set(i.Gs, i._s),
                            this._respMap.set(i.Wt, i.bs),
                            this._respMap.set(i.Ps, i.Vs),
                            this._respMap.set(i.ROU_GAME_PAYOUT_RATE, i.gs),
                            this._respMap.set(i.ps, i.ks),
                            this._respMap.set(i.zs, i.Ss),
                            this._respMap.set(i.ys, i.Es),
                            this._respMap.set(i.ie, i.Ts),
                            this._respMap.set(i.xs, i.Os),
                            this._respMap.set(i.Is, i.Rs)),
                        this._respMap
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(e.prototype, 'tag', {
                get: function() {
                    return '[Live GameSocket]';
                },
                enumerable: !0,
                configurable: !0
            }),
            e
        );
    })(Core.Network.WebSocketBase);
    (i.LiveGameSocket = t),
        __reflect(t.prototype, 'VideoGameCore.LiveGameSocket');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t;
    !(function(i) {
        var t = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                Object.defineProperty(e, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (e.init = function() {
                    return this.initInstance(this);
                }),
                Object.defineProperty(e.prototype, 'urlList', {
                    get: function() {
                        return Core.Config.HostConfig.instance.getHostByVid(
                            this.vid
                        ).urlList;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(e.prototype, 'respMap', {
                    get: function() {
                        return (
                            this._respMap ||
                                ((this._respMap = new Core.HashMap()),
                                this._respMap.set(r.Se, r.ye),
                                this._respMap.set(r.wi, r.zi),
                                this._respMap.set(r.Vt, r.Si),
                                this._respMap.set(r.we, r.ze),
                                this._respMap.set(r.mt, r.dt),
                                this._respMap.set(r.Ar, r.Nr),
                                this._respMap.set(r.Ht, r.Dr),
                                this._respMap.set(r.Ls, i.Bs),
                                this._respMap.set(r.ce, i.xe),
                                this._respMap.set(r.pt, i.Ie),
                                this._respMap.set(r.kt, i.Re),
                                this._respMap.set(r.ft, r.Le),
                                this._respMap.set(r.W, i.je),
                                this._respMap.set(r.gt, r.We),
                                this._respMap.set(r.Ae, r.Ne),
                                this._respMap.set(r.ROU_GAME_PAYOUT_RATE, r.gs),
                                this._respMap.set(r.ROU_GAME_RESULT_STAT, i.As),
                                this._respMap.set(r.Ee, r.Te),
                                this._respMap.set(r.ue, r.Oe),
                                this._respMap.set(r.lt, r.He),
                                this._respMap.set(r.Ue, r.Fe),
                                this._respMap.set(r.Ke, r.Ze),
                                this._respMap.set(r.Ai, r.$i),
                                this._respMap.set(r.Ns, r.Ms),
                                this._respMap.set(r.Ds, r.Hs)),
                            this._respMap
                        );
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(e.prototype, 'tag', {
                    get: function() {
                        return '[GameSocket ' + this.vid + ']';
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                e
            );
        })(Core.Network.WebSocketBase);
        (i.RouGameSocket = t),
            __reflect(t.prototype, 'VideoGameCore.Rou.RouGameSocket');
    })((t = r.Rou || (r.Rou = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                Object.defineProperty(e, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (e.init = function() {
                    return this.initInstance(this);
                }),
                Object.defineProperty(e.prototype, 'urlList', {
                    get: function() {
                        return Core.Config.HostConfig.instance.getHostByVid(
                            this.vid
                        ).urlList;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(e.prototype, 'respMap', {
                    get: function() {
                        return (
                            this._respMap ||
                                ((this._respMap = new Core.HashMap()),
                                this._respMap.set(i.Se, i.ye),
                                this._respMap.set(i.we, i.ze),
                                this._respMap.set(i.mt, i.dt),
                                this._respMap.set(i.Xr, i.$r),
                                this._respMap.set(i.X, i.Mr),
                                this._respMap.set(i.ce, i.xe),
                                this._respMap.set(i.pt, i.Ie),
                                this._respMap.set(i.kt, i.Re),
                                this._respMap.set(i.ft, i.Le),
                                this._respMap.set(i.W, i.je),
                                this._respMap.set(i.gt, i.We),
                                this._respMap.set(i.Ae, i.Ne),
                                this._respMap.set(i.SHB_GAME_PAYOUT_RATE, i.gs),
                                this._respMap.set(i.Ee, i.Te),
                                this._respMap.set(i.ue, i.Oe),
                                this._respMap.set(i.lt, i.He),
                                this._respMap.set(i.Ue, i.Fe),
                                this._respMap.set(i.Ke, i.Ze)),
                            this._respMap
                        );
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(e.prototype, 'tag', {
                    get: function() {
                        return '[GameSocket ' + this.vid + ']';
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                e
            );
        })(Core.Network.WebSocketBase);
        (t.ShbGameSocket = e),
            __reflect(e.prototype, 'VideoGameCore.Shb.ShbGameSocket');
    })((t = i.Shb || (i.Shb = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            Object.defineProperty(e, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.init = function() {
                return this.initInstance(this);
            }),
            Object.defineProperty(e.prototype, 'urlList', {
                get: function() {
                    return Core.Config.HostConfig.instance.getHostByVid(
                        this.vid
                    ).urlList;
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(e.prototype, 'respMap', {
                get: function() {
                    return (
                        this._respMap ||
                            ((this._respMap = new Core.HashMap()),
                            this._respMap.set(i.we, i.ze),
                            this._respMap.set(i.Zs, i.Ys),
                            this._respMap.set(i.Ae, i.Ne),
                            this._respMap.set(i.gt, i.We),
                            this._respMap.set(i.qs, i.Js),
                            this._respMap.set(i.Ws, i.Qs),
                            this._respMap.set(i.Xs, i.$s),
                            this._respMap.set(i.tn, i.in),
                            this._respMap.set(i.rn, i.sn),
                            this._respMap.set(i.an, i.hn),
                            this._respMap.set(i.un, i.Oe),
                            this._respMap.set(i.cn, i.fn),
                            this._respMap.set(i.Cn, i.ln),
                            this._respMap.set(i.mn, i.dn),
                            this._respMap.set(i.vn, i.Gn)),
                        this._respMap
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(e.prototype, 'tag', {
                get: function() {
                    return '[GameSocket ' + this.vid + ']';
                },
                enumerable: !0,
                configurable: !0
            }),
            e
        );
    })(Core.Network.WebSocketBase);
    (i.ZjhGameSocket = t),
        __reflect(t.prototype, 'VideoGameCore.ZjhGameSocket');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                this.retCode = t.readInt();
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Oe = e), __reflect(e.prototype, 'VideoGameCore.GameBetResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                if (
                    ((this.vid = t.readUTFBytes(Core._n)),
                    (this.gmtype = t.readUTFBytes(Core.bn)),
                    (this.status = t.readByte()),
                    (this.gmcode = t.readUTFBytes(Core.Pn)),
                    13 != this.gmcode.length && (this.gmcode = ''),
                    [r.GAME_BAC, r.GAME_DT].indexOf(this.gmtype) > -1)
                ) {
                    var e = [r.GAME_DT].indexOf(this.gmtype) > -1 ? 1 : 3;
                    this.bcards = [];
                    for (var i = 0; e > i; i++)
                        this.bcards.push(t.readUnsignedByte());
                    this.pcards = [];
                    for (var i = 0; e > i; i++)
                        this.pcards.push(t.readUnsignedByte());
                } else if ([r.GAME_NN].indexOf(this.gmtype) > -1) {
                    this.cardlist = [];
                    for (var i = 0; 21 > i; i++)
                        this.cardlist.push(t.readUnsignedByte());
                    var e = (t.readUnsignedInt(), t.readByte());
                    t.readByte();
                } else
                    [r.GAME_ROU].indexOf(this.gmtype) > -1
                        ? (this.res = t.readUnsignedInt())
                        : [r.GAME_SHB].indexOf(this.gmtype) > -1 &&
                          ((this.shbInfo = new r.RoadPaper.RoadShbData()),
                          (this.shbInfo.code = this.gmcode),
                          (this.shbInfo.dice1 = t.readByte()),
                          (this.shbInfo.dice2 = t.readByte()),
                          (this.shbInfo.dice3 = t.readByte()));
                (this.timeout = t.readShort()),
                    (this.max_timeout = t.readShort()),
                    Core.ExternalData.showSocketLog &&
                        dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (r.dt = t), __reflect(t.prototype, 'VideoGameCore.GameCurrentStatusResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.gmcode = t.readUTFBytes(Core.Pn)),
                    (this.span = t.readShort());
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Le = e), __reflect(e.prototype, 'VideoGameCore.GameStartResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(a) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                this.clear(), (this.vid = t.readUTFBytes(Core._n));
                var e = a.RoomConfig.instance.getRoomInfoByVid(this.vid);
                if (e) {
                    (this.curCurrencyRate = a.VideoPlazaStore.instance.currencyRate),
                        [a.GAME_SHB].indexOf(e.gmtype) > -1 &&
                            (this.sum_amount = t.readFloat() * this.curCurrencyRate),
                        [a.GAME_BJ].indexOf(e.gmtype) > -1
                            ? ((this.num = t.readInt()),
                              (this.seated = t.readInt()),
                              (this.bet = t.readInt()))
                            : ((this.num = t.readShort()),
                              (this.bet = t.readShort()));
                    var i, r, s, n, o;
                    if (
                        ((this.betInfos = new Core.HashMap()),
                        [
                            a.GAME_DT,
                            a.GAME_BAC,
                            a.GAME_LBAC,
                            a.GAME_CBAC,
                            a.GAME_ABAC,
                            a.GAME_SBAC
                        ].indexOf(e.gmtype) > -1)
                    )
                        (this.n1 = t.readShort()),
                            (this.n2 = t.readShort()),
                            (this.credit1 = t.readFloat() * this.curCurrencyRate),
                            (this.credit2 = t.readFloat() * this.curCurrencyRate),
                            (this.n3 = t.readShort()),  
                            (this.n4 = t.readShort()),
                            (this.n5 = t.readShort()),
                            e.gmtype != a.GAME_SBAC
                                ? ((this.n6 = t.readShort()),
                                  (this.n7 = t.readShort()))
                                : ((this.n6 = 0), (this.n7 = 0)),
                            (this.credit3 = t.readFloat() * this.curCurrencyRate),
                            (this.credit4 = t.readFloat() * this.curCurrencyRate),
                            (this.credit5 = t.readFloat() * this.curCurrencyRate),
                            e.gmtype != a.GAME_SBAC
                                ? ((this.credit6 = t.readFloat() * this.curCurrencyRate),
                                  (this.credit7 = t.readFloat() * this.curCurrencyRate))
                                : ((this.credit6 = 0), (this.credit7 = 0)),
                            (this.sum_amount = t.readFloat() * this.curCurrencyRate);
                    else if ([a.GAME_NN].indexOf(e.gmtype) > -1)
                        (this.total_pt211 = t.readUnsignedShort()),
                            (this.total_pt212 = t.readUnsignedShort()),
                            (this.total_pt213 = t.readUnsignedShort()),
                            (this.total_pt214 = t.readUnsignedShort()),
                            (this.total_pt215 = t.readUnsignedShort()),
                            (this.total_pt216 = t.readUnsignedShort()),
                            (this.sum_credit211 =
                                t.readFloat() * this.curCurrencyRate),
                            (this.sum_credit212 =
                                t.readFloat() * this.curCurrencyRate),
                            (this.sum_credit213 =
                                t.readFloat() * this.curCurrencyRate),
                            (this.sum_credit214 =
                                t.readFloat() * this.curCurrencyRate),
                            (this.sum_credit215 =
                                t.readFloat() * this.curCurrencyRate),
                            (this.sum_credit216 =
                                t.readFloat() * this.curCurrencyRate),
                            (this.sum_amount =
                                t.readFloat() * this.curCurrencyRate);
                    else if ([a.GAME_ROU].indexOf(e.gmtype) > -1)
                        (this.red = t.readUnsignedShort()),
                            (this.black = t.readUnsignedShort()),
                            (this.odd = t.readUnsignedShort()),
                            (this.even = t.readUnsignedShort()),
                            (this.big = t.readUnsignedShort()),
                            (this.small = t.readUnsignedShort()),
                            this.respId === a.Vn &&
                                (this.zero = t.readUnsignedShort()),
                            (this.creditRed =
                                t.readFloat() * this.curCurrencyRate),
                            (this.creditBlack =
                                t.readFloat() * this.curCurrencyRate),
                            (this.creditOdd =
                                t.readFloat() * this.curCurrencyRate),
                            (this.creditEven =
                                t.readFloat() * this.curCurrencyRate),
                            (this.creditBig =
                                t.readFloat() * this.curCurrencyRate),
                            (this.creditSamll =
                                t.readFloat() * this.curCurrencyRate),
                            this.respId === a.Vn &&
                                (this.creditZero =
                                    t.readUnsignedShort() *
                                    this.curCurrencyRate),
                            (this.sum_amount =
                                t.readFloat() * this.curCurrencyRate);
                    else if ([a.GAME_SHB].indexOf(e.gmtype) > -1)
                        for (r = t.readInt(), i = 0; r > i; i++)
                            (s = t.readUnsignedByte()),
                                (n = t.readShort()),
                                (o = t.readFloat() * this.curCurrencyRate),
                                this.appendBetInfo(s, n, o);
                    else if ([a.GAME_BJ].indexOf(e.gmtype) > -1)
                        for (
                            this.sum_amount =
                                t.readDouble() * this.curCurrencyRate,
                                r = t.readByte(),
                                i = 0;
                            r > i;
                            i++
                        )
                            (s = t.readUnsignedByte()),
                            (n = t.readShort()),
                            (o = t.readDouble() * this.curCurrencyRate),
                            this.appendBetInfo(s, n, o);
                    (this.sum_amount = this.num <= 0 ? 0 : Math.max(0, this.sum_amount)),
                        t.bytesAvailable > 0 &&
                            ([a.GAME_DT, a.GAME_BAC, a.GAME_LBAC].indexOf(
                                e.gmtype
                            ) > -1 &&
                                ((this.n8 = t.readShort()),
                                (this.n9 = t.readShort()),
                                (this.credit8 = t.readFloat() * this.curCurrencyRate),
                                (this.credit9 = t.readFloat() * this.curCurrencyRate)),
                            [a.GAME_SBAC].indexOf(e.gmtype) > -1 &&
                                ((this.n10 = t.readShort()),
                                (this.n11 = t.readShort()),
                                (this.credit10 =
                                    t.readFloat() * this.curCurrencyRate),
                                (this.credit11 =
                                    t.readFloat() * this.curCurrencyRate))),
                        Core.ExternalData.showSocketLog &&
                            dclib(egret.getQualifiedClassName(this), this);
                }
            }),
            (e.prototype.appendBetInfo = function(t, e, i) {
                this.betInfos.set(t, { playType: t, count: e, amount: i });
            }),
            (e.prototype.clear = function() {
                (this.n1 = 0),
                    (this.n2 = 0),
                    (this.credit1 = 0),
                    (this.credit2 = 0),
                    (this.n3 = 0),
                    (this.n4 = 0),
                    (this.n5 = 0),
                    (this.n6 = 0),
                    (this.n7 = 0),
                    (this.credit3 = 0),
                    (this.credit4 = 0),
                    (this.credit5 = 0),
                    (this.credit6 = 0),
                    (this.credit7 = 0),
                    (this.n8 = 0),
                    (this.n9 = 0),
                    (this.credit8 = 0),
                    (this.credit9 = 0),
                    (this.n10 = 0),
                    (this.n11 = 0),
                    (this.credit10 = 0),
                    (this.credit11 = 0),
                    (this.total_pt211 = 0),
                    (this.total_pt212 = 0),
                    (this.total_pt213 = 0),
                    (this.total_pt214 = 0),
                    (this.total_pt215 = 0),
                    (this.total_pt216 = 0),
                    (this.sum_credit211 = 0),
                    (this.sum_credit212 = 0),
                    (this.sum_credit213 = 0),
                    (this.sum_credit214 = 0),
                    (this.sum_credit215 = 0),
                    (this.sum_credit216 = 0),
                    (this.red = 0),
                    (this.black = 0),
                    (this.odd = 0),
                    (this.even = 0),
                    (this.big = 0),
                    (this.small = 0),
                    (this.zero = 0),
                    (this.creditRed = 0),
                    (this.creditBlack = 0),
                    (this.creditOdd = 0),
                    (this.creditEven = 0),
                    (this.creditBig = 0),
                    (this.creditSamll = 0),
                    (this.creditZero = 0),
                    this.betInfos &&
                        this.betInfos.forEach(function(t) {
                            (t.amount = 0), (t.count = 0);
                        }, this);
            }),
            (e.prototype.updateCurrencyRate = function(t) {
                var e = this,
                    i = this.curCurrencyRate;
                this.curCurrencyRate != t &&
                    ((this.curCurrencyRate = t),
                    (this.sum_amount =
                        (this.sum_amount / i) * this.curCurrencyRate),
                    (this.credit1 = (this.credit1 / i) * this.curCurrencyRate),
                    (this.credit2 = (this.credit2 / i) * this.curCurrencyRate),
                    (this.credit3 = (this.credit3 / i) * this.curCurrencyRate),
                    (this.credit4 = (this.credit4 / i) * this.curCurrencyRate),
                    (this.credit5 = (this.credit5 / i) * this.curCurrencyRate),
                    (this.credit6 = (this.credit6 / i) * this.curCurrencyRate),
                    (this.credit7 = (this.credit7 / i) * this.curCurrencyRate),
                    (this.credit8 = (this.credit8 / i) * this.curCurrencyRate),
                    (this.credit9 = (this.credit9 / i) * this.curCurrencyRate),
                    (this.credit10 =
                        (this.credit10 / i) * this.curCurrencyRate),
                    (this.credit11 =
                        (this.credit11 / i) * this.curCurrencyRate),
                    (this.sum_credit211 =
                        (this.sum_credit211 / i) * this.curCurrencyRate),
                    (this.sum_credit212 =
                        (this.sum_credit212 / i) * this.curCurrencyRate),
                    (this.sum_credit213 =
                        (this.sum_credit213 / i) * this.curCurrencyRate),
                    (this.sum_credit214 =
                        (this.sum_credit214 / i) * this.curCurrencyRate),
                    (this.sum_credit215 =
                        (this.sum_credit215 / i) * this.curCurrencyRate),
                    (this.sum_credit216 =
                        (this.sum_credit216 / i) * this.curCurrencyRate),
                    (this.creditRed =
                        (this.creditRed / i) * this.curCurrencyRate),
                    (this.creditBlack =
                        (this.creditBlack / i) * this.curCurrencyRate),
                    (this.creditOdd =
                        (this.creditOdd / i) * this.curCurrencyRate),
                    (this.creditEven =
                        (this.creditEven / i) * this.curCurrencyRate),
                    (this.creditBig =
                        (this.creditBig / i) * this.curCurrencyRate),
                    (this.creditSamll =
                        (this.creditSamll / i) * this.curCurrencyRate),
                    (this.creditZero =
                        (this.creditZero / i) * this.curCurrencyRate),
                    this.betInfos &&
                        this.betInfos.forEach(function(t) {
                            t.amount = (t.amount / i) * e.curCurrencyRate;
                        }, this));
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (a.Mi = t), __reflect(t.prototype, 'VideoGameCore.VideoRealtimeInfoResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(n) {
        var t = (function(s) {
            function t(t, e, i) {
                void 0 === i && (i = 1);
                var r = s.call(this, t, e, i) || this;
                return (
                    (r.isAsking = !1),
                    (r.redWinColor = 14619414),
                    (r.blueWinColor = 3618291),
                    r
                );
            }
            return (
                __extends(t, s),
                (t.prototype.setMapData = function(t, e, i, r, s, n) {
                    void 0 === e && (e = !1),
                        void 0 === i && (i = !1),
                        void 0 === r && (r = -1),
                        void 0 === s && (s = 2236962),
                        void 0 === n && (n = -1),
                        (this.isAsking = e),
                        (this.mapData = t),
                        this.graphics.clear(),
                        this.removeChildren(),
                        i ||
                            (n >= 0
                                ? this.refreshGridPaper(s, n)
                                : this.refreshGridPaper(s)),
                        this.drawMap(r),
                        e ||
                            this.dispatchEvent(
                                new egret.Event(egret.Event.CHANGE)
                            );
                }),
                (t.prototype.drawMap = function(t) {
                    void 0 === t && (t = -1);
                    var e = this.mapData.length + (this.isAsking ? 0 : 1);
                    (this.colOffset = 0 > t ? 0 : t), (this.maxOffset = e);
                    var i = this.colNum;
                    e > i && 0 > t && (this.colOffset = e - i);
                    for (
                        var r = 0;
                        r < this.mapData.length - this.colOffset;
                        r++
                    )
                        for (var s = 0; s < n.MAX_MAP_Y; s++)
                            this.drawBead(
                                this.mapData[r + this.colOffset][s],
                                r,
                                s
                            );
                    this.cacheAsBitmap = !0;
                }),
                (t.prototype.drawBead = function(t, e, i) {}),
                (t.prototype.setColOffset = function(t) {
                    0 > t && (t = 0),
                        this.graphics.clear(),
                        this.removeChildren(),
                        this.drawGridPaper(),
                        this.drawMap(t);
                }),
                (t.prototype.setRedWinColor = function(t) {
                    void 0 === t && (t = 14619414), (this.redWinColor = t);
                }),
                (t.prototype.setBlueWinColor = function(t) {
                    void 0 === t && (t = 3618291), (this.blueWinColor = t);
                }),
                t
            );
        })(n.GridPaper);
        (n.RoadPaperBase = t),
            __reflect(t.prototype, 'VideoGameCore.RoadPaper.RoadPaperBase');
    })((e = t.RoadPaper || (t.RoadPaper = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(a) {
        var t = (function(s) {
            function t(t, e, i) {
                void 0 === i && (i = 6);
                var r = s.call(this, t, e, 1, i) || this;
                return (r.isAsking = !1), r;
            }
            return (
                __extends(t, s),
                (t.prototype.setListData = function(t, e, i) {
                    void 0 === e && (e = !1),
                        void 0 === i && (i = -1),
                        (this.isAsking = e),
                        (this.listData = t),
                        this.removeChildren(),
                        this.drawMap(i),
                        this.dispatchEventWith(egret.Event.CHANGE);
                }),
                (t.prototype.drawMap = function(t) {
                    void 0 === t && (t = -1), (this.colOffset = 0 > t ? 0 : t);
                    var e = Math.ceil(this.listData.length / this.rowNum);
                    (this.maxOffset = e),
                        e > this.colNum &&
                            0 > t &&
                            (this.colOffset = e - this.colNum);
                    for (
                        var i = 0;
                        i <
                        Math.min(
                            this.listData.length - this.colOffset * this.rowNum,
                            this.colNum * this.rowNum
                        );
                        i++
                    ) {
                        var r = i % this.rowNum,
                            s = Math.floor(i / this.rowNum);
                        this.drawBead(
                            this.listData[i + this.colOffset * this.rowNum],
                            s,
                            r
                        );
                    }
                    this.cacheAsBitmap = !0;
                }),
                (t.prototype.drawBead = function(t, e, i) {
                    var r = this.getBitmapByBead(t);
                    (r.width = this.gridSize),
                        (r.height = this.gridSize),
                        (r.x = e * this.gridSize),
                        (r.y = i * this.gridSize),
                        this.addChildAt(r, 0);
                }),
                (t.prototype.getBitmapByBead = function(t) {
                    var e =
                            0 == t
                                ? 3578627
                                : a.rouResultIsRed(t)
                                    ? 14619414
                                    : 0,
                        i = t.toString(),
                        r = this.gridSize,
                        s = new egret.Sprite();
                    s.graphics.beginFill(e, 1);
                    var n = 0.5 * r;
                    s.graphics.drawRect(0, 0, r, r), s.graphics.endFill();
                    var o = new eui.Label();
                    return (
                        s.addChildAt(o, 1),
                        (o.size = 1.3 * n),
                        (o.text = i),
                        (o.x = 0),
                        (o.y = 0),
                        (o.width = r),
                        (o.height = r),
                        (o.textAlign = 'center'),
                        (o.verticalAlign = 'middle'),
                        s
                    );
                }),
                (t.prototype.refresh = function() {
                    this.removeChildren(), this.drawMap();
                }),
                (t.prototype.setColOffset = function(t) {
                    0 > t && (t = 0), this.removeChildren(), this.drawMap(t);
                }),
                t
            );
        })(a.GridPaper);
        (a.RoadRouMainPaper = t),
            __reflect(t.prototype, 'VideoGameCore.RoadPaper.RoadRouMainPaper');
    })((e = t.RoadPaper || (t.RoadPaper = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(C) {
    var t;
    !(function(c) {
        var i = 30,
            r = 1e3,
            f = 7e3,
            t = (function(e) {
                function t() {
                    var t = e.call(this) || this;
                    return (
                        (t.balance = 0),
                        (t.loginType = 0),
                        (t.loginPassword = null),
                        (t.seat = -1),
                        (t.actualSeat = -1),
                        (t.isForcedBackLobby = !1),
                        (t.enteredTable = !1),
                        (t.hostLeftKickTimer = -1),
                        (t.loginType = 3),
                        (t.isTableClosing = !1),
                        (t.isHostLeftKicked = !1),
                        (t.isWaitingForResult = !1),
                        t
                    );
                }
                return (
                    __extends(t, e),
                    (t.prototype.getSocketList = function() {
                        return [c.AbacGameSocket.instance];
                    }),
                    (t.prototype.onSocketConnected = function(t) {
                        t.writeBytes(
                            C.getCMDClientLoginGame(
                                Core.LoginStore.instance.loginName,
                                Core.LoginStore.instance.token,
                                Core.gn
                            )
                        );
                    }),
                    (t.prototype.onSocketData = function(t, e) {
                        if (!t.vid || this.vid === t.vid)
                            switch (t.respId) {
                                case C.Se:
                                    var i = t;
                                    0 == i.retCode ||
                                        Core.globalStore.dispatchGlobal(C.pn);
                                    break;
                                case C.GAME_LAST_POSITION_OLD:
                                    var r = t;
                                    r.seat > 0
                                        ? this.onEnterTable(
                                              r.seat,
                                              r.players[0].tableCode
                                          )
                                        : e.writeBytes(
                                              C.getCMDVipAutoEnterTable(
                                                  this.vid,
                                                  this.loginType,
                                                  this.loginPassword
                                              )
                                          );
                                    break;
                                case C.oi:
                                    var s = t;
                                    0 == s.code || 23 == s.code
                                        ? this.onEnterTable(s.seat, s.table)
                                        : Core.globalStore.dispatchGlobal(
                                              C.pn,
                                              s.code
                                          );
                                    break;
                                case C.Ae:
                                    var n = t;
                                    this.dispatchAction(C.kn, n.roundNum);
                                    break;
                                case C.gt:
                                    var o = t;
                                    o.loginname ==
                                        Core.LoginStore.instance.loginName &&
                                        -2 === o.action &&
                                        (this.isTableClosing ||
                                            this.dispatchAction(C.wn));
                                    break;
                                case C.di:
                                    var a = t;
                                    switch (a.status) {
                                        case 0:
                                            break;
                                        case 11:
                                            this.isWaitingForResult = !1;
                                            break;
                                        default:
                                            this.isWaitingForResult = !0;
                                    }
                                    7 == a.vipStatus && this.onTableClosing();
                                    break;
                                case C.mt:
                                    var h = t;
                                    switch (h.status) {
                                        case 0:
                                        case 11:
                                            this.isWaitingForResult = !1;
                                            break;
                                        default:
                                            this.isWaitingForResult = !0;
                                    }
                                    7 == h.vipStatus && this.onTableClosing();
                                    break;
                                case C.Nt:
                                    this.isTableClosing &&
                                        ((this.otherTotalBet = this.getOtherTotalBet()),
                                        c.BetTableStore.instance.totalBet ||
                                            this.otherTotalBet.keys.length ||
                                            this.performHostLeftKick(f));
                                    break;
                                case C.W:
                                    this.isTableClosing &&
                                        !this.otherTotalBet.keys.length &&
                                        this.performHostLeftKick(f);
                                    break;
                                case C.wt:
                                    if (this.isTableClosing) {
                                        var h = t;
                                        this.otherTotalBet.has(h.loginname) &&
                                            this.otherTotalBet['delete'](
                                                h.loginname
                                            ),
                                            this.otherTotalBet.keys.length ||
                                                this.performHostLeftKick(f);
                                    }
                                    break;
                                case C.LED_CONTACT_PERSON:
                                    var u = t;
                                    this.dispatchAction(C.zt, u);
                            }
                    }),
                    Object.defineProperty(t.prototype, 'isInVIPMainTable', {
                        get: function() {
                            var t =
                                this.vid.slice(0, 1) + 'V' + this.vid.slice(2);
                            return this.tableCode == t;
                        },
                        enumerable: !0,
                        configurable: !0
                    }),
                    Object.defineProperty(t.prototype, 'isHost', {
                        get: function() {
                            return 3 == this.loginType;
                        },
                        enumerable: !0,
                        configurable: !0
                    }),
                    Object.defineProperty(t.prototype, 'isVisitPlayer', {
                        get: function() {
                            return 1 == this.loginType;
                        },
                        enumerable: !0,
                        configurable: !0
                    }),
                    Object.defineProperty(t.prototype, 'hasEnterTable', {
                        get: function() {
                            return this.enteredTable;
                        },
                        enumerable: !0,
                        configurable: !0
                    }),
                    (t.prototype.release = function() {
                        e.prototype.release.call(this);
                    }),
                    (t.prototype.onSocketDie = function(t) {
                        t === c.AbacGameSocket.instance &&
                            Core.globalStore.dispatchGlobal(C.oe);
                    }),
                    (t.prototype.onEnterTable = function(t, e) {
                        (this.enteredTable = !0),
                            C.isVipVisitPlayer(this.vid, e)
                                ? ((this.loginType = 1),
                                  (this.seat = C.VIP_HOST_SEAT),
                                  (this.actualSeat = t))
                                : (t == C.VIP_HOST_SEAT
                                      ? (this.loginType = 3)
                                      : (this.loginType = 2),
                                  (this.seat = t),
                                  (this.actualSeat = t)),
                            (this.tableCode = e),
                            this.dispatchAction(C.de, this.seat),
                            c.AbacGameSocket.instance.writeBytes(
                                C.getCMDGetGameCurrentStatus()
                            ),
                            Core.NonstopTimer.instance.setTimeout(
                                function() {
                                    Core.globalStore.dispatchGlobal(C.zn);
                                },
                                this,
                                1e3
                            );
                    }),
                    Object.defineProperty(t, 'instance', {
                        get: function() {
                            return this.getInstance(this);
                        },
                        enumerable: !0,
                        configurable: !0
                    }),
                    (t.init = function() {
                        return this.initInstance(this);
                    }),
                    Object.defineProperty(t.prototype, 'changeDealerEnabled', {
                        get: function() {
                            return 8 != c.RoomTimerStore.instance.vipStatus;
                        },
                        enumerable: !0,
                        configurable: !0
                    }),
                    (t.prototype.requestChangeDealer = function() {
                        if (this.changeDealerEnabled) {
                            var t = C.VideoPlazaStore.instance.getDealerInfo(
                                this.vid
                            );
                            t &&
                                (this.dispatchAction(C.Sn),
                                c.AbacGameSocket.instance.writeBytes(
                                    C.getCMDVipChangeDealer(this.vid, t.name)
                                ));
                        }
                    }),
                    Object.defineProperty(t.prototype, 'shuffleEnabled', {
                        get: function() {
                            return 8 != c.RoomTimerStore.instance.vipStatus;
                        },
                        enumerable: !0,
                        configurable: !0
                    }),
                    (t.prototype.requestShuffle = function() {
                        if (this.shuffleEnabled) {
                            var t = C.PlazaRoadStore.instance.getRoadData(
                                this.vid
                            );
                            t && t.totalCount >= i
                                ? (c.AbacGameSocket.instance.writeBytes(
                                      C.getCMDVipChangeShoe(this.vid)
                                  ),
                                  this.dispatchAction(C.yn))
                                : this.dispatchAction(C.En);
                        }
                    }),
                    (t.prototype.sendActionHasBet = function() {
                        this.dispatchAction(C.ne);
                    }),
                    (t.prototype.forceBackLobby = function() {
                        (this.isForcedBackLobby = !0),
                            Core.globalStore.dispatchGlobal(C.Tn);
                    }),
                    (t.prototype.onTableClosing = function() {
                        this.isTableClosing ||
                            ((this.isTableClosing = !0),
                            this.dispatchAction(C.xn),
                            this.isWaitingForResult ||
                                this.performHostLeftKick());
                    }),
                    (t.prototype.performHostLeftKick = function(t) {
                        var e = this;
                        void 0 === t && (t = r),
                            c.AbacGameSocket.instance.killSocket(),
                            (this.isHostLeftKicked = !0),
                            Core.NonstopTimer.instance.hasTimeout(
                                this.hostLeftKickTimer
                            ) ||
                                (this.hostLeftKickTimer = Core.NonstopTimer.instance.setTimeout(
                                    function() {
                                        e.dispatchAction(C.On);
                                    },
                                    this,
                                    t
                                ));
                    }),
                    (t.prototype.getOtherTotalBet = function() {
                        for (
                            var t = new Core.HashMap(),
                                e = c.BetTableStore.instance.mySeatNum,
                                i = 1;
                            i <= C.MAX_TABLE_SEAT;
                            i++
                        )
                            if (i != e) {
                                var r = c.TableSeatStore.instance.getPlayerBySeatNum(
                                    i
                                );
                                if (r) {
                                    var s = c.BetTableStore.instance.tablePool.getTotalAmount(
                                        i
                                    );
                                    s && t.set(r.loginname, s);
                                }
                            }
                        return t;
                    }),
                    t
                );
            })(Core.NetworkStoreBase);
        (c.AbacStore = t),
            __reflect(t.prototype, 'VideoGameCore.Abac.AbacStore');
    })((t = C.Abac || (C.Abac = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(m) {
    var t;
    !(function(l) {
        var t = (function(n) {
            function t() {
                var t = n.call(this) || this;
                return (
                    (t.playtypes = m.BET_PLAYTYPES),
                    (t.tablePool = new m.TablePool()),
                    (t.videoPool = new m.VideoPool()),
                    (t.socketList = [l.AbacGameSocket.instance]),
                    t
                );
            }
            return (
                __extends(t, n),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                Object.defineProperty(t.prototype, 'mySeatNum', {
                    get: function() {
                        var t = l.TableSeatStore.instance.getPlayer(
                            Core.LoginStore.instance.loginName
                        );
                        return null != t ? t.seat : 0;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, 'roomTimerStore', {
                    get: function() {
                        return l.RoomTimerStore.instance;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.getAmountByType = function(t, e) {
                    return (
                        void 0 === e && (e = 0),
                        0 === e || e === this.mySeatNum
                            ? this.stakePool.getAmount(t)
                            : this.tablePool.getAmount(e, t)
                    );
                }),
                (t.prototype.getUnconfirmedAmountByType = function(t) {
                    return this.getAmountByType(t) - this.donePool.getAmount(t);
                }),
                (t.prototype.getDisablePlayTypes = function() {
                    var t = [];
                    return (
                        m.PlazaRoadStore.instance.getRoadData(this.vid) &&
                            m.PlazaRoadStore.instance.getRoadData(this.vid)
                                .totalCount >= m.MAX_BET_GAME_BAC_BIG_SMALL &&
                            t.push(m.PLAYTYPE_BIG, m.PLAYTYPE_SMALL),
                        t
                    );
                }),
                (t.prototype.isBetEnabled = function() {
                    var t = n.prototype.isBetEnabled.call(this);
                    return (
                        l.AbacStore.instance.isHost &&
                            (t =
                                t &&
                                (this.dispatchCardEnabled ||
                                    this.totalBet > 0)),
                        t
                    );
                }),
                (t.prototype.getBetLimitByPlayType = function(t) {
                    return m.UserStore.instance.getBetLimitByPlayType(
                        t,
                        l.AbacStore.instance.tableCode,
                        l.AbacStore.instance.loginType,
                        this.vid
                    );
                }),
                (t.prototype.reset = function() {
                    n.prototype.reset.call(this),
                        this.tablePool.clear(),
                        this.videoPool.clear();
                }),
                (t.prototype.sendBetToServer = function(t) {
                    if (
                        (n.prototype.sendBetToServer.call(this, t),
                        this.gameSocket.connected)
                    ) {
                        var e = t.playType;
                        e === m.PLAYTYPE_BANKER &&
                            this.noComm &&
                            (e = m.PLAYTYPE_BANKER_NO_COMMISSION),
                            l.AbacGameSocket.instance.writeBytes(
                                m.getCMDGameBetExt(
                                    this.gmcode,
                                    e,
                                    t.amount,
                                    t.seq
                                )
                            );
                    }
                }),
                (t.prototype.onSocketData = function(t, e) {
                    if (!this.isInvalidVid(t)) {
                        var i;
                        switch (t.respId) {
                            case m.ue:
                                this.m(t);
                                break;
                            case m.Nt:
                                this._(t);
                                break;
                            case m.W:
                                this.V(t);
                                break;
                            case m.fe:
                                var r = t;
                                if (null != r.betPoolInfos) {
                                    var s,
                                        n = r.betPoolInfos.length;
                                    for (i = 0; n > i; i++) {
                                        s = r.betPoolInfos[i];
                                        var o = s.playType,
                                            a = m.isVipVisitPlayer(
                                                this.vid,
                                                s.tableCode
                                            );
                                        if (
                                            (a ||
                                                this.tablePool.addBetToPool(
                                                    s.seatNum,
                                                    o,
                                                    s.amount,
                                                    s.currency,
                                                    !1
                                                ),
                                            this.videoPool.addBetToPool(
                                                s.loginname,
                                                s.nickname,
                                                o,
                                                s.amount,
                                                s.currency
                                            ),
                                            s.loginname ===
                                                Core.LoginStore.instance
                                                    .loginName)
                                        ) {
                                            var h =
                                                    l.AbacStore.instance
                                                        .isVisitPlayer,
                                                u = a ? h : !h;
                                            u &&
                                                (this.donePool.setAmount(
                                                    o,
                                                    s.amount
                                                ),
                                                this.lastPool.setAmount(
                                                    o,
                                                    s.amount
                                                ),
                                                s.amount >
                                                    this.stakePool.getAmount(
                                                        o
                                                    ) &&
                                                    this.stakePool.setAmount(
                                                        o,
                                                        s.amount
                                                    ));
                                        }
                                    }
                                }
                                this.diffPool.clear(),
                                    this.dispatchAction(m.T),
                                    Core.NonstopTimer.instance.setTimeout(
                                        function() {
                                            Core.globalStore.dispatchGlobal(
                                                m.zn
                                            );
                                        },
                                        this,
                                        500
                                    );
                                break;
                            case m.kt:
                                var c = t,
                                    f = l.TableSeatStore.instance.getPlayer(
                                        c.name
                                    );
                                f &&
                                    (this.tablePool.addBetToPool(
                                        f.seat,
                                        c.playType,
                                        c.value,
                                        c.currency
                                    ),
                                    this.videoPool.addBetToPool(
                                        c.name,
                                        c.nick,
                                        c.playType,
                                        c.value,
                                        c.currency
                                    ),
                                    this.dispatchAction(m.T, c.seatNum));
                                break;
                            case m.wt:
                                this.p(t);
                                break;
                            case m.FUNCTION_BUTTON_STATUS:
                                var C = t;
                                this.vid === C.vid &&
                                    C.userName ===
                                        Core.LoginStore.instance.loginName &&
                                    ((this.btnStatus = C.btnStatus),
                                    this.dispatchAction(m.In));
                                break;
                            case m.Gt:
                        }
                    }
                }),
                (t.prototype.payoutTimeoutDo = function(t) {
                    n.prototype.payoutTimeoutDo.call(this, t),
                        this.dispatchAction(m.k, {
                            seatNum: this.mySeatNum,
                            payouts: t.ptPayouts
                        });
                }),
                (t.prototype.payoutOtherTimeoutDo = function(t) {
                    var e = l.TableSeatStore.instance.getPlayer(t.loginname);
                    null != e &&
                        this.dispatchAction(m.k, {
                            seatNum: e.seat,
                            payouts: t.ptPayouts
                        });
                }),
                (t.prototype.addChipByPlayType = function(t, e) {
                    for (var i = [], r = 2; r < arguments.length; r++)
                        i[r - 2] = arguments[r];
                    var s = n.prototype.addChipByPlayType.call(this, t, e, i);
                    return (
                        s &&
                            this.isTablePlayer() &&
                            l.AbacGameSocket.instance.writeBytes(
                                m.getPlayerPreBet(
                                    this.vid,
                                    this.gmcode,
                                    Core.LoginStore.instance.loginName,
                                    m.UserStore.instance.balance,
                                    this.mySeatNum,
                                    1,
                                    s.playType,
                                    s.amount
                                )
                            ),
                        s
                    );
                }),
                (t.prototype.repeatBet = function() {
                    if (
                        (n.prototype.repeatBet.call(this),
                        this.isTablePlayer() && this.stakePool.totalAmount > 0)
                    )
                        for (
                            var t, e = this.stakePool.getAllStakeData(), i = 0;
                            i < e.length;
                            i++
                        )
                            (t = e[i]),
                                l.AbacGameSocket.instance.writeBytes(
                                    m.getPlayerPreBet(
                                        this.vid,
                                        this.gmcode,
                                        Core.LoginStore.instance.loginName,
                                        m.UserStore.instance.balance,
                                        this.mySeatNum,
                                        1,
                                        t.playType,
                                        t.amount
                                    )
                                );
                }),
                (t.prototype.cancelBet = function(t) {
                    void 0 === t && (t = !0),
                        n.prototype.cancelBet.call(this, t),
                        this.isTablePlayer() &&
                            l.AbacGameSocket.instance.writeBytes(
                                m.getPlayerPreBet(
                                    this.vid,
                                    this.gmcode,
                                    Core.LoginStore.instance.loginName,
                                    m.UserStore.instance.balance,
                                    this.mySeatNum,
                                    0,
                                    m.PLAYTYPE_PLAYER,
                                    0
                                )
                            );
                }),
                (t.prototype.getCurrencyBySeatNum = function(t) {
                    return this.tablePool.getCurrency(t);
                }),
                (t.prototype.startGame = function() {
                    l.AbacStore.instance.isHost &&
                        this.gameSocket.writeBytes(
                            m.getCMDVipStartGame(this.vid)
                        );
                }),
                Object.defineProperty(t.prototype, 'openCardEnabled', {
                    get: function() {
                        return this.dispatchCardEnabled && this.totalBet > 0;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, 'skipCardEnabled', {
                    get: function() {
                        return this.dispatchCardEnabled && 0 == this.totalBet;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, 'dispatchCardEnabled', {
                    get: function() {
                        return (
                            l.AbacStore.instance.isHost &&
                            1 == this.roomTimerStore.gameStatus &&
                            (0 === this.btnStatus || 2 === this.btnStatus)
                        );
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.dispatchCardStart = function() {
                    this.dispatchCardEnabled &&
                        this.gameSocket.writeBytes(
                            m.getCMDExecuteCmd(
                                Core.LoginStore.instance.loginName,
                                this.vid,
                                t.instance.gmcode,
                                1,
                                m.VIP_HOST_SEAT
                            )
                        );
                }),
                (t.prototype.isTablePlayer = function() {
                    return m.isValidSeatNum(this.mySeatNum);
                }),
                t
            );
        })(m.BetStoreBaseBac);
        (l.BetTableStore = t),
            __reflect(t.prototype, 'VideoGameCore.Abac.BetTableStore');
    })((t = m.Abac || (m.Abac = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(l) {
    var t;
    !(function(C) {
        var e = 4,
            t = (function(f) {
                function t() {
                    var t = f.call(this) || this;
                    return (
                        (t.whoMiCard = 0),
                        (t.cardColor = 0),
                        (t.mouseInfoList = [null, null, null]),
                        (t.mouseMiCardTimer = [0, 0, 0]),
                        (t.mouseInfosList = [[], [], []]),
                        (t.ingoreServerMouseInfo = !1),
                        (t.socketList = [C.AbacGameSocket.instance]),
                        t
                    );
                }
                return (
                    __extends(t, f),
                    Object.defineProperty(t, 'instance', {
                        get: function() {
                            return this.getInstance(this);
                        },
                        enumerable: !0,
                        configurable: !0
                    }),
                    (t.init = function() {
                        return this.initInstance(this);
                    }),
                    (t.prototype.onSocketConnected = function(t) {}),
                    (t.prototype.onSocketData = function(t, e) {
                        var i = this;
                        if (
                            (t.respId !== l.mt &&
                                f.prototype.onSocketData.call(this, t, e),
                            !t.vid || this.vid === t.vid)
                        )
                            switch (t.respId) {
                                case l.Ye:
                                    var r = t;
                                    this.pokerDataQue.push(
                                        new l.PokerData(
                                            r.card,
                                            r.who,
                                            r.index,
                                            r.show
                                        )
                                    ),
                                        this.parsePokerDataQue(),
                                        this.dispatchAction(l.vt);
                                    break;
                                case l.VIP_SHOW_CARD:
                                    var r = t;
                                    if (r.index > 0) {
                                        var s =
                                            1 == r.forWho
                                                ? this.pDataQue
                                                : this.bDataQue;
                                        r.index - 1 < s.length &&
                                            ((s[r.index - 1].show = !0),
                                            this.parsePokerDataQue(),
                                            this.dispatchAction(l.vt));
                                    }
                                    break;
                                case l.Nt:
                                    var n = t;
                                    C.BetTableStore.instance.gmcode ===
                                        n.code &&
                                        ((this.resultTimer = Core.NonstopTimer.instance.setTimeout(
                                            function() {
                                                this.parsePokerDataQue(),
                                                    (this.pScore = n.pval),
                                                    (this.bScore = n.bval),
                                                    (this.pWin = !1),
                                                    (this.bWin = !1),
                                                    (this.tie = !1),
                                                    this.pScore > this.bScore
                                                        ? (this.pWin = !0)
                                                        : this.pScore <
                                                          this.bScore
                                                            ? (this.bWin = !0)
                                                            : this.pScore ===
                                                                  this.bScore &&
                                                              (this.tie = !0),
                                                    (this.bPair =
                                                        (8 & n.res) >> 3 === 1),
                                                    (this.pPair =
                                                        (16 & n.res) >> 4 ===
                                                        1),
                                                    this.dispatchAction(l.vt);
                                            },
                                            this,
                                            l.StreamConfig.instance.getAverageDelay() -
                                                10
                                        )),
                                        (this.resetTimer = Core.NonstopTimer.instance.setTimeout(
                                            function() {
                                                this.resetAll(),
                                                    this.dispatchAction(l.vt);
                                            },
                                            this,
                                            2e4
                                        )));
                                    break;
                                case l.VIP_WHO_MI_CARD:
                                    var r = t;
                                    this.whoMiCard = r.who;
                                    break;
                                case l.VIP_END_MI_CARD:
                                    var r = t;
                                    this.endMiCard();
                                    break;
                                case l.TURNCARD_MOUSE_MI_CARD_MOBILE:
                                    var o = t;
                                    if (this.ingoreServerMouseInfo) break;
                                    if (
                                        ((this.mouseInfosList[
                                            o.cardIndex - 1
                                        ] = this.mouseInfosList[
                                            o.cardIndex - 1
                                        ].concat(o.mouseInfos)),
                                        Core.NonstopTimer.instance.hasInterval(
                                            this.mouseMiCardTimer[
                                                o.cardIndex - 1
                                            ]
                                        ))
                                    ) {
                                        if (
                                            this.mouseInfosList[o.cardIndex - 1]
                                                .length > 4
                                        ) {
                                            var a = [];
                                            o.mouseInfos.forEach(function(t) {
                                                if (
                                                    i.mouseInfosList[
                                                        o.cardIndex - 1
                                                    ].length > 4
                                                )
                                                    if (
                                                        (t.baseX < -5 &&
                                                            t.baseY < -5) ||
                                                        (t.x < -5 &&
                                                            t.y < -5) ||
                                                        0 == a.length
                                                    )
                                                        a.push(t);
                                                    else {
                                                        var e = a[a.length - 1];
                                                        (e.x == t.x &&
                                                            e.y == t.y &&
                                                            Math.abs(
                                                                e.baseX -
                                                                    t.baseX
                                                            ) < 0.05 &&
                                                            Math.abs(
                                                                e.baseY -
                                                                    t.baseY
                                                            ) < 0.05) ||
                                                            a.push(t);
                                                    }
                                            }, this),
                                                a.length <
                                                    this.mouseInfosList[
                                                        o.cardIndex - 1
                                                    ].length &&
                                                    (this.mouseInfosList[
                                                        o.cardIndex - 1
                                                    ] = a);
                                        }
                                    } else
                                        0 != o.mouseInfos.length &&
                                            (this.mouseMiCardTimer[
                                                o.cardIndex - 1
                                            ] = Core.NonstopTimer.instance.setInterval(
                                                function() {
                                                    var t = i.mouseInfosList[
                                                        o.cardIndex - 1
                                                    ].shift();
                                                    (t.baseX < -5 &&
                                                        t.baseY < -5) ||
                                                    (t.x < -5 && t.y < -5)
                                                        ? (i.mouseInfoList[
                                                              o.cardIndex - 1
                                                          ] = null)
                                                        : (i.mouseInfoList[
                                                              o.cardIndex - 1
                                                          ] = t),
                                                        i.dispatchAction(l.vt),
                                                        0 ===
                                                            i.mouseInfosList[
                                                                o.cardIndex - 1
                                                            ].length &&
                                                            (Core.NonstopTimer.instance.clearInterval(
                                                                i
                                                                    .mouseMiCardTimer[
                                                                    o.cardIndex -
                                                                        1
                                                                ]
                                                            ),
                                                            (i.mouseMiCardTimer[
                                                                o.cardIndex - 1
                                                            ] = 0));
                                                },
                                                this,
                                                10
                                            ));
                                    break;
                                case l.VIP_NEW_SHOE:
                                    var h = t;
                                    h.vid === C.AbacStore.instance.vid &&
                                        (this.cardColor = h.cardColor);
                                    break;
                                case l.TURNCARD_PERSON:
                                    var r = t;
                                    '' != r.playerName
                                        ? (this.whoMiCard = 1)
                                        : '' != r.bankerName &&
                                          (this.whoMiCard = 2),
                                        this.dispatchAction(l.vt);
                                    break;
                                case l.NOTIFY_TURN_CARD:
                                    var r = t;
                                    l.isValidSeatNum(r.pSeatNum)
                                        ? (this.whoMiCard = 1)
                                        : l.isValidSeatNum(r.bSeatNum) &&
                                          (this.whoMiCard = 2),
                                        this.dispatchAction(l.vt);
                                    break;
                                case l.mt:
                                    var u = t;
                                    if (
                                        ((this.cardColor = u.bColor),
                                        this.resetAll(),
                                        11 != u.status && 8 != u.vipStatus)
                                    ) {
                                        for (
                                            var c = 0;
                                            c < u.pcards.length;
                                            c++
                                        )
                                            0 != u.pcards[c] &&
                                                this.pokerDataQue.push(
                                                    new l.PokerData(
                                                        u.pcards[c],
                                                        0,
                                                        c + 1,
                                                        u.pShowCards[c]
                                                    )
                                                );
                                        for (
                                            var c = 0;
                                            c < u.bcards.length;
                                            c++
                                        )
                                            0 != u.bcards[c] &&
                                                this.pokerDataQue.push(
                                                    new l.PokerData(
                                                        u.bcards[c],
                                                        1,
                                                        c + 1,
                                                        u.bShowCards[c]
                                                    )
                                                );
                                        this.parsePokerDataQue(),
                                            this.dispatchAction(l.vt);
                                    }
                            }
                    }),
                    (t.prototype.release = function() {
                        f.prototype.release.call(this);
                    }),
                    (t.prototype.resetAll = function() {
                        f.prototype.resetAll.call(this),
                            (this.mouseInfoList = [null, null, null]),
                            (this.ingoreServerMouseInfo = !1),
                            (this.whoMiCard = 0);
                    }),
                    (t.prototype.endMiCard = function() {
                        this.pokerDataQue.forEach(function(t) {
                            t.show = !0;
                        }),
                            this.parsePokerDataQue(),
                            this.dispatchAction(l.vt);
                    }),
                    Object.defineProperty(t.prototype, 'miCardReady', {
                        get: function() {
                            return this.pokerDataQue.length >= e;
                        },
                        enumerable: !0,
                        configurable: !0
                    }),
                    (t.prototype.showCard = function(t, e) {
                        this.miCardReady &&
                            C.AbacGameSocket.instance.writeBytes(
                                l.getShowCardCmd(
                                    this.vid,
                                    C.BetTableStore.instance.gmcode,
                                    t,
                                    e
                                )
                            );
                    }),
                    (t.prototype.showCardAll = function() {
                        if (this.miCardReady)
                            for (
                                var t =
                                        2 == this.whoMiCard
                                            ? this.bDataQue
                                            : this.pDataQue,
                                    e = 0;
                                e < t.length;
                                e++
                            )
                                t[e].show ||
                                    this.showCard(e + 1, this.whoMiCard);
                    }),
                    (t.prototype.miCard = function(t, e, i) {
                        (this.ingoreServerMouseInfo = !0),
                            C.AbacGameSocket.instance.writeBytes(
                                l.getMouseMiCardCmd(this.vid, e, t, i)
                            );
                    }),
                    t
                );
            })(l.PokerBaseStore);
        (C.PokerStore = t),
            __reflect(t.prototype, 'VideoGameCore.Abac.PokerStore');
    })((t = l.Abac || (l.Abac = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(n) {
    var t;
    !(function(r) {
        var t = (function(s) {
            function t() {
                var t = s.call(this) || this;
                return (t.socketList = [r.AbacGameSocket.instance]), t;
            }
            return (
                __extends(t, s),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.onSocketData = function(t, e) {
                    if (
                        (s.prototype.onSocketData.call(this, t, e),
                        !t.vid || this.vid === t.vid)
                    )
                        switch (t.respId) {
                            case n.di:
                                var i = t;
                                (this.gameStatus = i.status),
                                    (this.vipStatus = i.vipStatus),
                                    1 == this.gameStatus
                                        ? this.updateTimeout(1, 1)
                                        : this.updateTimeout(0, 0),
                                    11 !== i.status &&
                                        this.dispatchAction(n.st, i.vid);
                                break;
                            case n.Ye:
                                1 == this.gameStatus &&
                                    ((this.gameStatus = 2),
                                    this.dispatchAction(n.st, this.vid),
                                    this.dispatchAction(n.w));
                                break;
                            case n.VIP_START_MI_CARD:
                                var r = t;
                                (this.gameStatus = r.gameStatus),
                                    (this.vipStatus = r.vipStatus),
                                    (this.miCardTimeout = r.timeout),
                                    this.dispatchAction(n.st, r.vid),
                                    this.startMiCardCountDown();
                                break;
                            case n.VIP_END_MI_CARD:
                                var r = t;
                                (this.gameStatus = r.gameStatus),
                                    (this.vipStatus = r.vipStatus),
                                    this.dispatchAction(n.st, r.vid),
                                    this.endMiCardCountDown();
                        }
                }),
                (t.prototype.release = function() {
                    s.prototype.release.call(this);
                }),
                (t.prototype.onGameStartDo = function() {
                    s.prototype.onGameStartDo.call(this), (this.vipStatus = 2);
                }),
                (t.prototype.onGameCurrentStatus = function(t) {
                    var e = t,
                        i = this.gameStatus != e.status;
                    this.gmcode != e.gmcode && this.dispatchAction(n.z),
                        (this.gmcode = e.gmcode),
                        (this.gameStatus = e.status),
                        (this.vipStatus = e.vipStatus),
                        1 == this.gameStatus
                            ? this.updateTimeout(1, 1)
                            : 2 == this.gameStatus
                                ? (i && this.dispatchAction(n.w),
                                  5 == this.vipStatus &&
                                      ((this.miCardTimeout = e.miCardTimeout),
                                      this.startMiCardCountDown()))
                                : this.updateTimeout(0, 0),
                        this.dispatchAction(n.Y),
                        r.AbacStore.instance.isHost &&
                            r.AbacGameSocket.instance.writeBytes(
                                n.getCMDExecuteCmd(
                                    Core.LoginStore.instance.loginName,
                                    this.vid,
                                    r.BetTableStore.instance.gmcode,
                                    9,
                                    n.VIP_HOST_SEAT
                                )
                            );
                }),
                (t.prototype.onVideoStatus = function(t) {
                    var e = t,
                        i = this.gameStatus != e.status && 1 == this.gameStatus;
                    s.prototype.onVideoStatus.call(this, t),
                        i && this.dispatchAction(n.w);
                }),
                (t.prototype.updateTimeout = function(t, e) {
                    (this.maxTimeout = t), (this.timeout = e);
                }),
                (t.prototype.startMiCardCountDown = function() {
                    Core.NonstopTimer.instance.hasInterval(
                        this.miCardTimerId
                    ) &&
                        Core.NonstopTimer.instance.clearInterval(
                            this.miCardTimerId
                        ),
                        this.miCardTimeout > 0 &&
                            (this.miCardCountDown(),
                            (this.miCardTimerId = Core.NonstopTimer.instance.setInterval(
                                this.miCardCountDown,
                                this,
                                1e3
                            )));
                }),
                (t.prototype.miCardCountDown = function() {
                    this.miCardTimeout > 0
                        ? (this.miCardTimeout--, this.dispatchAction(n._t))
                        : this.endMiCardCountDown();
                }),
                (t.prototype.endMiCardCountDown = function() {
                    (this.miCardTimeout = 0),
                        Core.NonstopTimer.instance.hasInterval(
                            this.miCardTimerId
                        ) &&
                            Core.NonstopTimer.instance.clearInterval(
                                this.miCardTimerId
                            ),
                        this.dispatchAction(n._t);
                }),
                t
            );
        })(n.RoomTimerBaseStore);
        (r.RoomTimerStore = t),
            __reflect(t.prototype, 'VideoGameCore.Abac.RoomTimerStore');
    })((t = n.Abac || (n.Abac = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t;
    !(function(r) {
        var t = (function(i) {
            function t() {
                var t = i.call(this) || this;
                return (t.socketList = [r.AbacGameSocket.instance]), t;
            }
            return (
                __extends(t, i),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.onSocketData = function(t, e) {
                    if (
                        (i.prototype.onSocketData.call(this, t, e),
                        !t.vid || this.vid === t.vid)
                    )
                        switch (t.respId) {
                            case s.GAME_LAST_POSITION_OLD:
                                this.onUserPosition(t);
                                break;
                            case s.LED_CONTACT_PERSON:
                                this.setPlayerData(t);
                        }
                }),
                (t.prototype.onUserPosition = function(t) {
                    if (!r.AbacStore.instance.isHostLeftKicked) {
                        for (var e = 0; e < t.players.length; e++)
                            s.isVipVisitPlayer(this.vid, t.players[e].tableCode)
                                ? t.players[e].loginname ==
                                      Core.LoginStore.instance.loginName &&
                                  ((t.players[e].seat = 8),
                                  this.setPlayerData(t.players[e]))
                                : this.setPlayerData(t.players[e]);
                        (this.tableCode = s.getVipTableCodeFromVid(this.vid)),
                            this.dispatchAction(s.zt, this.getPlayerList());
                    }
                }),
                (t.prototype.setPlayerLeave = function(t) {
                    t != Core.LoginStore.instance.loginName &&
                        i.prototype.setPlayerLeave.call(this, t);
                }),
                (t.prototype.release = function() {
                    i.prototype.release.call(this);
                }),
                t
            );
        })(s.TableSeatBaseStore);
        (r.TableSeatStore = t),
            __reflect(t.prototype, 'VideoGameCore.Abac.TableSeatStore');
    })((t = s.Abac || (s.Abac = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(h) {
    var t = (function(e) {
        function t() {
            var t = e.call(this) || this;
            return (
                (t.loginType = 0),
                (t.seat = -1),
                (t.socketList = [h.BacGameSocket.instance]),
                (t.loginType = 2),
                t
            );
        }
        return (
            __extends(t, e),
            Object.defineProperty(t, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.init = function() {
                return this.initInstance(this);
            }),
            (t.prototype.onSocketConnected = function(t) {
                t.writeBytes(
                    h.getCMDClientLoginGameExt(
                        this.vid,
                        Core.LoginStore.instance.loginName,
                        Core.LoginStore.instance.token,
                        Core.gn
                    )
                );
            }),
            (t.prototype.onSocketData = function(t, e) {
                switch (t.respId) {
                    case h.wi:
                        var i = t;
                        0 == i.retCode
                            ? h.BacGameSocket.instance.writeBytes(
                                  h.getCMDAutoEnterTable(this.vid)
                              )
                            : (Core.globalStore.dispatchGlobal(h.pn),
                              e.killSocket(),
                              dclib('LOGIN Game FAIL ' + i.retCode),
                              Core.LoginStore.instance.renewToken(function() {
                                  e.autoConnect();
                              }, this));
                        break;
                    case h.Vt:
                        var r = t;
                        0 == r.code || 23 == r.code
                            ? ((this.seat = r.seat),
                              (this.tableCode = r.table),
                              this.dispatchAction(h.de, this.seat),
                              e.writeBytes(h.getCMDGetGameCurrentStatus()),
                              Core.NonstopTimer.instance.setTimeout(
                                  function() {
                                      Core.globalStore.dispatchGlobal(h.zn);
                                  },
                                  this,
                                  1e3
                              ))
                            : Core.globalStore.dispatchGlobal(h.pn, r.code);
                        break;
                    case h.Ae:
                        var s = t;
                        this.dispatchAction(h.kn, s.roundNum);
                        break;
                    case h.gt:
                        var n = t;
                        n.loginname == Core.LoginStore.instance.loginName &&
                            n.seat === this.seat &&
                            -2 === n.action &&
                            this.dispatchAction(h.wn);
                        break;
                    case h.Oi:
                        var o = t;
                        this.dispatchAction(h.si, o);
                        break;
                    case h.ji:
                        this.dispatchAction(h.ri, t);
                        break;
                    case h.Ri:
                        var a = t;
                        this.dispatchAction(h.Rn, a);
                }
            }),
            (t.prototype.onSocketDie = function(t) {
                t === h.BacGameSocket.instance &&
                    Core.globalStore.dispatchGlobal(h.oe);
            }),
            (t.prototype.sendFeeForDealer = function(t, e) {
                h.UserStore.instance.balance >=
                h.VideoPlazaStore.instance.selectedChipValue
                    ? h.BacGameSocket.instance.writeBytes(h.getFeeCmd(t, e))
                    : this.dispatchAction(h.i);
            }),
            (t.prototype.requestTipsList = function(t, e, i, r, s) {
                h.BacGameSocket.instance.writeBytes(
                    h.getDealerTipsHist(t, e, i, r, s)
                );
            }),
            t
        );
    })(Core.NetworkStoreBase);
    (h.BacStore = t), __reflect(t.prototype, 'VideoGameCore.BacStore');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(o) {
    var t = (function(i) {
        function t() {
            var t = i.call(this) || this;
            return (
                (t.tablePool = new o.TablePool()),
                (t.socketList = [o.BacGameSocket.instance]),
                t
            );
        }
        return (
            __extends(t, i),
            Object.defineProperty(t, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.init = function() {
                return this.initInstance(this);
            }),
            Object.defineProperty(t.prototype, 'mySeatNum', {
                get: function() {
                    var t = o.TableSeatStore.instance.getPlayer(
                        Core.LoginStore.instance.loginName
                    );
                    return null != t ? t.seat : 0;
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(t.prototype, 'roomTimerStore', {
                get: function() {
                    return o.RoomTimerStore.instance;
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(t.prototype, 'roadMapStore', {
                get: function() {
                    return o.RoadMapStore.instance;
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.getAmountByType = function(t, e) {
                return (
                    void 0 === e && (e = 0),
                    0 === e || e === this.mySeatNum
                        ? this.stakePool.getAmount(t)
                        : this.tablePool.getAmount(e, t)
                );
            }),
            (t.prototype.getDisablePlayTypes = function() {
                var t = [];
                return (
                    this.roadMapStore.roadData.totalCount >=
                        o.MAX_BET_GAME_BAC_BIG_SMALL &&
                        t.push(o.PLAYTYPE_BIG, o.PLAYTYPE_SMALL),
                    this.isPair && !this.noComm && t.push(o.PLAYTYPE_SUPER_SIX),
                    t
                );
            }),
            (t.prototype.getBetLimitByPlayType = function(t) {
                return o.UserStore.instance.getBetLimitByPlayType(
                    t,
                    o.BacStore.instance.tableCode
                );
            }),
            (t.prototype.reset = function() {
                i.prototype.reset.call(this), this.tablePool.clear();
            }),
            (t.prototype.sendBetToServer = function(t) {
                if (
                    (i.prototype.sendBetToServer.call(this, t),
                    this.gameSocket.connected)
                ) {
                    var e = t.playType;
                    e === o.PLAYTYPE_BANKER &&
                        this.noComm &&
                        (e = o.PLAYTYPE_BANKER_NO_COMMISSION),
                        o.BacGameSocket.instance.writeBytes(
                            o.getCMDGameBetExt(this.gmcode, e, t.amount, t.seq)
                        );
                }
            }),
            (t.prototype.onSocketData = function(t, e) {
                if (!this.isInvalidVid(t)) {
                    switch (t.respId) {
                        case o.ue:
                            this.m(t);
                            break;
                        case o.ki:
                            this._(t);
                            break;
                        case o.W:
                            this.V(t);
                            break;
                        case o.fe:
                            this.onTablePool(t);
                            break;
                        case o.kt:
                            var i = t;
                            this.tablePool.addBetToPool(
                                i.seatNum,
                                i.playType,
                                i.value,
                                i.currency
                            ),
                                this.dispatchAction(o.T, i.seatNum);
                            break;
                        case o.wt:
                            this.p(t);
                    }
                }
            }),
            (t.prototype.payoutTimeoutDo = function(t) {
                i.prototype.payoutTimeoutDo.call(this, t),
                    this.dispatchAction(o.k, {
                        seatNum: this.mySeatNum,
                        payouts: t.ptPayouts
                    });
            }),
            (t.prototype.payoutOtherTimeoutDo = function(t) {
                var e = o.TableSeatStore.instance.getPlayer(t.loginname);
                null != e &&
                    this.dispatchAction(o.k, {
                        seatNum: e.seat,
                        payouts: t.ptPayouts
                    });
            }),
            (t.prototype.getCurrencyBySeatNum = function(t) {
                return this.tablePool.getCurrency(t);
            }),
            (t.prototype.onTablePool = function(t) {
                var e = t;
                if (null != e.betPoolInfos)
                    for (var i, r = e.betPoolInfos.length, s = 0; r > s; s++) {
                        i = e.betPoolInfos[s];
                        var n = i.playType;
                        this.tablePool.addBetToPool(
                            i.seatNum,
                            n,
                            i.amount,
                            i.currency,
                            !1
                        ),
                            i.loginname ===
                                Core.LoginStore.instance.loginName &&
                                (this.donePool.setAmount(n, i.amount),
                                this.lastPool.setAmount(n, i.amount),
                                i.amount > this.stakePool.getAmount(n) &&
                                    this.stakePool.setAmount(n, i.amount));
                    }
                this.diffPool.clear(),
                    this.dispatchAction(o.T),
                    Core.NonstopTimer.instance.setTimeout(
                        function() {
                            Core.globalStore.dispatchGlobal(o.zn);
                        },
                        this,
                        500
                    );
            }),
            t
        );
    })(o.BetStoreBaseBac);
    (o.BetTableStore = t),
        __reflect(t.prototype, 'VideoGameCore.BetTableStore');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(a) {
    var t = (function(o) {
        function t() {
            var t = o.call(this) || this;
            return (t.socketList = [a.BacGameSocket.instance]), t;
        }
        return (
            __extends(t, o),
            Object.defineProperty(t, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.init = function() {
                return this.initInstance(this);
            }),
            (t.prototype.onSocketConnected = function(t) {}),
            (t.prototype.PokerCardDelay = function(t, e) {
                var i = this;
                Core.NonstopTimer.instance.setTimeout(
                    function() {
                        i.pokerDataQue.push(t),
                            i.parsePokerDataQue(),
                            i.dispatchAction(a.vt);
                    },
                    this,
                    e
                );
            }),
            (t.prototype.onSocketData = function(t, e) {
                var i = this;
                if (
                    (o.prototype.onSocketData.call(this, t, e),
                    !t.vid || this.vid === t.vid)
                )
                    switch (t.respId) {
                        case a.pi:
                            var r = t,
                                s = a.StreamConfig.instance.getAverageDelay();
                            r.index >= 4 && (s += 1e3);
                            Core.NonstopTimer.instance.setTimeout(
                                function() {
                                    i.resetAll();
                                    for (
                                        var t = 0, e = 0;
                                        e < r.playerCardList.length;
                                        e++
                                    )
                                        0 != r.playerCardList[e] &&
                                            (t++,
                                            i.pokerDataQue.push(
                                                new a.PokerData(
                                                    r.playerCardList[e],
                                                    0,
                                                    t
                                                )
                                            ));
                                    for (
                                        var e = 0;
                                        e < r.bankerCardList.length;
                                        e++
                                    )
                                        0 != r.bankerCardList[e] &&
                                            (t++,
                                            i.pokerDataQue.push(
                                                new a.PokerData(
                                                    r.bankerCardList[e],
                                                    1,
                                                    t
                                                )
                                            ));
                                    i.parsePokerDataQue(),
                                        i.dispatchAction(a.vt);
                                },
                                this,
                                s
                            );
                            break;
                        case a.ki:
                            var n = t;
                            a.BetTableStore.instance.gmcode === n.code &&
                                ((this.resultTimer = Core.NonstopTimer.instance.setTimeout(
                                    function() {
                                        this.resetAll();
                                        for (
                                            var t = 0, e = 0;
                                            e < n.playerCardList.length;
                                            e++
                                        )
                                            0 != n.playerCardList[e] &&
                                                (t++,
                                                this.pokerDataQue.push(
                                                    new a.PokerData(
                                                        n.playerCardList[e],
                                                        0,
                                                        t
                                                    )
                                                ));
                                        for (
                                            var e = 0;
                                            e < n.bankerCardList.length;
                                            e++
                                        )
                                            0 != n.bankerCardList[e] &&
                                                (t++,
                                                this.pokerDataQue.push(
                                                    new a.PokerData(
                                                        n.bankerCardList[e],
                                                        1,
                                                        t
                                                    )
                                                ));
                                        this.parsePokerDataQue(),
                                            (this.pScore = n.pval),
                                            (this.bScore = n.bval),
                                            (this.pWin = !1),
                                            (this.bWin = !1),
                                            (this.tie = !1),
                                            this.pScore > this.bScore
                                                ? (this.pWin = !0)
                                                : this.pScore < this.bScore
                                                    ? (this.bWin = !0)
                                                    : this.pScore ===
                                                          this.bScore &&
                                                      (this.tie = !0),
                                            (this.bPair =
                                                (8 & n.overallRes) >> 3 === 1),
                                            (this.pPair =
                                                (16 & n.overallRes) >> 4 === 1),
                                            this.dispatchAction(a.vt);
                                    },
                                    this,
                                    a.StreamConfig.instance.getAverageDelay() -
                                        10
                                )),
                                (this.resetTimer = Core.NonstopTimer.instance.setTimeout(
                                    function() {
                                        this.resetAll(),
                                            this.dispatchAction(a.vt);
                                    },
                                    this,
                                    2e4
                                )));
                    }
            }),
            (t.prototype.release = function() {
                o.prototype.release.call(this);
            }),
            t
        );
    })(a.PokerBaseStore);
    (a.PokerStore = t), __reflect(t.prototype, 'VideoGameCore.PokerStore');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t = (function(r) {
        function t() {
            var t = r.call(this) || this;
            return (t.socketList = [s.BacGameSocket.instance]), t;
        }
        return (
            __extends(t, r),
            Object.defineProperty(t, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.init = function() {
                return this.initInstance(this);
            }),
            (t.prototype.onSocketData = function(t, e) {
                if (
                    (r.prototype.onSocketData.call(this, t, e),
                    !t.vid || this.vid === t.vid)
                )
                    switch (t.respId) {
                        case s.ki:
                            var i = t;
                            this.onGameResult(i, e);
                    }
            }),
            (t.prototype.release = function() {
                r.prototype.release.call(this);
            }),
            t
        );
    })(s.RoadMapBaseStore);
    (s.RoadMapStore = t), __reflect(t.prototype, 'VideoGameCore.RoadMapStore');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(e) {
    var t = (function(i) {
        function t() {
            var t = i.call(this) || this;
            return (t.socketList = [e.BacGameSocket.instance]), t;
        }
        return (
            __extends(t, i),
            Object.defineProperty(t, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.init = function() {
                return this.initInstance(this);
            }),
            (t.prototype.onSocketData = function(t, e) {
                i.prototype.onSocketData.call(this, t, e),
                    (t.vid && this.vid !== t.vid) || t.respId;
            }),
            (t.prototype.release = function() {
                i.prototype.release.call(this);
            }),
            t
        );
    })(e.RoomTimerBaseStore);
    (e.RoomTimerStore = t),
        __reflect(t.prototype, 'VideoGameCore.RoomTimerStore');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(e) {
    var t = (function(i) {
        function t() {
            var t = i.call(this) || this;
            return (t.socketList = [e.BacGameSocket.instance]), t;
        }
        return (
            __extends(t, i),
            Object.defineProperty(t, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.init = function() {
                return this.initInstance(this);
            }),
            (t.prototype.onSocketData = function(t, e) {
                i.prototype.onSocketData.call(this, t, e),
                    (t.vid && this.vid !== t.vid) || t.respId;
            }),
            t
        );
    })(e.TableSeatBaseStore);
    (e.TableSeatStore = t),
        __reflect(t.prototype, 'VideoGameCore.TableSeatStore');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(c) {
        function t(t) {
            void 0 === t && (t = i.DEFAULT_ROOT_ID);
            var e = c.call(this, t) || this;
            return (
                (e.scaleParams = {
                    sx: 0,
                    sy: 0,
                    swidth: i.DEFAULT_WIDTH,
                    sheight: i.DEFAULT_HIGHT
                }),
                e
            );
        }
        return (
            __extends(t, c),
            (t.prototype.clip = function(t, e, i, r, s, n, o) {
                (this.scaleParams = { sx: t, sy: e, swidth: i, sheight: r }),
                    this.updatePosition();
            }),
            (t.prototype.resize = function(t, e) {
                (this.width = t),
                    (this.height = e),
                    (this.scaleParams.swidth = this.width),
                    (this.scaleParams.sheight = this.height),
                    this.onResize();
            }),
            (t.prototype.onResize = function() {
                c.prototype.onResize.call(this);
                var t = document.getElementById(this.rootId),
                    e = t.firstElementChild;
                if (e) {
                    var i = parseInt(e.style.left),
                        r = parseInt(e.style.top);
                    this.containerEle &&
                        ((this.containerEle.style.width = e.style.width),
                        (this.containerEle.style.height = e.style.height)),
                        (this.originWidth = parseInt(e.style.width)),
                        (this.originHeight = parseInt(e.style.height));
                    var s = '0px',
                        n = '0px',
                        o = e.style.width,
                        a = e.style.height,
                        h = this.originWidth,
                        u = this.originHeight;
                    i > 0 &&
                        ((s = i + 'px'),
                        (o = i + this.originWidth + 'px'),
                        (h = this.originWidth + 2 * i)),
                        r > 0 &&
                            ((n = r + 'px'),
                            (a = r + this.originHeight + 'px'),
                            (u = this.originHeight + 2 * r)),
                        (t.style.clip =
                            'rect(' + n + ',' + o + ',' + a + ',' + s + ')'),
                        (t.style.width = h + 'px'),
                        (t.style.height = u + 'px'),
                        this.updatePosition();
                }
            }),
            (t.prototype.updatePosition = function() {
                this.scalableEle &&
                    ((this.scalableEle.style.width =
                        (this.originWidth * this.width) /
                            this.scaleParams.swidth +
                        'px'),
                    (this.scalableEle.style.height =
                        (this.originHeight * this.height) /
                            this.scaleParams.sheight +
                        'px'),
                    (this.scalableEle.style.left =
                        '-' +
                        (this.scaleParams.sx / this.scaleParams.swidth) *
                            this.originWidth +
                        'px'),
                    (this.scalableEle.style.top =
                        '-' +
                        (this.scaleParams.sy / this.scaleParams.sheight) *
                            this.originHeight +
                        'px'),
                    (this.scalableEle.style.position = 'absolute'));
            }),
            (t.prototype.bindContainerElement = function(t) {
                this.containerEle = t;
            }),
            (t.prototype.unbindContainerElement = function(t) {
                this.containerEle = null;
            }),
            (t.prototype.bindScalableElement = function(t) {
                this.scalableEle = t;
            }),
            (t.prototype.unbindScalableElement = function() {
                this.scalableEle = null;
            }),
            (t.prototype.$update = function(t, e) {
                var i = c.prototype.$update.call(this, t, e);
                return this.onResize(), i;
            }),
            t
        );
    })(Core.WebNode);
    (i.ScalableWebNode = t),
        __reflect(t.prototype, 'VideoGameCore.ScalableWebNode');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                Object.defineProperty(e, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (e.init = function() {
                    return this.initInstance(this);
                }),
                e
            );
        })(t.BetTableStoreBase);
        (t.BetTableStore = e),
            __reflect(e.prototype, 'VideoGameCore.Bj.BetTableStore');
    })((e = t.Bj || (t.Bj = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(a) {
    var t;
    !(function(o) {
        var t = (function(e) {
            function t() {
                var t = e.call(this) || this;
                return (
                    (t.loginType = 0),
                    (t.seatNum = 0),
                    (t.socketList = [a.BjGameSocket.instance]),
                    t
                );
            }
            return (
                __extends(t, e),
                (t.prototype.onSocketConnected = function(t) {
                    t.writeBytes(
                        a.getCMDClientLoginGame(
                            Core.LoginStore.instance.loginName,
                            Core.LoginStore.instance.token,
                            Core.gn
                        )
                    );
                }),
                (t.prototype.onSocketData = function(t, e) {
                    switch (t.respId) {
                        case a.Se:
                            var i = t;
                            0 == i.retCode
                                ? this.enterTable(this.loginType, this.seatNum)
                                : (Core.globalStore.dispatchGlobal(a.pn),
                                  e.killSocket(),
                                  dclib('LOGIN Game FAIL ' + i.retCode),
                                  Core.LoginStore.instance.renewToken(
                                      function() {
                                          e.autoConnect();
                                      },
                                      this
                                  ));
                            break;
                        case a.BJ_ENTER_TABLE_RESP:
                            var r = t;
                            0 == r.retCode || 23 == r.retCode
                                ? ((this.seatNum = r.seat),
                                  (this.loginType = a.isValidSeatNum(
                                      this.seatNum
                                  )
                                      ? 2
                                      : 1),
                                  o.TableSeatStore.instance.setPlayerSeat(
                                      Core.LoginStore.instance.loginName,
                                      r.seat
                                  ),
                                  this.dispatchAction(a.de, r.seat),
                                  e.writeBytes(a.getCMDGetGameCurrentStatus()),
                                  Core.NonstopTimer.instance.setTimeout(
                                      function() {
                                          Core.globalStore.dispatchGlobal(a.zn);
                                      },
                                      this,
                                      1e3
                                  ))
                                : Core.globalStore.dispatchGlobal(
                                      a.pn,
                                      r.retCode
                                  );
                            break;
                        case a.Qi:
                            var s = t;
                            this.dispatchAction(a.kn, {
                                roundNum: s.roundNum,
                                leftNum: s.kickNum - s.roundNum
                            });
                            break;
                        case a.BJ_PLAYER_ENTRY_LEAVE:
                            var n = t;
                            n.players.length > 0 &&
                                -2 === n.players[0].action &&
                                n.players[0].loginname ===
                                    Core.LoginStore.instance.loginName &&
                                this.dispatchAction(a.wn);
                    }
                }),
                (t.prototype.enterTable = function(t, e) {
                    void 0 === e && (e = 0),
                        a.BjGameSocket.instance.writeBytes(
                            a.getCMDBjEnterTable(this.vid, t, e)
                        );
                }),
                (t.prototype.release = function() {
                    e.prototype.release.call(this), this.dispatchAction(a.O);
                }),
                (t.prototype.onSocketDie = function(t) {
                    t === a.BjGameSocket.instance &&
                        Core.globalStore.dispatchGlobal(a.oe);
                }),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                t
            );
        })(Core.NetworkStoreBase);
        (o.BjStore = t), __reflect(t.prototype, 'VideoGameCore.Bj.BjStore');
    })((t = a.Bj || (a.Bj = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                Object.defineProperty(e, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (e.init = function() {
                    return this.initInstance(this);
                }),
                e
            );
        })(t.PokerStoreBase);
        (t.PokerStore = e),
            __reflect(e.prototype, 'VideoGameCore.Bj.PokerStore');
    })((e = t.Bj || (t.Bj = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t;
    !(function(t) {
        var e = (function(r) {
            function t() {
                var t = r.call(this) || this;
                return (t.socketList = [s.BjGameSocket.instance]), t;
            }
            return (
                __extends(t, r),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.onSocketData = function(t, e) {
                    if (
                        (r.prototype.onSocketData.call(this, t, e),
                        !t.vid || this.vid === t.vid)
                    )
                        switch (t.respId) {
                            case s.xt:
                                var i = t;
                                11 == i.status && this.resetByAction();
                        }
                }),
                (t.prototype.release = function() {
                    r.prototype.release.call(this);
                }),
                t
            );
        })(s.RoadMapBaseStore);
        (t.RoadMapStore = e),
            __reflect(e.prototype, 'VideoGameCore.Bj.RoadMapStore');
    })((t = s.Bj || (s.Bj = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(n) {
    var t;
    !(function(t) {
        function r() {
            var t = e();
            null == t && (t = { double: 0, split: 0 }),
                n.BjGameSocket.instance.writeBytes(n.getCMDBJSideBetSetting(t));
        }
        function e() {
            return Core.StorageManager.instance.getObject(
                n.GAME_BJ + Core.LoginStore.instance.loginName,
                null
            );
        }
        function i(t, e) {
            void 0 === t && (t = !1), void 0 === e && (e = !1);
            var i = { double: t ? 2 : 0, split: e ? 1 : 0 };
            Core.StorageManager.instance.setObject(
                n.GAME_BJ + Core.LoginStore.instance.loginName,
                i
            ),
                r();
        }
        var s = (function(i) {
            function t() {
                var t = i.call(this) || this;
                return (t.socketList = [n.BjGameSocket.instance]), t;
            }
            return (
                __extends(t, i),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.onSocketData = function(t, e) {
                    if (
                        (i.prototype.onSocketData.call(this, t, e),
                        !t.vid || this.vid === t.vid)
                    )
                        switch (t.respId) {
                            case n.BJ_SNAPSHOT:
                                r(), this.onGameCurrentStatus(t);
                                break;
                            case n.xt:
                                this.onVideoStatus(t);
                                break;
                            case n.BJ_START_GAME:
                                this.onGameStart(t);
                        }
                }),
                (t.prototype.updateTimeout = function(t, e) {
                    (this.maxTimeout = t > 0 ? t : 25),
                        (this.timeout = e),
                        this.startCountDown();
                }),
                (t.prototype.onGameStartDo = function() {
                    this.gameStatus = 5;
                }),
                (t.prototype.countDown = function() {
                    this.timeout > 0
                        ? (this.timeout--, this.dispatchAction(n._t))
                        : (Core.NonstopTimer.instance.clearInterval(
                              this.countDownInterval
                          ),
                          10 === this.gameStatus && this.dispatchAction(n.w));
                }),
                (t.prototype.onVideoStatus = function(t) {
                    var e = t;
                    (this.gameStatus = e.status),
                        this.updateTimeout(e.max_timeout, e.timeout),
                        11 === e.status
                            ? this.dispatchAction(n.it)
                            : 20 === e.status &&
                              this.dispatchAction(n.w, e.vid),
                        this.dispatchAction(n.st, e.vid);
                }),
                Object.defineProperty(t.prototype, 'isBettingStatus', {
                    get: function() {
                        return 5 === this.gameStatus || 10 === this.gameStatus;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                t
            );
        })(n.RoomTimerBaseStore);
        (t.RoomTimerStore = s),
            __reflect(s.prototype, 'VideoGameCore.Bj.RoomTimerStore'),
            (t.sendSideBetSetting = r),
            (t.getBJSetting = e),
            (t.saveBJSetting = i);
    })((t = n.Bj || (n.Bj = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(C) {
    var t;
    !(function(t) {
        var e = (function(f) {
            function t() {
                var t = f.call(this) || this;
                return (
                    (t.userListRecived = !1),
                    (t.socketList = [C.BjGameSocket.instance]),
                    (t.tableCode = C.GAME_BJ),
                    t
                );
            }
            return (
                __extends(t, f),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.setPlayerSeat = function(t, e) {
                    var i = this.getPlayer(t);
                    null != i && (i.seat = e);
                }),
                (t.prototype.onSocketData = function(t, e) {
                    if (
                        (f.prototype.onSocketData.call(this, t, e),
                        !t.vid || this.vid === t.vid)
                    )
                        switch (t.respId) {
                            case C.Ke:
                                var i = t;
                                this.tableCode = i.tablecode;
                                break;
                            case C.BJ_LAST_POSITION:
                            case C.BJ_USER_LIST:
                            case C.BJ_PLAYER_ENTRY_LEAVE:
                                var r = t,
                                    s = [];
                                if (r.players.length > 0)
                                    for (var n = 0; n < r.players.length; n++)
                                        this.setPlayerData(r.players[n]),
                                            s.push(r.players[n].loginname);
                                if (t.respId == C.BJ_USER_LIST) {
                                    this.userListRecived = !0;
                                    for (
                                        var o = this.allPlayerMap.keys.slice(),
                                            a = 0;
                                        a < o.length;
                                        a++
                                    )
                                        s.indexOf(o[a]) < 0 &&
                                            o[a] !=
                                                Core.LoginStore.instance
                                                    .loginName &&
                                            this.setPlayerLeave(o[a]);
                                }
                                this.dispatchAction(C.zt, this.getPlayerList());
                                break;
                            case C.Ki:
                                var h = t;
                                this.updatePlayerCredit(h.name, h.left);
                                break;
                            case C.BJ_PAYOUT_ME:
                                var u = t;
                                this.updatePlayerCredit(
                                    Core.LoginStore.instance.loginName,
                                    u.balance,
                                    C.StreamConfig.instance.getAverageDelay()
                                );
                                break;
                            case C.BJ_PAYOUT_OTHER:
                                var c = t;
                                this.updatePlayerCredit(
                                    c.loginname,
                                    c.credit,
                                    C.StreamConfig.instance.getAverageDelay()
                                );
                        }
                }),
                t
            );
        })(C.TableSeatBaseStore);
        (t.TableSeatStore = e),
            __reflect(e.prototype, 'VideoGameCore.Bj.TableSeatStore');
    })((t = C.Bj || (C.Bj = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(C) {
    var t;
    !(function(c) {
        var t = (function(f) {
            function t() {
                var t = f.call(this) || this;
                return (
                    (t.playtypes = C.BET_PLAYTYPES),
                    (t.stakePool = new C.StakePoolBull()),
                    (t.donePool = new C.StakePoolBull()),
                    (t.diffPool = new C.StakePoolBull()),
                    (t.lastPool = new C.StakePoolBull()),
                    (t.betInfos = new Core.HashMap()),
                    (t.socketList = [C.BullGameSocket.instance]),
                    t
                );
            }
            return (
                __extends(t, f),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                Object.defineProperty(t.prototype, 'repeatEnabled', {
                    get: function() {
                        for (
                            var t = this.lastPool.allAmount,
                                e = this.getDisablePlayTypes(),
                                i = 0,
                                r = 0;
                            r < e.length;
                            r++
                        )
                            if (((i = e[r]), this.lastPool.getAmount(i) > 0))
                                return !1;
                        return (
                            this.betEnabled &&
                            this.stakePool.allAmount <= 0 &&
                            t > 0 &&
                            t <= C.UserStore.instance.balance
                        );
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, 'roomTimerStore', {
                    get: function() {
                        return c.RoomTimerStore.instance;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.onSocketData = function(t, e) {
                    if (
                        (f.prototype.onSocketData.call(this, t, e),
                        !t.vid || this.vid === t.vid)
                    )
                        switch (t.respId) {
                            case C.ft:
                                break;
                            case C.ue:
                                this.m(t);
                                break;
                            case C.rr:
                                this._(t);
                                break;
                            case C.W:
                                var i = t;
                                (this.payoutHashMap = i.payoutHashMap),
                                    (this.payout = i.payout),
                                    this.V(i);
                                break;
                            case C.ce:
                                var r = t;
                                if (null != r.betPoolInfos)
                                    for (
                                        var s, n = r.betPoolInfos.length, o = 0;
                                        n > o;
                                        o++
                                    ) {
                                        s = r.betPoolInfos[o];
                                        var a = s.playType;
                                        s.loginname ===
                                            Core.LoginStore.instance
                                                .loginName &&
                                            (this.donePool.setAmount(
                                                a,
                                                s.amount
                                            ),
                                            this.lastPool.setAmount(
                                                a,
                                                s.amount
                                            ),
                                            s.amount >
                                                this.stakePool.getAmount(a) &&
                                                this.stakePool.setAmount(
                                                    a,
                                                    s.amount
                                                ),
                                            this.dispatchAction(C.jn));
                                    }
                                this.diffPool.clear(), this.dispatchAction(C.T);
                                break;
                            case C.Ti:
                                var h = t;
                                (this.betInfos = h.betInfoMap),
                                    this.dispatchAction(C.T);
                                break;
                            case C.nr:
                                for (
                                    var u = t, o = 0;
                                    o < u.betInfos.length;
                                    o++
                                ) {
                                    var c = u.betInfos[o];
                                    u.loginname ===
                                        Core.LoginStore.instance.loginName &&
                                        (this.stakePool.setAmount(
                                            c.playtype,
                                            c.total_jetton_cny
                                        ),
                                        this.donePool.setAmount(
                                            c.playtype,
                                            c.total_jetton_cny
                                        ),
                                        this.lastPool.setAmount(
                                            c.playtype,
                                            c.total_jetton_cny
                                        ));
                                }
                                this.dispatchAction(C.Y);
                        }
                }),
                (t.prototype.getBetLimitByPlayType = function(t) {
                    var e = c.BullStore.instance.personalLimitMap.get(t),
                        i = e ? e.min : 0,
                        r = e ? e.max : Number.MAX_VALUE,
                        s = c.BullStore.instance.tableLimitMap.get(t),
                        n = s ? s.min : 0,
                        o = s ? s.max : Number.MAX_VALUE,
                        a = Math.max(i, n),
                        h = Math.min(r, o),
                        u = new C.BetLimit();
                    return (u.min = a), (u.max = h), u;
                }),
                (t.prototype.getAmountByPlaytype = function(t, e) {
                    void 0 === e && (e = 0);
                    var i;
                    0 === e
                        ? (i = this.stakePool)
                        : 1 === e && (i = this.donePool);
                    var r = i.getAmount(t),
                        s = 0;
                    return (
                        this.isDoublePlaytype(t) && (s = 4 * r),
                        { amount: r, pendingAmount: s }
                    );
                }),
                (t.prototype.addChipByPlayType = function(t, e) {
                    for (var i = [], r = 2; r < arguments.length; r++)
                        i[r - 2] = arguments[r];
                    if (this.betEnabled) {
                        e || (e = C.VideoPlazaStore.instance.selectedChipValue);
                        var s = this.calculateAllIn(t, e);
                        if (s < C.getMinBalance())
                            return void this.dispatchAction(C.i);
                        if ('MYR' === C.VideoPlazaStore.instance.currencyCode) {
                            var n = s;
                            s = s > n + 0.5 ? n + 0.5 : n;
                        } else s = Math.floor(s);
                        var o =
                            this.stakePool.getAmount.apply(
                                this.stakePool,
                                [t].concat(i)
                            ) + s;
                        dclib(o, s, e),
                            1 === this.checkLimit(t, o)
                                ? (this.dispatchAction(C.r),
                                  (o = this.getBetLimitByPlayType(t).max))
                                : e > s && this.dispatchAction(C.s);
                        var a = this.stakePool.setAmount.apply(
                            this.stakePool,
                            [t, o].concat(i)
                        );
                        return (
                            this.dispatchAction(C.n, {
                                amount: o,
                                pendingAmount: 4 * o,
                                playtype: t
                            }),
                            a
                        );
                    }
                }),
                (t.prototype.repeatBet = function() {
                    if (this.betEnabled) {
                        if (
                            this.lastPool.allAmount >
                            C.UserStore.instance.balance
                        )
                            return void this.dispatchAction(C.i);
                        this.stakePool.copy(this.lastPool);
                        for (
                            var t,
                                e = [],
                                i = this.stakePool.getAllStakeData(),
                                r = 0;
                            r < i.length;
                            r++
                        )
                            (t = i[r]),
                                e.indexOf(t.playType) < 0 && e.push(t.playType);
                        this.dispatchAction(C.o, e);
                    }
                }),
                (t.prototype.calculateAllIn = function(t, e) {
                    var i = C.UserStore.instance.balance,
                        r = e;
                    this.isDoublePlaytype(t) && (r = 5 * e),
                        (this.diffPool = this.stakePool.calculateDiff(
                            this.donePool
                        ));
                    var s = this.diffPool.allAmount;
                    if (s + r > i) {
                        var n = i - s;
                        return this.isDoublePlaytype(t) && (n /= 5), n;
                    }
                    return e;
                }),
                (t.prototype.isDoublePlaytype = function(t) {
                    return [
                        C.PLAYTYPE_NN_PLAYER_1_DOUBLE,
                        C.PLAYTYPE_NN_PLAYER_2_DOUBLE,
                        C.PLAYTYPE_NN_PLAYER_3_DOUBLE,
                        C.PLAYTYPE_NN_BANKER_1_DOUBLE,
                        C.PLAYTYPE_NN_BANKER_2_DOUBLE,
                        C.PLAYTYPE_NN_BANKER_3_DOUBLE
                    ].indexOf(t) > -1
                        ? !0
                        : !1;
                }),
                (t.prototype.confirmBet = function() {
                    var r = this;
                    this.dispatchAction(C.h),
                        this.confirmEnabled &&
                            ((this.diffPool = this.stakePool.calculateDiff(
                                this.donePool
                            )),
                            this.diffPool
                                .getAllStakeData()
                                .forEach(function(t) {
                                    var e = t.playType;
                                    if (!(t.amount <= 0))
                                        if (
                                            0 ===
                                            r.checkLimit(
                                                e,
                                                r.stakePool.getAmount(e)
                                            )
                                        )
                                            r.sendBetToServer(t);
                                        else {
                                            var i = r.isDoublePlaytype(
                                                t.playType
                                            )
                                                ? 5 * C.getMinBalance()
                                                : C.getMinBalance();
                                            e ===
                                                r.stakePool.getLastBetPlayType() &&
                                            C.UserStore.instance.balance -
                                                r.diffPool.allAmount <
                                                i
                                                ? r.sendBetToServer(t)
                                                : (r.cancelBetByPlayType(e),
                                                  r.dispatchAction(C.r));
                                        }
                                }));
                }),
                (t.prototype.sendBetToServer = function(t) {
                    if (
                        (f.prototype.sendBetToServer.call(this, t),
                        this.gameSocket.connected)
                    ) {
                        var e = t.playType;
                        C.BullGameSocket.instance.writeBytes(
                            C.getCMDGameBetExt(this.gmcode, e, t.amount, t.seq)
                        );
                    }
                }),
                (t.prototype.release = function() {
                    f.prototype.release.call(this);
                }),
                t
            );
        })(C.BetStoreBase);
        (c.BetStore = t), __reflect(t.prototype, 'VideoGameCore.Bull.BetStore');
    })((t = C.Bull || (C.Bull = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(h) {
    var t;
    !(function(t) {
        var e = (function(e) {
            function t() {
                var t = e.call(this) || this;
                return (
                    (t.loginType = 0),
                    (t.socketList = [h.BullGameSocket.instance]),
                    (t.loginType = 2),
                    (t.tableLimitMap = new Core.HashMap()),
                    (t.personalLimitMap = new Core.HashMap()),
                    t
                );
            }
            return (
                __extends(t, e),
                (t.prototype.onSocketConnected = function(t) {
                    t.writeBytes(
                        h.getCMDClientLoginGame(
                            Core.LoginStore.instance.loginName,
                            Core.LoginStore.instance.token,
                            Core.Bn
                        )
                    );
                }),
                (t.prototype.onSocketData = function(t, e) {
                    switch (t.respId) {
                        case h.Se:
                            var i = t;
                            0 == i.retCode
                                ? h.BullGameSocket.instance.writeBytes(
                                      h.getCMDAutoEnterTable(this.vid)
                                  )
                                : (e.killSocket(),
                                  dclib('LOGIN Game FAIL ' + i.retCode),
                                  Core.LoginStore.instance.renewToken(
                                      function() {
                                          e.autoConnect();
                                      },
                                      this
                                  ));
                            break;
                        case h.Ee:
                            var r = t;
                            (this.tableCode = r.tableCode),
                                this.dispatchAction(h.de),
                                e.writeBytes(h.getCMDGetGameCurrentStatus()),
                                Core.NonstopTimer.instance.setTimeout(
                                    function() {
                                        Core.globalStore.dispatchGlobal(h.zn);
                                    },
                                    this,
                                    1e3
                                );
                            break;
                        case h.Ae:
                            var s = t;
                            this.dispatchAction(h.kn, s.roundNum);
                            break;
                        case h.gt:
                            var n = t;
                            -2 === n.action &&
                                n.loginname ===
                                    Core.LoginStore.instance.loginName &&
                                this.dispatchAction(h.wn);
                            break;
                        case h.Ue:
                            var o = t;
                            this.personalLimitMap = o.limitList;
                            break;
                        case h.Ke:
                            var a = t;
                            this.tableLimitMap = a.limitList;
                    }
                }),
                (t.prototype.combinations = function(t, e) {
                    var o = [];
                    return (
                        (function t(e, i, r) {
                            if (0 == r) return o.push(e);
                            for (var s = 0, n = i.length; n - r >= s; s++)
                                t(e.concat(i[s]), i.slice(s + 1), r - 1);
                        })([], t, e),
                        o
                    );
                }),
                (t.prototype.release = function() {
                    e.prototype.release.call(this);
                }),
                (t.prototype.onSocketDie = function(t) {
                    t === h.BullGameSocket.instance &&
                        Core.globalStore.dispatchGlobal(h.oe);
                }),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                t
            );
        })(Core.NetworkStoreBase);
        (t.BullStore = e),
            __reflect(e.prototype, 'VideoGameCore.Bull.BullStore');
    })((t = h.Bull || (h.Bull = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(l) {
    var t;
    !(function(C) {
        var t = (function(e) {
            function t() {
                var t = e.call(this) || this;
                return (
                    (t.socketList = [l.BullGameSocket.instance]),
                    (t.cardList = []),
                    (t.result = []),
                    (t.currentIndex = -1),
                    t
                );
            }
            return (
                __extends(t, e),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.resetCardList = function() {
                    (this.cardList = []), (this.currentIndex = -1);
                    for (var t = 0; 21 > t; t++) this.cardList.push(0);
                    this.result = [];
                    for (
                        var e = this.cardList.slice(1, 21),
                            i = 5,
                            t = 0,
                            r = e.length;
                        r > t;
                        t += i
                    ) {
                        var s = e.slice(t, t + i);
                        this.result.push({
                            cards: s,
                            cardType: '',
                            result: null
                        });
                    }
                }),
                (t.prototype.onSocketConnected = function(t) {}),
                (t.prototype.onSocketData = function(t, e) {
                    var i = this;
                    if (!t.vid || this.vid === t.vid) {
                        var r, s;
                        switch (t.respId) {
                            case l.ft:
                                this.resetCardList(),
                                    this.dispatchEventWith(l.Z);
                                break;
                            case l.Ct:
                                this.resetCardList();
                                break;
                            case l.Ye:
                                var n = t;
                                if (void 0 !== this.cardList[n.index]) {
                                    this.cardList[n.index] = n.card;
                                    var o = Math.ceil(n.index / 5) - 1,
                                        a = (n.index - 1) % 5;
                                    void 0 !== this.result[o] &&
                                        void 0 !== this.result[o].cards[a] &&
                                        ((this.result[o].cards[a] = n.card),
                                        (this.currentIndex = o));
                                }
                                this.formatResult(), this.dispatchAction(l.vt);
                                break;
                            case l.mt:
                                var h = t;
                                if (0 !== h.status && h.cardlist) {
                                    this.cardList = h.cardlist;
                                    var u = this.cardList.slice(1, 21);
                                    this.result = [];
                                    var c = 5;
                                    for (r = 0, s = u.length; s > r; r += c) {
                                        var f = u.slice(r, r + c);
                                        this.result.push({
                                            cards: f,
                                            cardType: '',
                                            result: null
                                        });
                                    }
                                    this.formatResult(),
                                        this.dispatchAction(l.vt);
                                }
                                break;
                            case l.rr:
                                var C = t;
                                for (
                                    this.result.length > 0, r = 0;
                                    r < this.result.length;
                                    r++
                                )
                                    this.result[r].result = C.beadData;
                                (this.currentIndex = -1),
                                    Core.NonstopTimer.instance.setTimeout(
                                        function() {
                                            i.dispatchAction(l.P, {
                                                beadData: C.beadData
                                            });
                                        },
                                        this,
                                        l.StreamConfig.instance.getAverageDelay()
                                    );
                        }
                    }
                }),
                (t.prototype.formatResult = function() {
                    for (var t = 0; t < this.result.length; t++) {
                        for (
                            var e = this.result[t],
                                i = C.BullStore.instance.combinations(
                                    e.cards,
                                    3
                                ),
                                r = !0,
                                s = 0;
                            s < i.length;
                            s++
                        ) {
                            for (
                                var n = i[s], o = 0, a = 0;
                                a < n.length;
                                a++
                            ) {
                                var h = 15 & n[a];
                                h >= 10 && (h = 10), (o += h);
                            }
                            o % 10 == 0 && (r = !1);
                        }
                        if (e.cards[4])
                            if (r) e.totalPoint = 0;
                            else {
                                for (
                                    var u = 0, a = 0;
                                    a < e.cards.length;
                                    a++
                                ) {
                                    var c = 15 & e.cards[a];
                                    u += c >= 10 ? 10 : c;
                                }
                                var f = u % 10;
                                f > 0 &&
                                !(
                                    (15 & e.cards[0]) >= 11 &&
                                    (15 & e.cards[1]) >= 11 &&
                                    (15 & e.cards[2]) >= 11 &&
                                    (15 & e.cards[3]) >= 11 &&
                                    (15 & e.cards[4]) >= 11
                                )
                                    ? (e.totalPoint = u % 10)
                                    : (15 & e.cards[0]) >= 11 &&
                                      (15 & e.cards[1]) >= 11 &&
                                      (15 & e.cards[2]) >= 11 &&
                                      (15 & e.cards[3]) >= 11 &&
                                      (15 & e.cards[4]) >= 11
                                        ? (e.totalPoint = 50)
                                        : (e.totalPoint = 20);
                            }
                        this.result[t] = e;
                    }
                }),
                (t.prototype.release = function() {
                    e.prototype.release.call(this);
                }),
                t
            );
        })(Core.NetworkStoreBase);
        (C.PokerStore = t),
            __reflect(t.prototype, 'VideoGameCore.Bull.PokerStore');
        var e = (function() {
            function t(t, e, i) {
                void 0 === i && (i = -1),
                    (this.card = t),
                    (this.who = e),
                    (this.index = i),
                    (this.cardValue = 15 & t);
            }
            return t;
        })();
        (C.PokerData = e),
            __reflect(e.prototype, 'VideoGameCore.Bull.PokerData');
    })((t = l.Bull || (l.Bull = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(n) {
    var t;
    !(function(t) {
        var e = (function(s) {
            function t() {
                var t = s.call(this) || this;
                return (t.socketList = [n.BullGameSocket.instance]), t;
            }
            return (
                __extends(t, s),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.onSocketData = function(t, e) {
                    if (
                        (s.prototype.onSocketData.call(this, t, e),
                        !t.vid || this.vid === t.vid)
                    )
                        switch (t.respId) {
                            case n.er:
                                var i = t;
                                this.dispatchAction(n.rt, i.vid);
                                break;
                            case n.rr:
                                var r = t;
                                this.dispatchAction(n.rt, r.vid);
                        }
                }),
                (t.prototype.release = function() {
                    s.prototype.release.call(this);
                }),
                t
            );
        })(n.RoadMapBaseStore);
        (t.RoadMapStore = e),
            __reflect(e.prototype, 'VideoGameCore.Bull.RoadMapStore');
    })((t = n.Bull || (n.Bull = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t;
    !(function(t) {
        var e = (function(i) {
            function t() {
                var t = i.call(this) || this;
                return (t.socketList = [r.BullGameSocket.instance]), t;
            }
            return (
                __extends(t, i),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.onSocketData = function(t, e) {
                    i.prototype.onSocketData.call(this, t, e),
                        (t.vid && this.vid !== t.vid) || t.respId;
                }),
                (t.prototype.release = function() {
                    i.prototype.release.call(this);
                }),
                t
            );
        })(r.RoomTimerBaseStore);
        (t.RoomTimerStore = e),
            __reflect(e.prototype, 'VideoGameCore.Bull.RoomTimerStore');
    })((t = r.Bull || (r.Bull = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(f) {
    var t;
    !(function(c) {
        var t = (function(i) {
            function t() {
                var t = i.call(this) || this;
                return (
                    (t.playtypes = f.BET_PLAYTYPES),
                    (t.tablePool = new f.TablePool()),
                    (t.videoPool = new f.VideoPool()),
                    (t.socketList = [c.CbacGameSocket.instance]),
                    t
                );
            }
            return (
                __extends(t, i),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                Object.defineProperty(t.prototype, 'mySeatNum', {
                    get: function() {
                        var t = c.TableSeatStore.instance.getPlayer(
                            Core.LoginStore.instance.loginName
                        );
                        return null != t ? t.seat : 0;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, 'roomTimerStore', {
                    get: function() {
                        return c.RoomTimerStore.instance;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.isBetEnabled = function() {
                    var t = i.prototype.isBetEnabled.call(this);
                    return 1 !== c.CbacStore.instance.loginType ||
                        f.PCGameConfig.instance.checkCanSideBet()
                        ? t
                        : !1;
                }),
                (t.prototype.getAmountByType = function(t, e) {
                    return (
                        void 0 === e && (e = 0),
                        0 === e || e === this.mySeatNum
                            ? this.stakePool.getAmount(t)
                            : this.tablePool.getAmount(e, t)
                    );
                }),
                (t.prototype.getDisablePlayTypes = function() {
                    var t = [];
                    return (
                        f.PlazaRoadStore.instance.getRoadData(this.vid) &&
                            f.PlazaRoadStore.instance.getRoadData(this.vid)
                                .totalCount >= f.MAX_BET_GAME_BAC_BIG_SMALL &&
                            t.push(f.PLAYTYPE_BIG, f.PLAYTYPE_SMALL),
                        t
                    );
                }),
                (t.prototype.getBetLimitByPlayType = function(t) {
                    return f.UserStore.instance.getBetLimitByPlayType(
                        t,
                        c.CbacStore.instance.tableCode,
                        c.CbacStore.instance.loginType,
                        this.vid
                    );
                }),
                (t.prototype.reset = function() {
                    i.prototype.reset.call(this),
                        this.tablePool.clear(),
                        this.videoPool.clear();
                }),
                (t.prototype.sendBetToServer = function(t) {
                    if (
                        (i.prototype.sendBetToServer.call(this, t),
                        this.gameSocket.connected)
                    ) {
                        var e = t.playType;
                        e === f.PLAYTYPE_BANKER &&
                            this.noComm &&
                            (e = f.PLAYTYPE_BANKER_NO_COMMISSION),
                            c.CbacGameSocket.instance.writeBytes(
                                f.getCMDGameBetExt(
                                    this.gmcode,
                                    e,
                                    t.amount,
                                    t.seq
                                )
                            );
                    }
                }),
                (t.prototype.onSocketData = function(t, e) {
                    if (!this.isInvalidVid(t)) {
                        var i;
                        switch (t.respId) {
                            case f.ue:
                                this.m(t);
                                break;
                            case f.Nt:
                                this._(t);
                                break;
                            case f.W:
                                this.V(t);
                                break;
                            case f.fe:
                                var r = t;
                                if (null != r.betPoolInfos) {
                                    var s,
                                        n = r.betPoolInfos.length;
                                    for (i = 0; n > i; i++) {
                                        s = r.betPoolInfos[i];
                                        var o = s.playType,
                                            a = c.TableSeatStore.instance.getPlayer(
                                                s.loginname
                                            ),
                                            h = f.isVipVisitPlayer(
                                                this.vid,
                                                s.tableCode
                                            );
                                        h ||
                                            this.tablePool.addBetToPool(
                                                s.seatNum,
                                                o,
                                                s.amount,
                                                s.currency,
                                                !1
                                            ),
                                            this.videoPool.addBetToPool(
                                                s.loginname,
                                                s.nickname,
                                                o,
                                                s.amount,
                                                s.currency
                                            ),
                                            s.loginname ===
                                                Core.LoginStore.instance
                                                    .loginName &&
                                                (this.donePool.setAmount(
                                                    o,
                                                    s.amount
                                                ),
                                                this.lastPool.setAmount(
                                                    o,
                                                    s.amount
                                                ),
                                                s.amount >
                                                    this.stakePool.getAmount(
                                                        o
                                                    ) &&
                                                    this.stakePool.setAmount(
                                                        o,
                                                        s.amount
                                                    ));
                                    }
                                }
                                this.diffPool.clear(), this.dispatchAction(f.T);
                                break;
                            case f.kt:
                                var u = t,
                                    a = c.TableSeatStore.instance.getPlayer(
                                        u.name
                                    );
                                a &&
                                    (this.tablePool.addBetToPool(
                                        a.seat,
                                        u.playType,
                                        u.value,
                                        u.currency
                                    ),
                                    this.videoPool.addBetToPool(
                                        u.name,
                                        u.nick,
                                        u.playType,
                                        u.value,
                                        u.currency
                                    ),
                                    this.dispatchAction(f.T, u.seatNum));
                                break;
                            case f.wt:
                                this.p(t);
                        }
                    }
                }),
                (t.prototype.payoutTimeoutDo = function(t) {
                    i.prototype.payoutTimeoutDo.call(this, t),
                        this.dispatchAction(f.k, {
                            seatNum: this.mySeatNum,
                            payouts: t.ptPayouts
                        });
                }),
                (t.prototype.payoutOtherTimeoutDo = function(t) {
                    var e = c.TableSeatStore.instance.getPlayer(t.loginname);
                    null != e &&
                        this.dispatchAction(f.k, {
                            seatNum: e.seat,
                            payouts: t.ptPayouts
                        });
                }),
                (t.prototype.getCurrencyBySeatNum = function(t) {
                    return this.tablePool.getCurrency(t);
                }),
                (t.prototype.startGame = function() {
                    c.CbacStore.instance.isHost &&
                        this.gameSocket.writeBytes(
                            f.getCMDVipStartGame(this.vid)
                        );
                }),
                Object.defineProperty(t.prototype, 'openCardEnabled', {
                    get: function() {
                        var e = 0;
                        return (
                            this.dispatchCardEnabled &&
                                this.donePool
                                    .getAllStakeData()
                                    .forEach(function(t) {
                                        e += t.amount;
                                    }),
                            e > 0
                        );
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, 'dispatchCardEnabled', {
                    get: function() {
                        return (
                            c.CbacStore.instance.isHost &&
                            1 == this.roomTimerStore.gameStatus
                        );
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.dispatchCardStart = function() {
                    this.dispatchCardEnabled &&
                        this.gameSocket.writeBytes(
                            f.getCMDVipDispatchCard(this.vid, this.gmcode)
                        );
                }),
                t
            );
        })(f.BetStoreBaseBac);
        (c.BetTableStore = t),
            __reflect(t.prototype, 'VideoGameCore.Cbac.BetTableStore');
    })((t = f.Cbac || (f.Cbac = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(c) {
    var t;
    !(function(h) {
        var i = 30,
            r = 1e3,
            u = 7e3,
            t = (function(e) {
                function t() {
                    var t = e.call(this) || this;
                    return (
                        (t.balance = 0),
                        (t.loginType = 0),
                        (t.loginPassword = null),
                        (t.seat = -1),
                        (t.actualSeat = -1),
                        (t.isForcedBackLobby = !1),
                        (t.hostLeftKickTimer = -1),
                        (t.loginType = 3),
                        (t.isTableClosing = !1),
                        (t.isHostLeftKicked = !1),
                        (t.isWaitingForResult = !1),
                        t
                    );
                }
                return (
                    __extends(t, e),
                    (t.prototype.getSocketList = function() {
                        return [h.CbacGameSocket.instance];
                    }),
                    (t.prototype.onSocketConnected = function(t) {
                        t.writeBytes(
                            c.getCMDClientLoginGame(
                                Core.LoginStore.instance.loginName,
                                Core.LoginStore.instance.token,
                                Core.gn
                            )
                        );
                    }),
                    (t.prototype.onSocketData = function(t, e) {
                        if (!t.vid || this.vid === t.vid)
                            switch (t.respId) {
                                case c.Se:
                                    var i = t;
                                    0 == i.retCode ||
                                        Core.globalStore.dispatchGlobal(c.pn);
                                    break;
                                case c.GAME_LAST_POSITION_OLD:
                                    var r = t;
                                    r.seat > 0
                                        ? this.onEnterTable(
                                              r.seat,
                                              r.players[0].tableCode
                                          )
                                        : e.writeBytes(
                                              c.getCMDVipAutoEnterTable(
                                                  this.vid,
                                                  this.loginType,
                                                  this.loginPassword
                                              )
                                          );
                                    break;
                                case c.oi:
                                    var s = t;
                                    0 == s.code || 23 == s.code
                                        ? this.onEnterTable(s.seat, s.table)
                                        : Core.globalStore.dispatchGlobal(
                                              c.pn,
                                              s.code
                                          );
                                    break;
                                case c.gt:
                                    var n = t;
                                    n.seat === this.seat &&
                                        n.loginname ==
                                            Core.LoginStore.instance
                                                .loginName &&
                                        -2 === n.action &&
                                        this.dispatchAction(c.wn);
                                    break;
                                case c.di:
                                    var o = t;
                                    switch (o.status) {
                                        case 0:
                                            break;
                                        case 11:
                                            this.isWaitingForResult = !1;
                                            break;
                                        default:
                                            this.isWaitingForResult = !0;
                                    }
                                    7 == o.vipStatus && this.onTableClosing();
                                    break;
                                case c.mt:
                                    var a = t;
                                    switch (a.status) {
                                        case 0:
                                        case 11:
                                            this.isWaitingForResult = !1;
                                            break;
                                        default:
                                            this.isWaitingForResult = !0;
                                    }
                                    7 == a.vipStatus && this.onTableClosing();
                                    break;
                                case c.Nt:
                                    this.isTableClosing &&
                                        ((this.otherTotalBet = this.getOtherTotalBet()),
                                        h.BetTableStore.instance.totalBet ||
                                            this.otherTotalBet.keys.length ||
                                            this.performHostLeftKick(u));
                                    break;
                                case c.W:
                                    this.isTableClosing &&
                                        !this.otherTotalBet.keys.length &&
                                        this.performHostLeftKick(u);
                                    break;
                                case c.wt:
                                    if (this.isTableClosing) {
                                        var a = t;
                                        this.otherTotalBet.has(a.loginname) &&
                                            this.otherTotalBet['delete'](
                                                a.loginname
                                            ),
                                            this.otherTotalBet.keys.length ||
                                                this.performHostLeftKick(u);
                                    }
                            }
                    }),
                    Object.defineProperty(t.prototype, 'isHost', {
                        get: function() {
                            return 3 == this.loginType;
                        },
                        enumerable: !0,
                        configurable: !0
                    }),
                    Object.defineProperty(t.prototype, 'isVisitPlayer', {
                        get: function() {
                            return 1 == this.loginType;
                        },
                        enumerable: !0,
                        configurable: !0
                    }),
                    (t.prototype.release = function() {
                        e.prototype.release.call(this);
                    }),
                    (t.prototype.onSocketDie = function(t) {
                        t === h.CbacGameSocket.instance &&
                            Core.globalStore.dispatchGlobal(c.oe);
                    }),
                    (t.prototype.onEnterTable = function(t, e) {
                        c.isVipVisitPlayer(this.vid, e)
                            ? (this.loginType = 1)
                            : t == c.VIP_HOST_SEAT
                                ? (this.loginType = 3)
                                : (this.loginType = 2),
                            c.isVipVisitPlayer(this.vid, e)
                                ? ((this.seat = c.VIP_HOST_SEAT),
                                  (this.actualSeat = t))
                                : ((this.seat = t), (this.actualSeat = t)),
                            (this.tableCode = e),
                            this.dispatchAction(c.de, this.seat),
                            h.CbacGameSocket.instance.writeBytes(
                                c.getCMDGetGameCurrentStatus()
                            ),
                            Core.NonstopTimer.instance.setTimeout(
                                function() {
                                    Core.globalStore.dispatchGlobal(c.zn);
                                },
                                this,
                                1e3
                            );
                    }),
                    Object.defineProperty(t, 'instance', {
                        get: function() {
                            return this.getInstance(this);
                        },
                        enumerable: !0,
                        configurable: !0
                    }),
                    (t.init = function() {
                        return this.initInstance(this);
                    }),
                    Object.defineProperty(t.prototype, 'changeDealerEnabled', {
                        get: function() {
                            return 8 != h.RoomTimerStore.instance.vipStatus;
                        },
                        enumerable: !0,
                        configurable: !0
                    }),
                    (t.prototype.requestChangeDealer = function() {
                        if (this.changeDealerEnabled) {
                            var t = c.VideoPlazaStore.instance.getDealerInfo(
                                this.vid
                            );
                            t &&
                                (this.dispatchAction(c.Sn),
                                h.CbacGameSocket.instance.writeBytes(
                                    c.getCMDVipChangeDealer(this.vid, t.name)
                                ));
                        }
                    }),
                    Object.defineProperty(t.prototype, 'shuffleEnabled', {
                        get: function() {
                            return 8 != h.RoomTimerStore.instance.vipStatus;
                        },
                        enumerable: !0,
                        configurable: !0
                    }),
                    (t.prototype.requestShuffle = function() {
                        if (this.shuffleEnabled) {
                            var t = c.PlazaRoadStore.instance.getRoadData(
                                this.vid
                            );
                            t && t.totalCount >= i
                                ? (h.CbacGameSocket.instance.writeBytes(
                                      c.getCMDVipChangeShoe(this.vid)
                                  ),
                                  this.dispatchAction(c.yn))
                                : this.dispatchAction(c.En);
                        }
                    }),
                    (t.prototype.openVipSetting = function() {
                        this.dispatchAction(c.An);
                    }),
                    (t.prototype.sendActionHasBet = function() {
                        this.dispatchAction(c.ne);
                    }),
                    (t.prototype.forceBackLobby = function() {
                        (this.isForcedBackLobby = !0),
                            Core.globalStore.dispatchGlobal(c.Tn);
                    }),
                    (t.prototype.onTableClosing = function() {
                        this.isTableClosing ||
                            ((this.isTableClosing = !0),
                            this.dispatchAction(c.xn),
                            this.isWaitingForResult ||
                                this.performHostLeftKick());
                    }),
                    (t.prototype.performHostLeftKick = function(t) {
                        var e = this;
                        void 0 === t && (t = r),
                            h.CbacGameSocket.instance.killSocket(),
                            (this.isHostLeftKicked = !0),
                            Core.NonstopTimer.instance.hasTimeout(
                                this.hostLeftKickTimer
                            ) ||
                                (this.hostLeftKickTimer = Core.NonstopTimer.instance.setTimeout(
                                    function() {
                                        e.dispatchAction(c.On);
                                    },
                                    this,
                                    t
                                ));
                    }),
                    (t.prototype.getOtherTotalBet = function() {
                        for (
                            var t = new Core.HashMap(),
                                e = h.BetTableStore.instance.mySeatNum,
                                i = 1;
                            i <= c.MAX_TABLE_SEAT;
                            i++
                        )
                            if (i != e) {
                                var r = h.TableSeatStore.instance.getPlayerBySeatNum(
                                    i
                                );
                                if (r) {
                                    var s = h.BetTableStore.instance.tablePool.getTotalAmount(
                                        i
                                    );
                                    s && t.set(r.loginname, s);
                                }
                            }
                        return t;
                    }),
                    t
                );
            })(Core.NetworkStoreBase);
        (h.CbacStore = t),
            __reflect(t.prototype, 'VideoGameCore.Cbac.CbacStore');
    })((t = c.Cbac || (c.Cbac = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(l) {
    var t;
    !(function(C) {
        var e = 4,
            t = (function(f) {
                function t() {
                    var t = f.call(this) || this;
                    return (
                        (t.cardColor = 0),
                        (t.mouseInfoList = [null, null, null]),
                        (t.mouseMiCardTimer = [0, 0, 0]),
                        (t.mouseInfosList = [[], [], []]),
                        (t.ingoreServerMouseInfo = !1),
                        (t.socketList = [C.CbacGameSocket.instance]),
                        t
                    );
                }
                return (
                    __extends(t, f),
                    Object.defineProperty(t, 'instance', {
                        get: function() {
                            return this.getInstance(this);
                        },
                        enumerable: !0,
                        configurable: !0
                    }),
                    (t.init = function() {
                        return this.initInstance(this);
                    }),
                    (t.prototype.onSocketConnected = function(t) {}),
                    (t.prototype.onSocketData = function(t, e) {
                        var i = this;
                        if (
                            (t.respId !== l.mt &&
                                f.prototype.onSocketData.call(this, t, e),
                            !t.vid || this.vid === t.vid)
                        )
                            switch (t.respId) {
                                case l.Ye:
                                    var r = t;
                                    this.pokerDataQue.push(
                                        new l.PokerData(
                                            r.card,
                                            r.who,
                                            r.index,
                                            r.show
                                        )
                                    ),
                                        this.parsePokerDataQue(),
                                        this.dispatchAction(l.vt);
                                    break;
                                case l.VIP_SHOW_CARD:
                                    var r = t;
                                    if (r.index > 0) {
                                        var s =
                                            1 == r.forWho
                                                ? this.pDataQue
                                                : this.bDataQue;
                                        r.index - 1 < s.length &&
                                            ((s[r.index - 1].show = !0),
                                            this.parsePokerDataQue(),
                                            this.dispatchAction(l.vt));
                                    }
                                    break;
                                case l.Nt:
                                    var n = t;
                                    C.BetTableStore.instance.gmcode ===
                                        n.code &&
                                        ((this.resultTimer = Core.NonstopTimer.instance.setTimeout(
                                            function() {
                                                this.parsePokerDataQue(),
                                                    (this.pScore = n.pval),
                                                    (this.bScore = n.bval),
                                                    (this.pWin = !1),
                                                    (this.bWin = !1),
                                                    (this.tie = !1),
                                                    this.pScore > this.bScore
                                                        ? (this.pWin = !0)
                                                        : this.pScore <
                                                          this.bScore
                                                            ? (this.bWin = !0)
                                                            : this.pScore ===
                                                                  this.bScore &&
                                                              (this.tie = !0),
                                                    (this.bPair =
                                                        (8 & n.res) >> 3 === 1),
                                                    (this.pPair =
                                                        (16 & n.res) >> 4 ===
                                                        1),
                                                    this.dispatchAction(l.vt);
                                            },
                                            this,
                                            l.StreamConfig.instance.getAverageDelay() -
                                                10
                                        )),
                                        (this.resetTimer = Core.NonstopTimer.instance.setTimeout(
                                            function() {
                                                this.resetAll(),
                                                    this.dispatchAction(l.vt);
                                            },
                                            this,
                                            2e4
                                        )));
                                    break;
                                case l.VIP_WHO_MI_CARD:
                                    var r = t;
                                    this.whoMiCard = r.who;
                                    break;
                                case l.VIP_END_MI_CARD:
                                    var r = t;
                                    this.endMiCard();
                                    break;
                                case l.VIP_MOUSE_MI_CARD_EX:
                                    var o = t;
                                    if (this.ingoreServerMouseInfo) break;
                                    if (
                                        ((this.mouseInfosList[
                                            o.cardIndex - 1
                                        ] = this.mouseInfosList[
                                            o.cardIndex - 1
                                        ].concat(o.mouseInfos)),
                                        Core.NonstopTimer.instance.hasInterval(
                                            this.mouseMiCardTimer[
                                                o.cardIndex - 1
                                            ]
                                        ))
                                    ) {
                                        if (
                                            this.mouseInfosList[o.cardIndex - 1]
                                                .length > 4
                                        ) {
                                            var a = [];
                                            o.mouseInfos.forEach(function(t) {
                                                if (
                                                    i.mouseInfosList[
                                                        o.cardIndex - 1
                                                    ].length > 4
                                                )
                                                    if (
                                                        (t.baseX < -5 &&
                                                            t.baseY < -5) ||
                                                        (t.x < -5 &&
                                                            t.y < -5) ||
                                                        0 == a.length
                                                    )
                                                        a.push(t);
                                                    else {
                                                        var e = a[a.length - 1];
                                                        (e.x == t.x &&
                                                            e.y == t.y &&
                                                            Math.abs(
                                                                e.baseX -
                                                                    t.baseX
                                                            ) < 0.05 &&
                                                            Math.abs(
                                                                e.baseY -
                                                                    t.baseY
                                                            ) < 0.05) ||
                                                            a.push(t);
                                                    }
                                            }, this),
                                                a.length <
                                                    this.mouseInfosList[
                                                        o.cardIndex - 1
                                                    ].length &&
                                                    (this.mouseInfosList[
                                                        o.cardIndex - 1
                                                    ] = a);
                                        }
                                    } else
                                        0 != o.mouseInfos.length &&
                                            (this.mouseMiCardTimer[
                                                o.cardIndex - 1
                                            ] = Core.NonstopTimer.instance.setInterval(
                                                function() {
                                                    var t = i.mouseInfosList[
                                                        o.cardIndex - 1
                                                    ].shift();
                                                    (t.baseX < -5 &&
                                                        t.baseY < -5) ||
                                                    (t.x < -5 && t.y < -5)
                                                        ? (i.mouseInfoList[
                                                              o.cardIndex - 1
                                                          ] = null)
                                                        : (i.mouseInfoList[
                                                              o.cardIndex - 1
                                                          ] = t),
                                                        i.dispatchAction(l.vt),
                                                        0 ===
                                                            i.mouseInfosList[
                                                                o.cardIndex - 1
                                                            ].length &&
                                                            (Core.NonstopTimer.instance.clearInterval(
                                                                i
                                                                    .mouseMiCardTimer[
                                                                    o.cardIndex -
                                                                        1
                                                                ]
                                                            ),
                                                            (i.mouseMiCardTimer[
                                                                o.cardIndex - 1
                                                            ] = 0));
                                                },
                                                this,
                                                10
                                            ));
                                    break;
                                case l.VIP_NEW_SHOE:
                                    var h = t;
                                    h.vid === C.CbacStore.instance.vid &&
                                        (this.cardColor = h.cardColor);
                                    break;
                                case l.mt:
                                    var u = t;
                                    if (
                                        ((this.cardColor = u.bColor),
                                        this.resetAll(),
                                        11 != u.status && 8 != u.vipStatus)
                                    ) {
                                        for (
                                            var c = 0;
                                            c < u.pcards.length;
                                            c++
                                        )
                                            0 != u.pcards[c] &&
                                                this.pokerDataQue.push(
                                                    new l.PokerData(
                                                        u.pcards[c],
                                                        0,
                                                        c + 1,
                                                        u.pShowCards[c]
                                                    )
                                                );
                                        for (
                                            var c = 0;
                                            c < u.bcards.length;
                                            c++
                                        )
                                            0 != u.bcards[c] &&
                                                this.pokerDataQue.push(
                                                    new l.PokerData(
                                                        u.bcards[c],
                                                        1,
                                                        c + 1,
                                                        u.bShowCards[c]
                                                    )
                                                );
                                        (this.whoMiCard = u.whoMiCard),
                                            this.parsePokerDataQue(),
                                            this.dispatchAction(l.vt);
                                    }
                            }
                    }),
                    (t.prototype.release = function() {
                        f.prototype.release.call(this);
                    }),
                    (t.prototype.resetAll = function() {
                        f.prototype.resetAll.call(this),
                            (this.mouseInfoList = [null, null, null]),
                            (this.whoMiCard = 0),
                            (this.ingoreServerMouseInfo = !1);
                    }),
                    (t.prototype.endMiCard = function() {
                        this.pokerDataQue.forEach(function(t) {
                            t.show = !0;
                        }),
                            this.parsePokerDataQue(),
                            this.dispatchAction(l.vt);
                    }),
                    Object.defineProperty(t.prototype, 'miCardReady', {
                        get: function() {
                            return this.pokerDataQue.length >= e;
                        },
                        enumerable: !0,
                        configurable: !0
                    }),
                    (t.prototype.showCard = function(t, e) {
                        this.miCardReady &&
                            C.CbacGameSocket.instance.writeBytes(
                                l.getShowCardCmd(
                                    this.vid,
                                    C.BetTableStore.instance.gmcode,
                                    t,
                                    e
                                )
                            );
                    }),
                    (t.prototype.showCardAll = function() {
                        if (this.miCardReady)
                            for (
                                var t =
                                        2 == this.whoMiCard
                                            ? this.bDataQue
                                            : this.pDataQue,
                                    e = 0;
                                e < t.length;
                                e++
                            )
                                t[e].show ||
                                    this.showCard(e + 1, this.whoMiCard);
                    }),
                    (t.prototype.miCard = function(t, e) {
                        (this.ingoreServerMouseInfo = !0),
                            C.CbacGameSocket.instance.writeBytes(
                                l.getVipMouseMiCardExCmd(this.vid, t, e)
                            );
                    }),
                    t
                );
            })(l.PokerBaseStore);
        (C.PokerStore = t),
            __reflect(t.prototype, 'VideoGameCore.Cbac.PokerStore');
    })((t = l.Cbac || (l.Cbac = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(n) {
    var t;
    !(function(e) {
        var t = (function(s) {
            function t() {
                var t = s.call(this) || this;
                return (t.socketList = [e.CbacGameSocket.instance]), t;
            }
            return (
                __extends(t, s),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.onSocketData = function(t, e) {
                    if (
                        (s.prototype.onSocketData.call(this, t, e),
                        !t.vid || this.vid === t.vid)
                    )
                        switch (t.respId) {
                            case n.di:
                                var i = t;
                                (this.gameStatus = i.status),
                                    (this.vipStatus = i.vipStatus),
                                    1 == this.gameStatus
                                        ? this.updateTimeout(1, 1)
                                        : this.updateTimeout(0, 0),
                                    11 !== i.status &&
                                        this.dispatchAction(n.st, i.vid),
                                    7 == i.vipStatus &&
                                        1 == this.gameStatus &&
                                        ((this.gameStatus = 2),
                                        this.dispatchAction(n.w));
                                break;
                            case n.Ye:
                                1 == this.gameStatus &&
                                    ((this.gameStatus = 2),
                                    this.dispatchAction(n.st, this.vid),
                                    this.dispatchAction(n.w));
                                break;
                            case n.VIP_WHO_MI_CARD:
                                var r = t;
                                (this.gameStatus = 2),
                                    (this.vipStatus = 5),
                                    (this.miCardTimeout = 0),
                                    this.dispatchAction(n.st, r.vid),
                                    this.dispatchAction(n.w, r.vid);
                                break;
                            case n.VIP_START_MI_CARD:
                                var r = t;
                                (this.gameStatus = r.gameStatus),
                                    (this.vipStatus = r.vipStatus),
                                    (this.miCardTimeout = r.timeout),
                                    this.dispatchAction(n.st, r.vid),
                                    this.startMiCardCountDown();
                                break;
                            case n.VIP_END_MI_CARD:
                                var r = t;
                                (this.gameStatus = r.gameStatus),
                                    (this.vipStatus = r.vipStatus),
                                    this.dispatchAction(n.st, r.vid),
                                    this.endMiCardCountDown();
                        }
                }),
                (t.prototype.release = function() {
                    s.prototype.release.call(this);
                }),
                (t.prototype.onGameStartDo = function() {
                    this.vipStatus = 2;
                }),
                (t.prototype.onGameCurrentStatus = function(t) {
                    var e = t,
                        i = this.gameStatus != e.status;
                    this.gmcode != e.gmcode && this.dispatchAction(n.z),
                        (this.gmcode = e.gmcode),
                        (this.gameStatus = e.status),
                        (this.vipStatus = e.vipStatus),
                        1 == this.gameStatus
                            ? this.updateTimeout(1, 1)
                            : 2 == this.gameStatus
                                ? (i && this.dispatchAction(n.w),
                                  5 == this.vipStatus &&
                                      ((this.miCardTimeout = e.miCardTimeout),
                                      this.startMiCardCountDown()))
                                : this.updateTimeout(0, 0),
                        this.dispatchAction(n.Y);
                }),
                (t.prototype.updateTimeout = function(t, e) {
                    (this.maxTimeout = t), (this.timeout = e);
                }),
                (t.prototype.startMiCardCountDown = function() {
                    Core.NonstopTimer.instance.hasInterval(
                        this.miCardTimerId
                    ) &&
                        Core.NonstopTimer.instance.clearInterval(
                            this.miCardTimerId
                        ),
                        this.miCardTimeout > 0 &&
                            (this.miCardCountDown(),
                            (this.miCardTimerId = Core.NonstopTimer.instance.setInterval(
                                this.miCardCountDown,
                                this,
                                1e3
                            )));
                }),
                (t.prototype.miCardCountDown = function() {
                    this.miCardTimeout > 0
                        ? (this.miCardTimeout--, this.dispatchAction(n._t))
                        : this.endMiCardCountDown();
                }),
                (t.prototype.endMiCardCountDown = function() {
                    (this.miCardTimeout = 0),
                        Core.NonstopTimer.instance.hasInterval(
                            this.miCardTimerId
                        ) &&
                            Core.NonstopTimer.instance.clearInterval(
                                this.miCardTimerId
                            ),
                        this.dispatchAction(n._t);
                }),
                t
            );
        })(n.RoomTimerBaseStore);
        (e.RoomTimerStore = t),
            __reflect(t.prototype, 'VideoGameCore.Cbac.RoomTimerStore');
    })((t = n.Cbac || (n.Cbac = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t;
    !(function(r) {
        var t = (function(e) {
            function t() {
                var t = (null !== e && e.apply(this, arguments)) || this;
                return (
                    (t.isMiCard = !0),
                    (t.isMiCardHorizontal = !0),
                    (t.isPassword = !1),
                    t
                );
            }
            return (
                __extends(t, e),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.getSocketList = function() {
                    return [r.CbacGameSocket.instance];
                }),
                (t.prototype.onSocketData = function(t, e) {
                    if (!t.vid || this.vid === t.vid)
                        switch (t.respId) {
                            case s.VIP_BAC_SET_INFO:
                                var i = t;
                                (this.isMiCard = i.isMiCard),
                                    (this.isMiCardHorizontal =
                                        i.isMiCardHorizontal),
                                    (this.isPassword = i.isPassword),
                                    this.dispatchAction(s.Nn);
                        }
                }),
                (t.prototype.updateSetting = function(t, e, i) {
                    r.CbacStore.instance.isHost &&
                        r.CbacGameSocket.instance.writeBytes(
                            s.getVipBacSettingCmd(this.vid, t, e, i)
                        );
                }),
                (t.prototype.updatePassword = function(t) {
                    r.CbacStore.instance.isHost &&
                        r.CbacGameSocket.instance.writeBytes(
                            s.getVipSetPasswordCmd(this.vid, t)
                        );
                }),
                t
            );
        })(Core.NetworkStoreBase);
        (r.SettingStore = t),
            __reflect(t.prototype, 'VideoGameCore.Cbac.SettingStore');
    })((t = s.Cbac || (s.Cbac = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t;
    !(function(e) {
        var t = (function(i) {
            function t() {
                var t = i.call(this) || this;
                return (t.socketList = [e.CbacGameSocket.instance]), t;
            }
            return (
                __extends(t, i),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.onSocketData = function(t, e) {
                    if (
                        (i.prototype.onSocketData.call(this, t, e),
                        !t.vid || this.vid === t.vid)
                    )
                        switch (t.respId) {
                            case r.GAME_LAST_POSITION_OLD:
                                this.onUserPosition(t);
                        }
                }),
                (t.prototype.onUserPosition = function(t) {
                    for (var e = 0; e < t.players.length; e++)
                        r.isVipVisitPlayer(this.vid, t.players[e].tableCode)
                            ? t.players[e].loginname ==
                                  Core.LoginStore.instance.loginName &&
                              ((t.players[e].seat = 8),
                              this.setPlayerData(t.players[e]))
                            : this.setPlayerData(t.players[e]);
                    (this.tableCode = r.getVipTableCodeFromVid(this.vid)),
                        this.dispatchAction(r.zt, this.getPlayerList());
                }),
                (t.prototype.release = function() {
                    i.prototype.release.call(this);
                }),
                t
            );
        })(r.TableSeatBaseStore);
        (e.TableSeatStore = t),
            __reflect(t.prototype, 'VideoGameCore.Cbac.TableSeatStore');
    })((t = r.Cbac || (r.Cbac = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(h) {
    var t;
    !(function(r) {
        var t = (function(i) {
            function t() {
                var t = i.call(this) || this;
                return (
                    (t.playtypes = h.DT_BET_PLAYTYPES),
                    (t.stakePool = new h.StakePool()),
                    (t.donePool = new h.StakePool()),
                    (t.diffPool = new h.StakePool()),
                    (t.lastPool = new h.StakePool()),
                    (t.tablePool = new h.TablePool()),
                    (t.socketList = [h.DtGameSocket.instance]),
                    t
                );
            }
            return (
                __extends(t, i),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                Object.defineProperty(t.prototype, 'mySeatNum', {
                    get: function() {
                        var t = r.TableSeatStore.instance.getPlayer(
                            Core.LoginStore.instance.loginName
                        );
                        return null != t ? t.seat : 0;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, 'roomTimerStore', {
                    get: function() {
                        return r.RoomTimerStore.instance;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.getAmountByType = function(t, e) {
                    return (
                        void 0 === e && (e = 0),
                        0 === e || e === this.mySeatNum
                            ? this.stakePool.getAmount(t)
                            : this.tablePool.getAmount(e, t)
                    );
                }),
                (t.prototype.getBetLimitByPlayType = function(t) {
                    return h.UserStore.instance.getBetLimitByPlayType(
                        t,
                        h.DtStore.instance.tableCode
                    );
                }),
                (t.prototype.reset = function() {
                    i.prototype.reset.call(this), this.tablePool.clear();
                }),
                (t.prototype.sendBetToServer = function(t) {
                    if (
                        (i.prototype.sendBetToServer.call(this, t),
                        this.gameSocket.connected)
                    ) {
                        var e = t.playType;
                        h.DtGameSocket.instance.writeBytes(
                            h.getCMDGameBetExt(this.gmcode, e, t.amount, t.seq)
                        );
                    }
                }),
                (t.prototype.onSocketData = function(t, e) {
                    if (!this.isInvalidVid(t)) {
                        var i;
                        switch (t.respId) {
                            case h.ue:
                                this.m(t);
                                break;
                            case h.Mt:
                                this._(t);
                            case h.W:
                                this.V(t);
                                break;
                            case h.ce:
                                var r = t;
                                if (null != r.betPoolInfos) {
                                    var s,
                                        n = r.betPoolInfos.length;
                                    for (i = 0; n > i; i++) {
                                        s = r.betPoolInfos[i];
                                        var o = s.playType;
                                        this.tablePool.addBetToPool(
                                            s.seatNum,
                                            o,
                                            s.amount,
                                            s.currency,
                                            !1
                                        ),
                                            s.loginname ===
                                                Core.LoginStore.instance
                                                    .loginName &&
                                                (this.donePool.setAmount(
                                                    o,
                                                    s.amount
                                                ),
                                                s.amount >
                                                    this.stakePool.getAmount(
                                                        o
                                                    ) &&
                                                    this.stakePool.setAmount(
                                                        o,
                                                        s.amount
                                                    ));
                                    }
                                }
                                this.diffPool.clear(), this.dispatchAction(h.T);
                                break;
                            case h.kt:
                                var a = t;
                                this.tablePool.addBetToPool(
                                    a.seatNum,
                                    a.playType,
                                    a.value,
                                    a.currency
                                ),
                                    this.dispatchAction(h.T, a.seatNum);
                                break;
                            case h.wt:
                                this.p(t);
                        }
                    }
                }),
                (t.prototype.payoutTimeoutDo = function(t) {
                    i.prototype.payoutTimeoutDo.call(this, t),
                        this.dispatchAction(h.k, {
                            seatNum: this.mySeatNum,
                            payouts: t.ptPayouts
                        });
                }),
                (t.prototype.payoutOtherTimeoutDo = function(t) {
                    var e = r.TableSeatStore.instance.getPlayer(t.loginname);
                    null != e &&
                        this.dispatchAction(h.k, {
                            seatNum: e.seat,
                            payouts: t.ptPayouts
                        });
                }),
                (t.prototype.getCurrencyBySeatNum = function(t) {
                    return this.tablePool.getCurrency(t);
                }),
                t
            );
        })(h.BetStoreBase);
        (r.BetTableStore = t),
            __reflect(t.prototype, 'VideoGameCore.Dt.BetTableStore');
    })((t = h.Dt || (h.Dt = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(o) {
    var t = (function(e) {
        function t() {
            var t = e.call(this) || this;
            return (
                (t.balance = 0),
                (t.loginType = 0),
                (t.seat = -1),
                (t.socketList = [o.DtGameSocket.instance]),
                (t.loginType = 2),
                t
            );
        }
        return (
            __extends(t, e),
            (t.prototype.onSocketConnected = function(t) {
                t.writeBytes(
                    o.getCMDClientLoginGameExt(
                        this.vid,
                        Core.LoginStore.instance.loginName,
                        Core.LoginStore.instance.token,
                        Core.gn
                    )
                );
            }),
            (t.prototype.onSocketData = function(t, e) {
                switch (t.respId) {
                    case o.wi:
                        var i = t;
                        0 == i.retCode
                            ? o.DtGameSocket.instance.writeBytes(
                                  o.getCMDAutoEnterTable(this.vid)
                              )
                            : (e.killSocket(),
                              dclib('LOGIN Game FAIL ' + i.retCode),
                              Core.LoginStore.instance.renewToken(function() {
                                  e.autoConnect();
                              }, this),
                              Core.globalStore.dispatchGlobal(o.pn));
                        break;
                    case o.Vt:
                        var r = t;
                        0 == r.code || 23 == r.code
                            ? ((this.seat = r.seat),
                              (this.tableCode = r.table),
                              this.dispatchAction(o.de, this.seat),
                              e.writeBytes(o.getCMDGetGameCurrentStatus()),
                              Core.NonstopTimer.instance.setTimeout(
                                  function() {
                                      Core.globalStore.dispatchGlobal(o.zn);
                                  },
                                  this,
                                  1e3
                              ))
                            : Core.globalStore.dispatchGlobal(o.pn, r.code);
                        break;
                    case o.Ae:
                        var s = t;
                        this.dispatchAction(o.kn, s.roundNum);
                        break;
                    case o.gt:
                        var n = t;
                        n.loginname == Core.LoginStore.instance.loginName &&
                            n.seat === this.seat &&
                            -2 === n.action &&
                            this.dispatchAction(o.wn);
                }
            }),
            (t.prototype.release = function() {
                e.prototype.release.call(this);
            }),
            (t.prototype.onSocketDie = function(t) {
                t === o.DtGameSocket.instance &&
                    Core.globalStore.dispatchGlobal(o.oe);
            }),
            Object.defineProperty(t, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.init = function() {
                return this.initInstance(this);
            }),
            t
        );
    })(Core.NetworkStoreBase);
    (o.DtStore = t), __reflect(t.prototype, 'VideoGameCore.DtStore');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(o) {
    var t;
    !(function(t) {
        var e = (function(n) {
            function t() {
                var t = n.call(this) || this;
                return (t.socketList = [o.DtGameSocket.instance]), t;
            }
            return (
                __extends(t, n),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.onSocketConnected = function(t) {}),
                (t.prototype.onSocketData = function(t, e) {
                    var i = this;
                    if (
                        (n.prototype.onSocketData.call(this, t, e),
                        !t.vid || this.vid === t.vid)
                    )
                        switch (t.respId) {
                            case o.ft:
                                this.resetAll(), this.dispatchAction(o.Z);
                                break;
                            case o.fr:
                                var r = t;
                                Core.NonstopTimer.instance.setTimeout(
                                    function() {
                                        0 != r.dragonCard &&
                                            i.uniqueEnqueue(r.dragonCard, 0, 1),
                                            0 != r.tigerCard &&
                                                i.uniqueEnqueue(
                                                    r.tigerCard,
                                                    1,
                                                    2
                                                ),
                                            i.parsePokerDataQue(),
                                            i.dispatchAction(o.vt);
                                    },
                                    this,
                                    o.StreamConfig.instance.getAverageDelay()
                                );
                                break;
                            case o.Mt:
                                var s = t;
                                this.resultTimer = Core.NonstopTimer.instance.setTimeout(
                                    function() {
                                        this.onResultTimeout(s);
                                    },
                                    this,
                                    5e3
                                );
                        }
                }),
                (t.prototype.release = function() {
                    n.prototype.release.call(this);
                }),
                (t.prototype.parsePokerDataQue = function() {
                    n.prototype.parsePokerDataQue.call(this),
                        (this.bDataQue = []),
                        (this.pDataQue = []),
                        (this.pScore = 0),
                        (this.bScore = 0),
                        (this.bWin = !1),
                        (this.pWin = !1),
                        (this.tie = !1);
                    for (var t = 0; t < this.pokerDataQue.length; t++) {
                        var e = this.pokerDataQue[t],
                            i = e.cardValue;
                        0 == e.who && this.bDataQue.length <= o.MAX_DT_POKER_NUM
                            ? (this.bDataQue.push(e), (this.bScore += i))
                            : 1 == e.who &&
                              this.pDataQue.length <= o.MAX_DT_POKER_NUM &&
                              (this.pDataQue.push(e), (this.pScore += i));
                    }
                }),
                (t.prototype.uniqueEnqueue = function(t, e, i) {
                    for (var r = !1, i = 0; i < this.pokerDataQue.length; i++) {
                        var s = this.pokerDataQue[i];
                        if (t == s.card && e == s.who) {
                            r = !0;
                            break;
                        }
                    }
                    r || this.pokerDataQue.push(new o.PokerData(t, e, i));
                }),
                (t.prototype.onResultTimeout = function(t) {
                    switch (
                        ((this.bScore = t.dval),
                        (this.pScore = t.tval),
                        (this.pWin = !1),
                        (this.bWin = !1),
                        (this.tie = !1),
                        t.winPlayTypes[0])
                    ) {
                        case o.PLAYTYPE_DRAGON:
                            this.bWin = !0;
                            break;
                        case o.PLAYTYPE_TIGER:
                            this.pWin = !0;
                            break;
                        case o.PLAYTYPE_DT_TIE:
                            this.tie = !0;
                    }
                    this.dispatchAction(o.vt);
                }),
                t
            );
        })(o.PokerBaseStore);
        (t.PokerStore = e),
            __reflect(e.prototype, 'VideoGameCore.Dt.PokerStore');
    })((t = o.Dt || (o.Dt = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(n) {
    var t;
    !(function(t) {
        var e = (function(s) {
            function t() {
                var t = s.call(this) || this;
                return (t.socketList = [n.DtGameSocket.instance]), t;
            }
            return (
                __extends(t, s),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.onSocketData = function(t, e) {
                    if (
                        (s.prototype.onSocketData.call(this, t, e),
                        !t.vid || this.vid === t.vid)
                    )
                        switch (t.respId) {
                            case n.hr:
                                var i = t;
                                this.onBeadList(i, e);
                                break;
                            case n.Mt:
                                var r = t;
                                this.onGameResult(r, e);
                        }
                }),
                (t.prototype.release = function() {
                    s.prototype.release.call(this);
                }),
                t
            );
        })(n.RoadMapBaseStore);
        (t.RoadMapStore = e),
            __reflect(e.prototype, 'VideoGameCore.Dt.RoadMapStore');
    })((t = n.Dt || (n.Dt = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t;
    !(function(t) {
        var e = (function(i) {
            function t() {
                var t = i.call(this) || this;
                return (t.socketList = [r.DtGameSocket.instance]), t;
            }
            return (
                __extends(t, i),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.onSocketData = function(t, e) {
                    i.prototype.onSocketData.call(this, t, e),
                        (t.vid && this.vid !== t.vid) || t.respId;
                }),
                (t.prototype.release = function() {
                    i.prototype.release.call(this);
                }),
                t
            );
        })(r.RoomTimerBaseStore);
        (t.RoomTimerStore = e),
            __reflect(e.prototype, 'VideoGameCore.Dt.RoomTimerStore');
    })((t = r.Dt || (r.Dt = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t;
    !(function(t) {
        var e = (function(e) {
            function t() {
                var t = e.call(this) || this;
                return (t.socketList = [i.DtGameSocket.instance]), t;
            }
            return (
                __extends(t, e),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                t
            );
        })(i.TableSeatBaseStore);
        (t.TableSeatStore = e),
            __reflect(e.prototype, 'VideoGameCore.Dt.TableSeatStore');
    })((t = i.Dt || (i.Dt = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(d) {
    var t;
    !(function(m) {
        var t = (function(n) {
            function t() {
                var t = n.call(this) || this;
                return (
                    (t.tablePool = new d.TablePool()),
                    (t.videoPool = new d.VideoPool()),
                    (t.socketList = [m.LedGameSocket.instance]),
                    t
                );
            }
            return (
                __extends(t, n),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                Object.defineProperty(t.prototype, 'mySeatNum', {
                    get: function() {
                        var t = m.TableSeatStore.instance.getPlayer(
                            Core.LoginStore.instance.loginName
                        );
                        return null != t && 2 === m.LedStore.instance.loginType
                            ? t.seat
                            : 0;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, 'roomTimerStore', {
                    get: function() {
                        return m.RoomTimerStore.instance;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, 'betEnabled', {
                    get: function() {
                        return (
                            !this.diffPool.pending &&
                            this.roomTimerStore.isBettingStatus &&
                            null != this.gmcode
                        );
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.getAmountByType = function(t, e) {
                    return (
                        void 0 === e && (e = 0),
                        0 === e || e === this.mySeatNum
                            ? this.stakePool.getAmount(t)
                            : this.tablePool.getAmount(e, t)
                    );
                }),
                (t.prototype.getUnconfirmedAmountByType = function(t) {
                    return this.getAmountByType(t) - this.donePool.getAmount(t);
                }),
                (t.prototype.getDisablePlayTypes = function() {
                    var t = [];
                    return (
                        d.PlazaRoadStore.instance.getRoadData(this.vid) &&
                            d.PlazaRoadStore.instance.getRoadData(this.vid)
                                .totalCount >= d.MAX_BET_GAME_BAC_BIG_SMALL &&
                            t.push(d.PLAYTYPE_BIG, d.PLAYTYPE_SMALL),
                        t
                    );
                }),
                Object.defineProperty(t.prototype, 'isInVIPMainTable', {
                    get: function() {
                        var t = this.vid.slice(0, 1) + 'V' + this.vid.slice(2);
                        return m.LedStore.instance.tableCode == t;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.getBetLimitByPlayType = function(t) {
                    return d.UserStore.instance.getBetLimitByPlayType(
                        t,
                        m.LedStore.instance.tableCode,
                        m.LedStore.instance.loginType,
                        this.vid
                    );
                }),
                (t.prototype.reset = function() {
                    n.prototype.reset.call(this),
                        this.tablePool.clear(),
                        this.videoPool.clear();
                }),
                (t.prototype.sendBetToServer = function(t) {
                    if (
                        (n.prototype.sendBetToServer.call(this, t),
                        this.gameSocket.connected)
                    ) {
                        var e = t.playType;
                        m.LedGameSocket.instance.writeBytes(
                            d.getCMDGameBetExt(this.gmcode, e, t.amount, t.seq)
                        );
                    }
                }),
                (t.prototype.onSocketData = function(t, e) {
                    if (!this.isInvalidVid(t)) {
                        var i;
                        switch (t.respId) {
                            case d.ue:
                                this.m(t);
                                break;
                            case d.Nt:
                                this._(t);
                                break;
                            case d.ki:
                                this._(t);
                                break;
                            case d.W:
                                this.V(t);
                                var r = t;
                                this.dispatchAction(d.k, {
                                    seatNum: 0,
                                    payouts: r.ptPayouts,
                                    loginname:
                                        Core.LoginStore.instance.loginName
                                });
                                break;
                            case d.ce:
                                var s = t;
                                if (null != s.betPoolInfos) {
                                    var n,
                                        o = s.betPoolInfos.length;
                                    for (i = 0; o > i; i++) {
                                        n = s.betPoolInfos[i];
                                        var a = n.playType;
                                        this.tablePool.addBetToPool(
                                            n.seatNum,
                                            a,
                                            n.amount,
                                            n.currency,
                                            !1
                                        ),
                                            this.videoPool.addBetToPool(
                                                n.loginname,
                                                n.nickname,
                                                a,
                                                n.amount,
                                                n.currency
                                            ),
                                            n.loginname ===
                                                Core.LoginStore.instance
                                                    .loginName &&
                                                (this.donePool.setAmount(
                                                    a,
                                                    n.amount
                                                ),
                                                n.amount >
                                                    this.stakePool.getAmount(
                                                        a
                                                    ) &&
                                                    this.stakePool.setAmount(
                                                        a,
                                                        n.amount
                                                    ));
                                    }
                                }
                                this.diffPool.clear(),
                                    this.dispatchAction(d.T),
                                    Core.NonstopTimer.instance.setTimeout(
                                        function() {
                                            Core.globalStore.dispatchGlobal(
                                                d.zn
                                            );
                                        },
                                        this,
                                        500
                                    );
                                break;
                            case d.pt:
                                var h = t;
                                this.tablePool.addBetToPool(
                                    h.seatNum,
                                    h.playType,
                                    h.value,
                                    h.currency
                                ),
                                    this.dispatchAction(d.T, h.seatNum);
                                break;
                            case d.kt:
                                var u = t;
                                this.tablePool.addBetToPool(
                                    u.seatNum,
                                    u.playType,
                                    u.value,
                                    u.currency
                                ),
                                    this.videoPool.addBetToPool(
                                        u.name,
                                        u.nick,
                                        u.playType,
                                        u.value,
                                        u.currency
                                    ),
                                    this.dispatchAction(d.T, u.seatNum);
                                break;
                            case d.wt:
                                this.p(t);
                                break;
                            case d.NOTIFY_TURN_CARD:
                                var c = t;
                                if (
                                    2 === m.LedStore.instance.loginType &&
                                    c.bankerName !==
                                        Core.LoginStore.instance.loginName &&
                                    c.playerName !==
                                        Core.LoginStore.instance.loginName
                                ) {
                                    var f = 0,
                                        C = '',
                                        l = 0;
                                    this.donePool.getAmount(d.PLAYTYPE_BANKER) >
                                    0
                                        ? ((f = d.PLAYTYPE_BANKER),
                                          (C = c.bankerName),
                                          (l = Math.ceil(
                                              c.bJetton *
                                                  d.VideoPlazaStore.instance
                                                      .currencyRate
                                          )))
                                        : this.donePool.getAmount(
                                              d.PLAYTYPE_PLAYER
                                          ) > 0 &&
                                          ((f = d.PLAYTYPE_PLAYER),
                                          (C = c.playerName),
                                          (l = Math.ceil(
                                              c.pJetton *
                                                  d.VideoPlazaStore.instance
                                                      .currencyRate
                                          ))),
                                        0 !== f
                                            ? this.dispatchAction(d.Mn, {
                                                  popupType: f,
                                                  userName: C,
                                                  jetton: l,
                                                  currentBetAmount: this.donePool.getAmount(
                                                      f
                                                  )
                                              })
                                            : this.dispatchAction(d.Mn);
                                } else
                                    2 === m.LedStore.instance.loginType &&
                                        this.dispatchAction(d.Mn);
                        }
                    }
                }),
                (t.prototype.payoutTimeoutDo = function(t) {
                    n.prototype.payoutTimeoutDo.call(this, t),
                        this.dispatchAction(d.k, {
                            seatNum: this.mySeatNum,
                            payouts: t.ptPayouts
                        });
                }),
                (t.prototype.payoutOtherTimeoutDo = function(t) {
                    var e = m.TableSeatStore.instance.getPlayer(t.loginname);
                    null != e &&
                        this.dispatchAction(d.k, {
                            seatNum: e.seat,
                            payouts: t.ptPayouts,
                            loginname: e.loginname
                        });
                }),
                (t.prototype.addChipByPlayType = function(t, e) {
                    for (var i = [], r = 2; r < arguments.length; r++)
                        i[r - 2] = arguments[r];
                    var s = n.prototype.addChipByPlayType.call(this, t, e, i);
                    return (
                        s &&
                            0 !== this.mySeatNum &&
                            m.LedGameSocket.instance.writeBytes(
                                d.getPlayerPreBet(
                                    this.vid,
                                    this.gmcode,
                                    Core.LoginStore.instance.loginName,
                                    d.UserStore.instance.balance,
                                    this.mySeatNum,
                                    1,
                                    s.playType,
                                    s.amount
                                )
                            ),
                        s
                    );
                }),
                (t.prototype.repeatBet = function() {
                    if (
                        (n.prototype.repeatBet.call(this),
                        this.stakePool.totalAmount > 0)
                    )
                        for (
                            var t, e = this.stakePool.getAllStakeData(), i = 0;
                            i < e.length;
                            i++
                        )
                            (t = e[i]),
                                0 !== this.mySeatNum &&
                                    m.LedGameSocket.instance.writeBytes(
                                        d.getPlayerPreBet(
                                            this.vid,
                                            this.gmcode,
                                            Core.LoginStore.instance.loginName,
                                            d.UserStore.instance.balance,
                                            this.mySeatNum,
                                            1,
                                            t.playType,
                                            t.amount
                                        )
                                    );
                }),
                (t.prototype.cancelBet = function(t) {
                    void 0 === t && (t = !0),
                        n.prototype.cancelBet.call(this, t),
                        0 !== this.mySeatNum &&
                            m.LedGameSocket.instance.writeBytes(
                                d.getPlayerPreBet(
                                    this.vid,
                                    this.gmcode,
                                    Core.LoginStore.instance.loginName,
                                    d.UserStore.instance.balance,
                                    this.mySeatNum,
                                    0,
                                    d.PLAYTYPE_PLAYER,
                                    0
                                )
                            );
                }),
                (t.prototype.confiremBetPopup = function(t, e) {
                    this.dispatchAction(d.Dn, { amount: t, playType: e });
                }),
                (t.prototype.returnAddBetPopup = function() {
                    this.dispatchAction(d.Hn);
                }),
                t
            );
        })(d.BetStoreBaseBac);
        (m.BetTableStore = t),
            __reflect(t.prototype, 'VideoGameCore.Led.BetTableStore');
    })((t = d.Led || (d.Led = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(u) {
    var t;
    !(function(h) {
        var t = (function(e) {
            function t() {
                var t = e.call(this) || this;
                return (
                    (t.username = ''),
                    (t.nickname = ''),
                    (t.color = 0),
                    (t.timeout = 0),
                    (t.cutingShoe = !1),
                    (t.socketList = [h.LedGameSocket.instance]),
                    t
                );
            }
            return (
                __extends(t, e),
                (t.prototype.isMe = function() {
                    return Core.LoginStore.instance.loginName === this.username;
                }),
                (t.prototype.onSocketData = function(t, e) {
                    var i = this.gameStatus;
                    switch (t.respId) {
                        case u.CUT_SHOE_INFO:
                            var r = t;
                            r.vid === h.LedStore.instance.vid &&
                                r.username &&
                                (8 == i || 11 == i
                                    ? (this.cutingShoe = !0)
                                    : (this.cutingShoe = !1));
                            break;
                        case u.ft:
                            this.cutingShoe = !1;
                            break;
                        case u.CUT_SHOE_START:
                            var s = t;
                            s.vid === h.LedStore.instance.vid &&
                                ((this.username = s.username),
                                (this.nickname = s.nickname),
                                (this.color = s.color),
                                (this.timeout = s.timeout),
                                (this.cutingShoe = !0),
                                this.startCountDown(),
                                this.dispatchAction(u.Un));
                            break;
                        case u.Pr:
                            var n = t;
                            n.vid === h.LedStore.instance.vid &&
                                (Core.NonstopTimer.instance.clearInterval(
                                    this.countDownInterval
                                ),
                                0 === n.result
                                    ? this.isMe()
                                        ? this.dispatchAction(u.Fn)
                                        : this.dispatchAction(u.Kn)
                                    : n.result ===
                                      u.ERROR_CODE.PLAYER_SKIP_CUT_SHOE
                                        ? this.dispatchAction(u.Kn)
                                        : n.result ===
                                              u.ERROR_CODE.SHOE_ALREADY_CUT &&
                                          this.dispatchAction(u.Zn));
                            break;
                        case u.VIP_NEW_SHOE:
                            var o = t;
                            o.vid === h.LedStore.instance.vid &&
                                (Core.NonstopTimer.instance.clearInterval(
                                    this.countDownInterval
                                ),
                                this.dispatchAction(u.Yn));
                            break;
                        case u.lt:
                            var a = t;
                            this.gameStatus = a.status;
                    }
                }),
                (t.prototype.startCountDown = function() {
                    this.timeout > 0 &&
                        !Core.NonstopTimer.instance.hasInterval(
                            this.countDownInterval
                        ) &&
                        (this.countDown(),
                        (this.countDownInterval = Core.NonstopTimer.instance.setInterval(
                            this.countDown,
                            this,
                            1e3
                        )));
                }),
                (t.prototype.countDown = function() {
                    this.timeout > 0
                        ? (this.timeout--, this.dispatchAction(u._t))
                        : (Core.NonstopTimer.instance.clearInterval(
                              this.countDownInterval
                          ),
                          this.dispatchAction(u.qn));
                }),
                (t.prototype.requestCutShoeConfirm = function(t) {
                    this.isMe() &&
                        this.timeout > 0 &&
                        h.LedGameSocket.instance.writeBytes(
                            u.getCutShoeConfirmedCmd(
                                h.LedStore.instance.vid,
                                Core.LoginStore.instance.loginName,
                                Core.LoginStore.instance.nickName,
                                t
                            )
                        );
                }),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                t
            );
        })(Core.NetworkStoreBase);
        (h.CutShoeStore = t),
            __reflect(t.prototype, 'VideoGameCore.Led.CutShoeStore');
    })((t = u.Led || (u.Led = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(l) {
    var t;
    !(function(n) {
        var t = (function(e) {
            function t() {
                var t = e.call(this) || this;
                return (
                    (t.loginType = 0),
                    (t.seat = -1),
                    (t.btnStatus = 3),
                    (t.socketList = [n.LedGameSocket.instance]),
                    t
                );
            }
            return (
                __extends(t, e),
                Object.defineProperty(t.prototype, 'waitMeEnabled', {
                    get: function() {
                        return (
                            n.BetTableStore.instance.betEnabled &&
                            (0 === this.btnStatus || 1 === this.btnStatus)
                        );
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, 'openCardEnabled', {
                    get: function() {
                        return (
                            n.BetTableStore.instance.betEnabled &&
                            (0 === this.btnStatus || 2 === this.btnStatus)
                        );
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.onSocketConnected = function(t) {
                    t.writeBytes(
                        l.getCMDClientLoginGame(
                            Core.LoginStore.instance.loginName,
                            Core.LoginStore.instance.token,
                            Core.gn
                        )
                    );
                }),
                (t.prototype.onSocketData = function(t, e) {
                    switch (t.respId) {
                        case l.Se:
                            var i = t;
                            0 == i.retCode ||
                                Core.globalStore.dispatchGlobal(l.pn);
                            break;
                        case l.LED_LAST_POSITION:
                            var r = t;
                            r.isReconnect
                                ? ((this.seat = r.seat),
                                  (this.tableCode = r.table),
                                  this.checkLoginType(),
                                  this.dispatchAction(),
                                  e.writeBytes(
                                      l.getCMDVipAutoEnterTable(
                                          this.vid,
                                          this.loginType
                                      )
                                  ))
                                : e.writeBytes(
                                      l.getCMDVipAutoEnterTable(
                                          this.vid,
                                          this.loginType
                                      )
                                  );
                            break;
                        case l.oi:
                            var s = t;
                            0 == s.code || 23 == s.code
                                ? ((this.seat = s.seat),
                                  (this.tableCode = s.table),
                                  this.checkLoginType(),
                                  (Core.ChatStore.instance.seatNum =
                                      2 == this.loginType ? s.seat : 0),
                                  this.dispatchAction(l.de),
                                  e.writeBytes(l.getCMDGetGameCurrentStatus()),
                                  Core.NonstopTimer.instance.setTimeout(
                                      function() {
                                          Core.globalStore.dispatchGlobal(l.zn);
                                      },
                                      this,
                                      1e3
                                  ))
                                : Core.globalStore.dispatchGlobal(l.pn, s.code);
                            break;
                        case l.Ae:
                            var n = t;
                            this.dispatchAction(l.kn, n.roundNum);
                            break;
                        case l.gt:
                            var o = t;
                            -2 === o.action &&
                                o.loginname ===
                                    Core.LoginStore.instance.loginName &&
                                this.dispatchAction(l.wn);
                            break;
                        case l.dr:
                            var a = t;
                            0 == a.code &&
                                0 != a.playerNum &&
                                this.dispatchAction(l.Jn, a);
                            break;
                        case l.CLIENT_LIST:
                            var h = t;
                            0 == h.playerNum && this.dispatchAction(l.Wn);
                            break;
                        case l.TURN_CARD_COMMAND:
                            var u = t;
                            u.vid === this.vid &&
                                8 == u.code &&
                                0 != u.seatNum &&
                                this.dispatchAction(l.Jn, u);
                            break;
                        case l.mt:
                            this.requestBtnStatus();
                            break;
                        case l.FUNCTION_BUTTON_STATUS:
                            var c = t;
                            this.vid === c.vid &&
                                c.userName ===
                                    Core.LoginStore.instance.loginName &&
                                ((this.btnStatus = c.btnStatus),
                                this.dispatchAction(l.In));
                            break;
                        case l.Oi:
                            var f = t;
                            this.dispatchAction(l.si, f);
                            break;
                        case l.ji:
                            this.dispatchAction(l.ri, t);
                            break;
                        case l.Ri:
                            var C = t;
                            this.dispatchAction(l.Rn, C);
                    }
                }),
                (t.prototype.requestWaitMe = function() {
                    2 === this.loginType &&
                        ((this.btnStatus = 3),
                        this.dispatchAction(l.In),
                        n.LedGameSocket.instance.writeBytes(
                            l.getCMDExecuteCmd(
                                Core.LoginStore.instance.loginName,
                                this.vid,
                                n.BetTableStore.instance.gmcode,
                                7,
                                this.seat
                            )
                        ));
                }),
                (t.prototype.requestOpenCard = function() {
                    2 === this.loginType &&
                        ((this.btnStatus = 3),
                        this.dispatchAction(l.In),
                        n.LedGameSocket.instance.writeBytes(
                            l.getCMDExecuteCmd(
                                Core.LoginStore.instance.loginName,
                                this.vid,
                                n.BetTableStore.instance.gmcode,
                                8,
                                this.seat
                            )
                        ));
                }),
                (t.prototype.requestBtnStatus = function() {
                    n.BetTableStore.instance.gmcode &&
                        n.LedGameSocket.instance.writeBytes(
                            l.getCMDExecuteCmd(
                                Core.LoginStore.instance.loginName,
                                this.vid,
                                n.BetTableStore.instance.gmcode,
                                9,
                                this.seat
                            )
                        );
                }),
                (t.prototype.sendFeeForDealer = function(t, e) {
                    l.UserStore.instance.balance >=
                    l.VideoPlazaStore.instance.selectedChipValue
                        ? n.LedGameSocket.instance.writeBytes(l.getFeeCmd(t, e))
                        : this.dispatchAction(l.i);
                }),
                (t.prototype.requestTipsList = function(t, e, i, r, s) {
                    n.LedGameSocket.instance.writeBytes(
                        l.getDealerTipsHist(t, e, i, r, s)
                    );
                }),
                (t.prototype.getDisplayName = function(t, e) {
                    var i = n.TableSeatStore.instance.getPlayer(t),
                        r = '***';
                    return (
                        i &&
                            (r = Core.getAnonymousName(
                                i.loginname,
                                i.nickname
                            )),
                        2 == this.loginType &&
                            this.seat == e &&
                            (r = Core.LoginStore.instance.nickName),
                        r
                    );
                }),
                (t.prototype.release = function() {
                    e.prototype.release.call(this);
                }),
                (t.prototype.onSocketDie = function(t) {
                    t === n.LedGameSocket.instance &&
                        Core.globalStore.dispatchGlobal(l.oe);
                }),
                (t.prototype.checkLoginType = function() {
                    -1 != this.tableCode.indexOf('VV')
                        ? (this.loginType = 2)
                        : (this.loginType = 1);
                }),
                (t.prototype.fullPeople = function() {
                    this.dispatchAction(l.Qn);
                }),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                t
            );
        })(Core.NetworkStoreBase);
        (n.LedStore = t), __reflect(t.prototype, 'VideoGameCore.Led.LedStore');
    })((t = l.Led || (l.Led = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(g) {
    var t;
    !(function(V) {
        var t = (function(P) {
            function t() {
                var t = P.call(this) || this;
                return (
                    (t.bMouseInfoList = [null, null, null]),
                    (t.pMouseInfoList = [null, null, null]),
                    (t.whoMiCard = 0),
                    (t.miPaiType = 0),
                    (t.playerName = ''),
                    (t.bankerName = ''),
                    (t.miCardTotalTime = 25),
                    (t.miCardTimeout = 0),
                    (t.countDownInterval = 0),
                    (t.cardColor = 0),
                    (t.mouseMiCardTimer = [0, 0, 0, 0, 0, 0]),
                    (t.mouseInfosList = [[], [], [], [], [], []]),
                    (t.ingoreServerMouseInfo = [!1, !1]),
                    (t.socketList = [V.LedGameSocket.instance]),
                    t
                );
            }
            return (
                __extends(t, P),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.resetAll = function() {
                    P.prototype.resetAll.call(this),
                        (this.bMouseInfoList = [null, null, null]),
                        (this.pMouseInfoList = [null, null, null]),
                        (this.whoMiCard = 0),
                        (this.miPaiType = 0),
                        (this.playerName = ''),
                        (this.bankerName = ''),
                        (this.miCardTotalTime = 25),
                        (this.miCardTimeout = 0),
                        Core.NonstopTimer.instance.clearInterval(
                            this.countDownInterval
                        ),
                        (this.countDownInterval = 0),
                        this.mouseMiCardTimer.forEach(function(t) {
                            Core.NonstopTimer.instance.clearTimeout(t);
                        }, this),
                        (this.mouseMiCardTimer = [0, 0, 0, 0, 0, 0]),
                        (this.mouseInfosList = [[], [], [], [], [], []]),
                        (this.ingoreServerMouseInfo = [!1, !1]);
                }),
                (t.prototype.onSocketConnected = function(t) {}),
                (t.prototype.onSocketData = function(t, e) {
                    var i = this;
                    if (
                        (t.respId !== g.mt &&
                            P.prototype.onSocketData.call(this, t, e),
                        !t.vid || this.vid === t.vid)
                    )
                        switch (t.respId) {
                            case g.Ye:
                                var r = t;
                                r.index > this.pokerDataQue.length &&
                                    (this.pokerDataQue.push(
                                        new g.PokerData(
                                            r.card,
                                            r.who,
                                            r.index,
                                            !1
                                        )
                                    ),
                                    this.parsePokerDataQue(),
                                    this.dispatchAction(g.vt));
                                break;
                            case g.TURNCARD_PERSON:
                                var s = t;
                                s.playerName ==
                                Core.LoginStore.instance.loginName
                                    ? ((this.whoMiCard = 1),
                                      '' == s.bankerName
                                          ? (this.miPaiType = 3)
                                          : (this.miPaiType = 2))
                                    : s.bankerName ==
                                      Core.LoginStore.instance.loginName
                                        ? ((this.whoMiCard = 2),
                                          '' == s.playerName
                                              ? (this.miPaiType = 3)
                                              : (this.miPaiType = 2))
                                        : ((this.whoMiCard = 0),
                                          (this.miPaiType = 1)),
                                    this.dispatchAction(g.Xn),
                                    (this.playerName = s.playerName),
                                    (this.bankerName = s.bankerName),
                                    (this.miCardTotalTime =
                                        3 == s.which ||
                                        4 == s.which ||
                                        8 == s.which
                                            ? 25
                                            : 15),
                                    (this.miCardTimeout =
                                        this.miCardTotalTime - s.timeout),
                                    this.startCountDown();
                                var n =
                                    3 == s.which || 4 == s.which || 8 == s.which
                                        ? 0
                                        : 2;
                                if (2 == n) {
                                    for (
                                        var o = 0;
                                        o < this.pokerDataQue.length;
                                        o++
                                    ) {
                                        var a = this.pokerDataQue[o];
                                        a.index <= 4 && (a.show = !0);
                                    }
                                    this.parsePokerDataQue();
                                }
                                this.dispatchAction(g.vt);
                                break;
                            case g.VIP_SHOW_CARD:
                                for (
                                    var h = t, u = 0, c = 0, o = 0;
                                    o < this.pokerDataQue.length;
                                    o++
                                ) {
                                    var a = this.pokerDataQue[o];
                                    if (
                                        (1 == h.forWho &&
                                            0 == a.who &&
                                            0 == h.index) ||
                                        (2 == h.forWho &&
                                            1 == a.who &&
                                            0 == h.index) ||
                                        (3 == h.forWho && 0 == h.index)
                                    )
                                        a.show = !0;
                                    else if (
                                        (1 == h.forWho && 0 == a.who) ||
                                        (2 == h.forWho && 1 == a.who)
                                    ) {
                                        if ((u++, u == h.index)) {
                                            a.show = !0;
                                            break;
                                        }
                                    } else
                                        3 == h.forWho &&
                                            (0 == a.who &&
                                                (u++,
                                                u == h.index && (a.show = !0)),
                                            1 == a.who &&
                                                (c++,
                                                c == h.index && (a.show = !0)));
                                }
                                this.parsePokerDataQue(),
                                    this.dispatchAction(g.vt);
                                break;
                            case g.TURNCARD_MOUSE_MI_CARD_MOBILE:
                                var f = t;
                                if (this.ingoreServerMouseInfo[f.whoMiCard])
                                    break;
                                var C = 3 * f.whoMiCard + f.cardIndex - 1;
                                if (
                                    ((this.mouseInfosList[
                                        C
                                    ] = this.mouseInfosList[C].concat(
                                        f.mouseInfos
                                    )),
                                    Core.NonstopTimer.instance.hasInterval(
                                        this.mouseMiCardTimer[C]
                                    ))
                                ) {
                                    if (this.mouseInfosList[C].length > 4) {
                                        var l = [];
                                        f.mouseInfos.forEach(function(t) {
                                            if (i.mouseInfosList[C].length > 4)
                                                if (
                                                    (t.baseX < -5 &&
                                                        t.baseY < -5) ||
                                                    (t.x < -5 && t.y < -5) ||
                                                    0 == l.length
                                                )
                                                    l.push(t);
                                                else {
                                                    var e = l[l.length - 1];
                                                    (e.x == t.x &&
                                                        e.y == t.y &&
                                                        Math.abs(
                                                            e.baseX - t.baseX
                                                        ) < 0.05 &&
                                                        Math.abs(
                                                            e.baseY - t.baseY
                                                        ) < 0.05) ||
                                                        l.push(t);
                                                }
                                        }, this),
                                            l.length <
                                                this.mouseInfosList[C].length &&
                                                (this.mouseInfosList[C] = l);
                                    }
                                } else
                                    0 != f.mouseInfos.length &&
                                        (this.mouseMiCardTimer[
                                            C
                                        ] = Core.NonstopTimer.instance.setInterval(
                                            function() {
                                                var t = i.mouseInfosList[
                                                    C
                                                ].shift();
                                                !t ||
                                                (t.baseX < -5 &&
                                                    t.baseY < -5) ||
                                                (t.x < -5 && t.y < -5)
                                                    ? 1 == f.whoMiCard
                                                        ? (i.bMouseInfoList[
                                                              f.cardIndex - 1
                                                          ] = null)
                                                        : (i.pMouseInfoList[
                                                              f.cardIndex - 1
                                                          ] = null)
                                                    : 1 == f.whoMiCard
                                                        ? (i.bMouseInfoList[
                                                              f.cardIndex - 1
                                                          ] = t)
                                                        : (i.pMouseInfoList[
                                                              f.cardIndex - 1
                                                          ] = t),
                                                    i.dispatchAction(g.vt),
                                                    0 ===
                                                        i.mouseInfosList[C]
                                                            .length &&
                                                        (Core.NonstopTimer.instance.clearInterval(
                                                            i.mouseMiCardTimer[
                                                                C
                                                            ]
                                                        ),
                                                        (i.mouseMiCardTimer[
                                                            C
                                                        ] = 0));
                                            },
                                            this,
                                            10
                                        ));
                                break;
                            case g.VIP_NEW_SHOE:
                                var m = t;
                                m.vid === V.LedStore.instance.vid &&
                                    (this.cardColor = m.cardColor);
                                break;
                            case g.CUT_SHOE_START:
                                var d = t;
                                this.cardColor = d.color;
                                break;
                            case g.CUT_SHOE_INFO:
                                var v = t;
                                v.vid === V.LedStore.instance.vid &&
                                    (this.cardColor = v.color);
                                break;
                            case g.mt:
                                var G = t;
                                if (
                                    ((this.cardColor = G.bColor),
                                    this.resetAll(),
                                    5 == G.vipStatus
                                        ? ((this.miCardTimeout =
                                              G.miCardTimeout),
                                          this.startCountDown())
                                        : (this.miCardTimeout = 0),
                                    11 != G.status && 0 != G.status)
                                ) {
                                    for (
                                        var u = 0, o = 0;
                                        o < G.pcards.length;
                                        o++
                                    )
                                        0 != G.pcards[o] &&
                                            (u++,
                                            this.pokerDataQue.push(
                                                new g.PokerData(
                                                    G.pcards[o],
                                                    0,
                                                    u,
                                                    1 == G.pShowCards[o]
                                                )
                                            ));
                                    for (var o = 0; o < G.bcards.length; o++)
                                        0 != G.bcards[o] &&
                                            (u++,
                                            this.pokerDataQue.push(
                                                new g.PokerData(
                                                    G.bcards[o],
                                                    1,
                                                    u,
                                                    1 == G.bShowCards[o]
                                                )
                                            ));
                                    this.parsePokerDataQue(),
                                        this.dispatchAction(g.vt);
                                }
                                break;
                            case g.Nt:
                                var _ = t;
                                if (
                                    V.BetTableStore.instance.gmcode === _.code
                                ) {
                                    for (
                                        var o = 0;
                                        o < this.pokerDataQue.length;
                                        o++
                                    ) {
                                        var a = this.pokerDataQue[o];
                                        a && (a.show = !0);
                                    }
                                    this.parsePokerDataQue(),
                                        this.dispatchAction(g.vt),
                                        (this.resultTimer = Core.NonstopTimer.instance.setTimeout(
                                            function() {
                                                (this.pScore = _.pval),
                                                    (this.bScore = _.bval),
                                                    (this.pWin = !1),
                                                    (this.bWin = !1),
                                                    (this.tie = !1),
                                                    this.pScore > this.bScore
                                                        ? (this.pWin = !0)
                                                        : this.pScore <
                                                          this.bScore
                                                            ? (this.bWin = !0)
                                                            : this.pScore ===
                                                                  this.bScore &&
                                                              (this.tie = !0),
                                                    (this.bPair =
                                                        1 === _.pair ||
                                                        3 === _.pair),
                                                    (this.pPair =
                                                        2 === _.pair ||
                                                        3 === _.pair),
                                                    this.dispatchAction(g.vt);
                                            },
                                            this,
                                            g.StreamConfig.instance.getAverageDelay() -
                                                10
                                        )),
                                        (this.resetTimer = Core.NonstopTimer.instance.setTimeout(
                                            function() {
                                                this.resetAll(),
                                                    this.dispatchAction(g.vt);
                                            },
                                            this,
                                            2e4
                                        ));
                                }
                                break;
                            case g.ki:
                                var b = t;
                                if (
                                    V.BetTableStore.instance.gmcode === b.code
                                ) {
                                    this.resetAll();
                                    for (
                                        var u = 0, o = 0;
                                        o < b.playerCardList.length;
                                        o++
                                    )
                                        0 != b.playerCardList[o] &&
                                            (u++,
                                            this.pokerDataQue.push(
                                                new g.PokerData(
                                                    b.playerCardList[o],
                                                    0,
                                                    u,
                                                    !0
                                                )
                                            ));
                                    for (
                                        var o = 0;
                                        o < b.bankerCardList.length;
                                        o++
                                    )
                                        0 != b.bankerCardList[o] &&
                                            (u++,
                                            this.pokerDataQue.push(
                                                new g.PokerData(
                                                    b.bankerCardList[o],
                                                    1,
                                                    u,
                                                    !0
                                                )
                                            ));
                                    this.parsePokerDataQue(),
                                        this.dispatchAction(g.vt),
                                        (this.resultTimer = Core.NonstopTimer.instance.setTimeout(
                                            function() {
                                                (this.pScore = b.pval),
                                                    (this.bScore = b.bval),
                                                    (this.pWin = !1),
                                                    (this.bWin = !1),
                                                    (this.tie = !1),
                                                    this.pScore > this.bScore
                                                        ? (this.pWin = !0)
                                                        : this.pScore <
                                                          this.bScore
                                                            ? (this.bWin = !0)
                                                            : this.pScore ===
                                                                  this.bScore &&
                                                              (this.tie = !0),
                                                    (this.bPair =
                                                        (8 & b.overallRes) >>
                                                            3 ===
                                                        1),
                                                    (this.pPair =
                                                        (16 & b.overallRes) >>
                                                            4 ===
                                                        1),
                                                    this.dispatchAction(g.vt);
                                            },
                                            this,
                                            g.StreamConfig.instance.getAverageDelay() -
                                                10
                                        )),
                                        (this.resetTimer = Core.NonstopTimer.instance.setTimeout(
                                            function() {
                                                this.resetAll(),
                                                    this.dispatchAction(g.vt);
                                            },
                                            this,
                                            2e4
                                        ));
                                }
                        }
                }),
                (t.prototype.startCountDown = function() {
                    this.miCardTimeout > 0 &&
                        !Core.NonstopTimer.instance.hasInterval(
                            this.countDownInterval
                        ) &&
                        (this.countDown(),
                        (this.countDownInterval = Core.NonstopTimer.instance.setInterval(
                            this.countDown,
                            this,
                            1e3
                        )));
                }),
                (t.prototype.countDown = function() {
                    this.miCardTimeout > 0
                        ? (this.miCardTimeout--, this.dispatchAction(g._t))
                        : (Core.NonstopTimer.instance.clearInterval(
                              this.countDownInterval
                          ),
                          this.dispatchAction(g._t));
                }),
                (t.prototype.askShowCard = function(t, e) {
                    V.LedGameSocket.instance.writeBytes(
                        g.getShowCardCmd(
                            this.vid,
                            V.BetTableStore.instance.gmcode,
                            t,
                            e
                        )
                    );
                }),
                (t.prototype.miCard = function(t, e, i) {
                    (this.ingoreServerMouseInfo[e] = !0),
                        V.LedGameSocket.instance.writeBytes(
                            g.getMouseMiCardCmd(this.vid, e, t, i)
                        );
                }),
                (t.prototype.release = function() {
                    P.prototype.release.call(this);
                }),
                t
            );
        })(g.PokerBaseStore);
        (V.PokerStore = t),
            __reflect(t.prototype, 'VideoGameCore.Led.PokerStore');
    })((t = g.Led || (g.Led = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(u) {
    var t;
    !(function(h) {
        var t = (function(a) {
            function t() {
                var t = a.call(this) || this;
                return (t.socketList = [h.LedGameSocket.instance]), t;
            }
            return (
                __extends(t, a),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.onSocketData = function(t, e) {
                    var i = this.gameStatus;
                    if (
                        (t.respId != u.lt &&
                            a.prototype.onSocketData.call(this, t, e),
                        !t.vid || this.vid === t.vid)
                    )
                        switch (t.respId) {
                            case u.CUT_SHOE_INFO:
                                var r = t;
                                r.vid === h.LedStore.instance.vid &&
                                    r.username &&
                                    (8 == i || 11 == i) &&
                                    ((this.gameStatus = 8),
                                    this.dispatchAction(u._t));
                                break;
                            case u.di:
                                var s = t;
                                (this.gameStatus = s.status),
                                    (this.timeout = s.timeout),
                                    (this.maxTimeout = 24),
                                    this.startCountDown(),
                                    11 === s.status
                                        ? h.CutShoeStore.instance.cutingShoe
                                            ? ((this.gameStatus = 8),
                                              this.dispatchAction(u._t))
                                            : this.dispatchAction(u.it)
                                        : this.dispatchAction(),
                                    3 === i &&
                                        2 === this.gameStatus &&
                                        (this.gameStatus = 3),
                                    3 !== i &&
                                        3 === this.gameStatus &&
                                        this.dispatchAction(u.w);
                                break;
                            case u.lt:
                                var n = t;
                                (this.gameStatus = n.status),
                                    this.updateTimeout(
                                        n.max_timeout,
                                        n.timeout
                                    ),
                                    8 === i &&
                                        11 === this.gameStatus &&
                                        (this.gameStatus = 8),
                                    11 === n.status
                                        ? this.dispatchAction(u.it)
                                        : this.dispatchAction(u.st, n.vid),
                                    3 !== i &&
                                        3 === this.gameStatus &&
                                        this.dispatchAction(u.w);
                                break;
                            case u.VIP_NEW_SHOE:
                                var o = t;
                                o.vid === h.LedStore.instance.vid &&
                                    ((this.gameStatus = 0),
                                    this.dispatchAction(u.st));
                                break;
                            case u.Ye:
                                2 !== this.gameStatus &&
                                    3 !== this.gameStatus &&
                                    ((this.gameStatus = 2),
                                    this.dispatchAction(u.w));
                                break;
                            case u.TURNCARD_PERSON:
                                3 !== this.gameStatus &&
                                    ((this.gameStatus = 3),
                                    this.dispatchAction(u.w));
                        }
                }),
                (t.prototype.onGameCurrentStatus = function(t) {
                    var e = this.gameStatus;
                    a.prototype.onGameCurrentStatus.call(this, t),
                        8 === e &&
                            11 === this.gameStatus &&
                            ((this.gameStatus = 8), this.dispatchAction(u._t));
                }),
                (t.prototype.countDown = function() {
                    this.timeout > 0
                        ? (this.timeout--, this.dispatchAction(u._t))
                        : (Core.NonstopTimer.instance.clearInterval(
                              this.countDownInterval
                          ),
                          1 === this.gameStatus && (this.gameStatus = 6),
                          this.dispatchAction(u._t));
                }),
                (t.prototype.release = function() {
                    a.prototype.release.call(this);
                }),
                t
            );
        })(u.RoomTimerBaseStore);
        (h.RoomTimerStore = t),
            __reflect(t.prototype, 'VideoGameCore.Led.RoomTimerStore');
    })((t = u.Led || (u.Led = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(o) {
    var t;
    !(function(e) {
        var t = (function(n) {
            function t() {
                var t = n.call(this) || this;
                return (t.socketList = [e.LedGameSocket.instance]), t;
            }
            return (
                __extends(t, n),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.onSocketData = function(t, e) {
                    var i = this;
                    if (
                        (n.prototype.onSocketData.call(this, t, e),
                        !t.vid || this.vid === t.vid)
                    )
                        switch (t.respId) {
                            case o.LED_LAST_POSITION:
                                var r = t;
                                (r.vid = this.vid),
                                    this.setPlayerData(r),
                                    (this.tableCode = o.getVipTableCodeFromVid(
                                        this.vid
                                    )),
                                    this.dispatchAction(
                                        o.zt,
                                        this.getPlayerList()
                                    );
                                break;
                            case o.CLIENT_LIST:
                                var s = t;
                                s.seatInfoArray.forEach(function(t) {
                                    (t.action = 2),
                                        (t.tableCode = o.getVipTableCodeFromVid(
                                            i.vid
                                        )),
                                        (t.loginname = t.userName),
                                        (t.nickname = t.nickName),
                                        (t.vid = s.vid),
                                        (t.credit = t.account),
                                        i.setPlayerData(t);
                                }, this),
                                    this.dispatchAction(
                                        o.zt,
                                        this.getPlayerList()
                                    );
                        }
                }),
                (t.prototype.onUserPosition = function(t) {
                    for (var e = 0; e < t.players.length; e++)
                        this.setPlayerData(t.players[e]);
                    (this.tableCode = o.getVipTableCodeFromVid(this.vid)),
                        this.dispatchAction(o.zt, this.getPlayerList());
                }),
                t
            );
        })(o.TableSeatBaseStore);
        (e.TableSeatStore = t),
            __reflect(t.prototype, 'VideoGameCore.Led.TableSeatStore');
    })((t = o.Led || (o.Led = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(h) {
    var t = (function(r) {
        function t() {
            var t = r.call(this) || this;
            (t.platforms = []),
                (t.vids = []),
                (t.visibleVids = []),
                (t.cachedVids = []),
                (t.playingIndex = 0),
                (t.plazaReconnected = !1),
                (t.lastBalSeq = -1),
                (t.isLogin = !1),
                (t.platforms = ['DSP', 'AGQ']),
                (t.roomInfosMap = new Core.HashMap()),
                h.RoomConfig.instance
                    .getAllRoomInfo()
                    .forEach(t.filterRoomInfo, t);
            var e = Core.StorageManager.instance.getItem(
                h.LINK_GAME_VIDS + Core.LoginStore.instance.userName
            );
            if (((t.visibleVids = t.vids.slice(0, 4)), e)) {
                var i = atob(e).split(' ');
                t.checkVidsValid(i) && (t.visibleVids = i);
            }
            return (
                (t.socketList = [
                    h.LinkGameSocket.instance,
                    h.PlazaSocket.instance
                ]),
                t
            );
        }
        return (
            __extends(t, r),
            (t.prototype.connectSocket = function() {
                h.LinkGameSocket.instance.autoConnect();
            }),
            (t.prototype.filterRoomInfo = function(t) {
                var e = h.PCGameConfig.instance.specialVidsConfig.hide,
                    i = e.indexOf(t.vid) >= 0 ? !0 : !1;
                if (
                    !i &&
                    this.platforms.indexOf(t.platformtype) >= 0 &&
                    this.isSupportedGameType(t.gmtype)
                ) {
                    var r = t.vid;
                    this.roomInfosMap.set(r, t), this.vids.push(t.vid);
                }
            }),
            (t.prototype.checkVidsValid = function(t) {
                if (4 == t.length) {
                    for (var e = 0; e < t.length; e++)
                        if (this.vids.indexOf(t[e]) < 0) return !1;
                    return !0;
                }
                return !1;
            }),
            (t.prototype.isSupportedGameType = function(t) {
                return (
                    [h.GAME_BAC, h.GAME_DT, h.GAME_ROU, h.GAME_SHB].indexOf(
                        t
                    ) >= 0
                );
            }),
            (t.prototype.onSocketConnected = function(t) {
                if (t == h.LinkGameSocket.instance) {
                    var e = Core.LoginStore.instance;
                    t.writeBytes(
                        h.getCMDMultitableClientLoginGame(e.loginName, e.token)
                    );
                }
            }),
            (t.prototype.onSocketData = function(t, e) {
                if (e == h.PlazaSocket.instance)
                    switch (t.respId) {
                        case h.$n:
                            for (
                                var i = t, r = 0, s = 0;
                                s < this.platforms.length;
                                s++
                            ) {
                                var n = i.mtStatusMap.get(this.platforms[s]);
                                r += n ? n.status : 0;
                            }
                            r == this.platforms.length &&
                                PCPlaza.RootPageStore.instance.backLobby();
                    }
                else
                    switch (t.respId) {
                        case h.MULTITABLE_NOBET_WARN:
                            this.dispatchAction(h.kn);
                            break;
                        case h.MULTITABLE_NOBET_KICKOUT:
                            Core.globalStore.dispatchGlobal(h.Tn);
                            break;
                        case h.Se:
                        case h.pr:
                            var o = t;
                            0 == o.retCode &&
                                e.writeBytes(h.getCMDEnterLink(4));
                            break;
                        case h.eo:
                        case h.io:
                            this.selectTables();
                            break;
                        case h.jr:
                            break;
                        case h.Rr:
                            var a = t;
                            (this.isLogin = !0), this.dispatchAction(h.de, a);
                            break;
                        case h.jt:
                            this.dispatchAction(h.G);
                    }
            }),
            (t.prototype.onSocketDie = function(t) {
                t === h.LinkGameSocket.instance &&
                    Core.globalStore.dispatchGlobal(h.oe);
            }),
            Object.defineProperty(t.prototype, 'noComm', {
                get: function() {
                    return (
                        'true' ===
                        Core.StorageManager.instance.getObject(h.COMM_FREE_KEY)[
                            h.GAME_LINK
                        ]
                    );
                },
                set: function(t) {
                    var e = Core.StorageManager.instance.getObject(
                        h.COMM_FREE_KEY
                    );
                    (e[h.GAME_LINK] = t ? 'true' : 'false'),
                        Core.StorageManager.instance.setObject(
                            h.COMM_FREE_KEY,
                            e
                        );
                    for (var i = 0; i < this.visibleVids.length; i++) {
                        var r = this.visibleVids[i],
                            s = h.LinkStoreFactory.instance.betTableStoreMap.get(
                                r
                            ),
                            n = h.RoomConfig.instance.getRoomInfoByVid(r)
                                .gmtype;
                        n === h.GAME_BAC && (s.noComm = t);
                    }
                    this.dispatchAction(h.J);
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(t.prototype, 'commToggleEnabled', {
                get: function() {
                    for (var t = !0, e = 0; e < this.visibleVids.length; e++) {
                        var i = this.visibleVids[e],
                            r = h.LinkStoreFactory.instance.betTableStoreMap.get(
                                i
                            ),
                            s = h.RoomConfig.instance.getRoomInfoByVid(i)
                                .gmtype;
                        if (s === h.GAME_BAC && !r.commToggleEnabled) {
                            t = !1;
                            break;
                        }
                    }
                    return t;
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.updateCommToggleEnabled = function() {
                this.dispatchAction(h.ro);
            }),
            (t.prototype.selectTables = function() {
                h.LinkGameSocket.instance.writeBytes(
                    h.getCMDRoadSelectVideos(this.visibleVids)
                );
            }),
            (t.prototype.changeTable = function(t, e) {
                var i = this.visibleVids.indexOf(t);
                if (0 > i)
                    (this.visibleVids[e] = t),
                        this.dispatchAction(h.so, { vid: t, index: e }),
                        Core.StorageManager.instance.setItem(
                            h.LINK_GAME_VIDS +
                                Core.LoginStore.instance.userName,
                            btoa(this.visibleVids.join(' '))
                        );
                else if (i != e) {
                    var r = this.visibleVids[e];
                    (this.visibleVids[e] = t),
                        this.dispatchAction(h.so, { vid: t, index: e }),
                        (this.visibleVids[i] = r),
                        this.dispatchAction(h.so, { vid: r, index: i }),
                        Core.StorageManager.instance.setItem(
                            h.LINK_GAME_VIDS +
                                Core.LoginStore.instance.userName,
                            btoa(this.visibleVids.join(' '))
                        );
                }
                this.selectTables();
            }),
            (t.prototype.selectVideo = function(t) {
                var e = this.visibleVids[t];
                (this.playingIndex = t),
                    (h.VideoFactory.instance.getVideoStoreById().vid = e);
            }),
            (t.prototype.closeVideo = function() {
                (this.playingIndex = -1), this.dispatchAction(h.O);
            }),
            (t.prototype.release = function() {
                r.prototype.release.call(this), this.closeVideo();
            }),
            Object.defineProperty(t, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.init = function() {
                return this.initInstance(this);
            }),
            t
        );
    })(Core.NetworkStoreBase);
    (h.GameLinkStore = t),
        __reflect(t.prototype, 'VideoGameCore.GameLinkStore');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(o) {
    var t = (function(e) {
        function t() {
            var t = e.call(this) || this;
            return (
                (t.betTableStoreMap = new Core.HashMap()),
                (t.pokerStoreMap = new Core.HashMap()),
                (t.roadMapStoreMap = new Core.HashMap()),
                (t.roomTimerStoreMap = new Core.HashMap()),
                (t.allBetTableStoreMap = new Core.HashMap()),
                t
            );
        }
        return (
            __extends(t, e),
            (t.prototype.setupStoresByVid = function(t) {
                if (
                    (this.setupTableStoresByVid(t),
                    !this.betTableStoreMap.has(t))
                ) {
                    if (this.allBetTableStoreMap.has(t)) {
                        var e = this.allBetTableStoreMap.get(t);
                        this.betTableStoreMap.set(t, e);
                    } else {
                        var i = o.RoomConfig.instance.getRoomInfoByVid(t);
                        if (i.gmtype !== o.GAME_ROU) {
                            var e = new o.MultiBetTableStore(t);
                            this.betTableStoreMap.set(t, e);
                        } else {
                            var r = new o.MultiBetTableStoreRou(t);
                            this.betTableStoreMap.set(t, r);
                        }
                    }
                    var s = new o.MultiPokerStore();
                    (s.vid = t), this.pokerStoreMap.set(t, s);
                }
            }),
            (t.prototype.setupTableStoresByVid = function(t) {
                if (!this.roadMapStoreMap.has(t)) {
                    var e = new o.MultiRoadMapStore();
                    (e.vid = t), this.roadMapStoreMap.set(t, e);
                    var i = new o.MultiRoomTimerStore();
                    (i.vid = t), this.roomTimerStoreMap.set(t, i);
                    var r = o.RoomConfig.instance.getRoomInfoByVid(t);
                    if (r.gmtype !== o.GAME_ROU) {
                        var s = new o.MultiBetTableStore(t);
                        this.allBetTableStoreMap.set(t, s);
                    } else {
                        var n = new o.MultiBetTableStoreRou(t);
                        this.allBetTableStoreMap.set(t, n);
                    }
                }
            }),
            (t.prototype.release = function() {
                e.prototype.release.call(this),
                    this.betTableStoreMap.forEach(function(t) {
                        t.release();
                    }, this),
                    this.pokerStoreMap.forEach(function(t) {
                        t.release();
                    }, this),
                    this.roadMapStoreMap.forEach(function(t) {
                        t.release();
                    }, this),
                    this.roomTimerStoreMap.forEach(function(t) {
                        t.release();
                    }, this);
            }),
            Object.defineProperty(t, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.init = function() {
                return this.initInstance(this);
            }),
            t
        );
    })(Core.SingletonDispatcher);
    (o.LinkStoreFactory = t),
        __reflect(t.prototype, 'VideoGameCore.LinkStoreFactory');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(e) {
        function t() {
            var t = e.call(this) || this;
            return (
                (t.itemPerPage = 6),
                (t.betRecordArrayMap = new Core.ArrayMap()),
                t
            );
        }
        return (
            __extends(t, e),
            Object.defineProperty(t, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.init = function() {
                return this.initInstance(this);
            }),
            (t.prototype.updateBetRecord = function(t) {
                for (var e = 0; e < t.length; e++) {
                    var i = t[e],
                        r = i.gmcode + '_' + i.playType,
                        s = this.betRecordArrayMap.get(r);
                    s
                        ? (i.betAmount && (s.betAmount = i.betAmount),
                          'undefined' != typeof i.betPayout &&
                              (s.betPayout = i.betPayout),
                          this.betRecordArrayMap.set(r, s))
                        : i.betAmount > 0 && this.betRecordArrayMap.set(r, i);
                }
                (this.dataList = this.betRecordArrayMap.values
                    .slice()
                    .reverse()),
                    this.dispatchAction();
            }),
            (t.prototype.getDataByPage = function(t) {
                return this.dataList.slice(
                    t * this.itemPerPage,
                    (t + 1) * this.itemPerPage
                );
            }),
            (t.prototype.clearDataList = function() {
                (this.dataList = []),
                    (this.betRecordArrayMap = new Core.ArrayMap());
            }),
            (t.prototype.release = function() {
                e.prototype.release.call(this);
            }),
            t
        );
    })(t.PaginationStoreBase);
    (t.MultiBetHistoryStore = e),
        __reflect(e.prototype, 'VideoGameCore.MultiBetHistoryStore');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(n) {
    var t = (function(s) {
        function t(t) {
            var e = s.call(this) || this;
            return (
                (e.vid = t),
                (e.stakePool = new n.StakePoolRou()),
                (e.donePool = new n.StakePoolRou()),
                (e.diffPool = new n.StakePoolRou()),
                (e.lastPool = new n.StakePoolRou()),
                e
            );
        }
        return (
            __extends(t, s),
            Object.defineProperty(t.prototype, 'roomTimerStore', {
                get: function() {
                    return n.LinkStoreFactory.instance.roomTimerStoreMap.get(
                        this.vid
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(t.prototype, 'roadMapStore', {
                get: function() {
                    return n.LinkStoreFactory.instance.roadMapStoreMap.get(
                        this.vid
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.onSocketData = function(t, e) {
                switch ((s.prototype.onSocketData.call(this, t, e), t.respId)) {
                    case n.MULTI_TABLE_ROU_BET_RES:
                        var i = t;
                        i.vid == this.vid && this.m(i);
                        break;
                    case n.Er:
                        var r = t;
                        r.vid == this.vid && this.V(r);
                }
            }),
            (t.prototype.m = function(e) {
                var t = this.diffPool.getStakeDataListBySeq(e.seqNo);
                t &&
                    t.forEach(function(t) {
                        (t.pending = !1), (t.success = 0 == e.retCode);
                    }),
                    0 !== e.retCode
                        ? this.cancelBet()
                        : (this.donePool.copy(this.stakePool),
                          this.lastPool.copy(this.donePool)),
                    0 !== e.retCode && this.dispatchAction(n.v, e.retCode),
                    this.diffPool.pending ||
                        (this.copyToDonePool(),
                        this.updateLastPool(),
                        this.betRespondDo()),
                    this.dispatchAction(n.G, 0 == e.retCode);
            }),
            (t.prototype.confirmBet = function() {
                var i = this;
                if ((this.dispatchAction(n.h), this.confirmEnabled)) {
                    var r = [];
                    (this.diffPool = this.stakePool.calculateDiff(
                        this.donePool
                    )),
                        this.diffPool.getAllStakeData().forEach(function(t) {
                            var e = t.playType;
                            t.amount <= 0 ||
                                (0 === i.checkLimit(e, i.stakePool.getAmount(e))
                                    ? r.push(t)
                                    : e === i.stakePool.getLastBetPlayType() &&
                                      n.UserStore.instance.balance -
                                          i.diffPool.totalAmount <
                                          1
                                        ? r.push(t)
                                        : (i.cancelBetByPlayType(e),
                                          i.dispatchAction(n.r)));
                        }),
                        r.length > 0 && this.sendBetBundleToServer(r);
                }
            }),
            (t.prototype.sendBetBundleToServer = function(t) {
                var e = this;
                if (!this.gameSocket.connected)
                    return (
                        t.forEach(function(t) {
                            e.cancelBetByPlayType(t.playType);
                        }),
                        this.dispatchAction(n.C),
                        void this.dispatchAction(Core.l)
                    );
                var i = Core.getSequence();
                n.LinkGameSocket.instance.writeBytes(
                    n.getCMDRouMultiTableBet(this.vid, this.gmcode, t, i)
                );
            }),
            (t.prototype.betRespondDo = function() {
                this.updateBetHistory(), this.storeBet();
            }),
            (t.prototype.storeBet = function() {
                this.stakePool.totalAmount > 0 &&
                    Core.StorageManager.instance.setItem(
                        this.vid,
                        this.stakePool.toJsonWithCode(
                            Core.LoginStore.instance.loginName + this.gmcode
                        )
                    );
            }),
            t
        );
    })(n.MultiBetTableStore);
    (n.MultiBetTableStoreRou = t),
        __reflect(t.prototype, 'VideoGameCore.MultiBetTableStoreRou');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(c) {
    var t = (function(u) {
        function t() {
            var t = u.call(this) || this;
            return (t.socketList = [c.LinkGameSocket.instance]), t;
        }
        return (
            __extends(t, u),
            (t.prototype.onSocketConnected = function(t) {}),
            (t.prototype.onSocketData = function(t, e) {
                var i = this;
                if (
                    (u.prototype.onSocketData.call(this, t, e),
                    !t.vid || this.vid === t.vid)
                )
                    switch (t.respId) {
                        case c.ut:
                        case c.ct:
                        case c.ft:
                        case c.Ct:
                            this.dispatchAction(c.Z);
                            break;
                        case c.lt:
                            var r = t;
                            11 == r.status && this.dispatchAction(c.it);
                            break;
                        case c.Ye:
                            var s = t,
                                n = c.StreamConfig.instance.getAverageDelay();
                            s.index >= 4 && (n += 1e3);
                            Core.NonstopTimer.instance.setTimeout(
                                function() {
                                    s.index > i.pokerDataQue.length &&
                                        (i.pokerDataQue.push(
                                            new c.PokerData(
                                                s.card,
                                                s.who,
                                                s.index
                                            )
                                        ),
                                        i.parsePokerDataQue(),
                                        i.dispatchAction(c.vt));
                                },
                                this,
                                n
                            );
                            break;
                        case c.Nt:
                            var o = t,
                                a = c.LinkStoreFactory.instance.betTableStoreMap.get(
                                    this.vid
                                );
                            a.gmcode === o.code &&
                                ((this.resultTimer = Core.NonstopTimer.instance.setTimeout(
                                    function() {
                                        (this.pScore = o.pval),
                                            (this.bScore = o.bval),
                                            (this.pWin = !1),
                                            (this.bWin = !1),
                                            (this.tie = !1),
                                            this.pScore > this.bScore
                                                ? (this.pWin = !0)
                                                : this.pScore < this.bScore
                                                    ? (this.bWin = !0)
                                                    : this.pScore ===
                                                          this.bScore &&
                                                      (this.tie = !0),
                                            this.dispatchAction(c.vt);
                                    },
                                    this,
                                    c.StreamConfig.instance.getAverageDelay() -
                                        10
                                )),
                                (this.resetTimer = Core.NonstopTimer.instance.setTimeout(
                                    function() {
                                        this.resetAll(),
                                            this.dispatchAction(c.vt);
                                    },
                                    this,
                                    2e4
                                )));
                            break;
                        case c.Mt:
                            var h = t;
                            (this.resultTimer = Core.NonstopTimer.instance.setTimeout(
                                function() {
                                    (this.pScore = h.tval),
                                        (this.bScore = h.dval),
                                        (this.pWin = !1),
                                        (this.bWin = !1),
                                        (this.tie = !1),
                                        this.pScore > this.bScore
                                            ? (this.pWin = !0)
                                            : this.pScore < this.bScore
                                                ? (this.bWin = !0)
                                                : this.pScore === this.bScore &&
                                                  (this.tie = !0),
                                        this.dispatchAction(c.vt);
                                },
                                this,
                                5e3
                            )),
                                (this.resetTimer = Core.NonstopTimer.instance.setTimeout(
                                    function() {
                                        this.resetAll(),
                                            this.dispatchAction(c.vt);
                                    },
                                    this,
                                    2e4
                                ));
                    }
            }),
            (t.prototype.parsePokerDataQue = function() {
                var t = c.RoomConfig.instance.getRoomInfoByVid(this.vid).gmtype;
                switch (t) {
                    case c.GAME_DT:
                        this.parseDtPokerDataQue();
                        break;
                    case c.GAME_BAC:
                    default:
                        this.parseBacPokerDataQue();
                }
            }),
            (t.prototype.parseBacPokerDataQue = function() {
                (this.bDataQue = []),
                    (this.pDataQue = []),
                    (this.pScore = 0),
                    (this.bScore = 0),
                    (this.bWin = !1),
                    (this.pWin = !1),
                    (this.tie = !1);
                for (var t = 0; t < this.pokerDataQue.length; t++) {
                    var e = this.pokerDataQue[t],
                        i = e.cardValue;
                    (i = 10 > i ? i : 0),
                        0 == e.who && this.pDataQue.length <= c.MAX_POKER_NUM
                            ? (this.pDataQue.push(e),
                              e.show && (this.pScore += i))
                            : 1 == e.who &&
                              this.bDataQue.length <= c.MAX_POKER_NUM &&
                              (this.bDataQue.push(e),
                              e.show && (this.bScore += i));
                }
                (this.pScore %= 10), (this.bScore %= 10);
            }),
            (t.prototype.parseDtPokerDataQue = function() {
                (this.bDataQue = []),
                    (this.pDataQue = []),
                    (this.pScore = 0),
                    (this.bScore = 0),
                    (this.bWin = !1),
                    (this.pWin = !1),
                    (this.tie = !1);
                for (var t = 0; t < this.pokerDataQue.length; t++) {
                    var e = this.pokerDataQue[t],
                        i = e.cardValue;
                    0 == e.who && this.bDataQue.length <= c.MAX_DT_POKER_NUM
                        ? (this.bDataQue.push(e), (this.bScore += i))
                        : 1 == e.who &&
                          this.pDataQue.length <= c.MAX_DT_POKER_NUM &&
                          (this.pDataQue.push(e), (this.pScore += i));
                }
            }),
            (t.prototype.checkDragonBonus = function(t, e, i) {
                if (4 == t) {
                    if (e > i && (8 == e || 9 == e)) return !0;
                } else if (e - i >= 4) return !0;
            }),
            Object.defineProperty(t.prototype, 'winPlayTypes', {
                get: function() {
                    var t = [],
                        e = c.RoomConfig.instance.getRoomInfoByVid(this.vid)
                            .gmtype;
                    if (e === c.GAME_BAC && this.bDataQue && this.pDataQue) {
                        var i = this.bDataQue.length + this.pDataQue.length;
                        this.bDataQue.length >= c.MAX_POKER_NUM &&
                            0 == this.bDataQue[c.MAX_POKER_NUM - 1].cardValue &&
                            i--,
                            this.pDataQue.length >= c.MAX_POKER_NUM &&
                                0 ==
                                    this.pDataQue[c.MAX_POKER_NUM - 1]
                                        .cardValue &&
                                i--,
                            i > 4 && t.push(c.PLAYTYPE_BIG),
                            4 >= i && t.push(c.PLAYTYPE_SMALL),
                            this.checkDragonBonus(
                                i,
                                this.bScore,
                                this.pScore
                            ) && t.push(c.PLAYTYPE_BANKER_DRAGON_BONUS),
                            this.checkDragonBonus(
                                i,
                                this.pScore,
                                this.bScore
                            ) && t.push(c.PLAYTYPE_PLAYER_DRAGON_BONUS);
                    }
                    return t;
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.release = function() {
                u.prototype.release.call(this);
            }),
            t
        );
    })(c.PokerBaseStore);
    (c.MultiPokerStore = t),
        __reflect(t.prototype, 'VideoGameCore.MultiPokerStore');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(u) {
    var t = (function(h) {
        function t() {
            var t = h.call(this) || this;
            return (t.socketList = [u.LinkGameSocket.instance]), t;
        }
        return (
            __extends(t, h),
            (t.prototype.onSocketData = function(t, e) {
                if (
                    (h.prototype.onSocketData.call(this, t, e),
                    !t.vid || this.vid === t.vid)
                )
                    switch (t.respId) {
                        case u.Gt:
                            var i = t;
                            this.onBeadList(i, e);
                            break;
                        case u.hr:
                            var r = t;
                            this.onBeadList(r, e);
                            break;
                        case u.Nt:
                            var s = t;
                            this.onGameResult(s, e);
                            break;
                        case u.Mt:
                            var n = t;
                            this.onGameResult(n, e);
                            break;
                        case u.X:
                            var o = t;
                            this.onShbGameResult(o, e);
                            break;
                        case u.Ht:
                            var a = t;
                            this.onRouGameResult(a, e);
                    }
            }),
            (t.prototype.onShbGameResult = function(t, e) {
                var i = this;
                (this.lastGmcode && this.lastGmcode === t.code) ||
                    (!this.lastGmcode ||
                    this.checkGmcodeValid(this.lastGmcode, t.code)
                        ? (this.timerId = Core.NonstopTimer.instance.setTimeout(
                              function() {
                                  !i.roadData ||
                                      (i.lastGmcode &&
                                          !i.checkGmcodeValid(
                                              i.lastGmcode,
                                              t.code
                                          )) ||
                                      ((i.lastGmcode = t.code),
                                      i.dispatchAction()),
                                      i.clearTimer();
                              },
                              this,
                              u.StreamConfig.instance.getAverageDelay()
                          ))
                        : this.requestBeadListAgain(e, this.vid));
            }),
            (t.prototype.onRouGameResult = function(t, e) {
                var i = this;
                (this.lastGmcode && this.lastGmcode === t.code) ||
                    (!this.lastGmcode ||
                    this.checkGmcodeValid(this.lastGmcode, t.code)
                        ? (this.timerId = Core.NonstopTimer.instance.setTimeout(
                              function() {
                                  !i.roadData ||
                                      (i.lastGmcode &&
                                          !i.checkGmcodeValid(
                                              i.lastGmcode,
                                              t.code
                                          )) ||
                                      ((i.lastGmcode = t.code),
                                      i.dispatchAction()),
                                      i.clearTimer();
                              },
                              this,
                              u.StreamConfig.instance.getAverageDelay()
                          ))
                        : this.requestBeadListAgain(e, this.vid));
            }),
            (t.prototype.release = function() {
                h.prototype.release.call(this);
            }),
            t
        );
    })(u.RoadMapBaseStore);
    (u.MultiRoadMapStore = t),
        __reflect(t.prototype, 'VideoGameCore.MultiRoadMapStore');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t = (function(r) {
        function t() {
            var t = r.call(this) || this;
            return (t.socketList = [s.LinkGameSocket.instance]), t;
        }
        return (
            __extends(t, r),
            (t.prototype.onSocketData = function(t, e) {
                if (
                    (r.prototype.onSocketData.call(this, t, e),
                    !t.vid || this.vid === t.vid)
                )
                    switch (t.respId) {
                        case s.Or:
                            var i = t;
                            11 !== this.gameStatus &&
                                ((this.realtimeInfo = i),
                                this.dispatchAction(s.st, i.vid));
                    }
            }),
            (t.prototype.onGameStartDo = function() {
                this.realtimeInfo = null;
            }),
            (t.prototype.countDown = function() {
                this.timeout > 0
                    ? (this.timeout--, this.dispatchAction(s._t))
                    : (Core.NonstopTimer.instance.clearInterval(
                          this.countDownInterval
                      ),
                      (this.gameStatus = 2),
                      this.dispatchAction(s.w));
            }),
            (t.prototype.onShuffle = function() {
                (this.realtimeInfo = null), r.prototype.onShuffle.call(this);
            }),
            (t.prototype.release = function() {
                r.prototype.release.call(this);
            }),
            t
        );
    })(s.RoomTimerBaseStore);
    (s.MultiRoomTimerStore = t),
        __reflect(t.prototype, 'VideoGameCore.MultiRoomTimerStore');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(a) {
    var t;
    !(function(e) {
        var t = (function(s) {
            function t() {
                return (null !== s && s.apply(this, arguments)) || this;
            }
            return (
                __extends(t, s),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.getStoreFactory = function() {
                    return e.StoreFactory.instance;
                }),
                (t.prototype.getSocketList = function() {
                    var t = s.prototype.getSocketList.call(this);
                    return (
                        t || (t = []),
                        t.concat([
                            a.LiveGameSocket.instance,
                            a.PlazaSocket.instance
                        ])
                    );
                }),
                (t.prototype.onSocketConnected = function(t) {
                    t instanceof a.LiveGameSocket
                        ? t.writeBytes(
                              a.getCMDFollowerConnect(
                                  Core.LoginStore.instance.loginName,
                                  Core.LoginStore.instance.token,
                                  Core.Bn
                              )
                          )
                        : t instanceof a.PlazaSocket &&
                          this.anchorID &&
                          '' != this.anchorID &&
                          this.requestLoginChatRoom(this.anchorID);
                }),
                (t.prototype.onSocketData = function(t, e) {
                    switch (
                        (s.prototype.onSocketData.call(this, t, e), t.respId)
                    ) {
                        case a.Ur:
                            var i = t;
                            (this.url = i.retObj.url),
                                this.dispatchAction(a.no);
                            break;
                        case a.qr:
                            var r = t;
                            (this.anchorID = r.anchid),
                                this.dispatchAction(a.oo);
                    }
                }),
                (t.prototype.onFollowerConn = function(t) {
                    0 == t.retCode &&
                        (t.prevAnchId
                            ? ((this.anchorID = t.prevAnchId),
                              this.requestLoginChatRoom(t.prevAnchId),
                              this.requestFollowAnchor(t.prevAnchId))
                            : t.vids.length &&
                              ((this.anchorID = ''), this.selectVideo(t.vids)));
                }),
                (t.prototype.onAnchorSelectVideo = function(t) {
                    this.anchorID === t.anchid &&
                        this.dispatchAction(a.se, { vids: t.vids });
                }),
                (t.prototype.requestLoginChatRoom = function(t) {
                    var e = a.LiveAnchorConfig.instance.anchorInfoMap.get(t);
                    if (e) {
                        var i = [e.name.en, e.name.hans, e.name.hant].join('#');
                        this.anchorID = t;
                        var r = a.VideoPlazaStore.instance.anchorDataMap.get(t)
                                .roomID,
                            s = Core.LoginStore.instance.isDemoAc ? 99 : 1,
                            n =
                                -1 !==
                                    a.PCGameConfig.instance.tipsConfig.indexOf(
                                        a.GAME_LBAC
                                    ) &&
                                'CNY' ===
                                    a.VideoPlazaStore.instance.currencyCode,
                            o = n ? 1 : 0;
                        a.PlazaSocket.instance.writeBytes(
                            a.getCMDAnchorChatLogin(
                                s,
                                o,
                                r,
                                Core.getAnonymousName(
                                    Core.LoginStore.instance.loginName,
                                    Core.LoginStore.instance.nickName,
                                    !0
                                ),
                                i
                            )
                        );
                    }
                }),
                (t.prototype.getSupportedLiveGameType = function() {
                    return [
                        a.GAME_BAC,
                        a.GAME_DT,
                        a.GAME_NN,
                        a.GAME_ROU,
                        a.GAME_SHB
                    ];
                }),
                (t.prototype.canLeaveTable = function() {
                    return !this.isBetted();
                }),
                t
            );
        })(e.LiveStoreBase);
        (e.LiveStore = t),
            __reflect(t.prototype, 'VideoGameCore.Live.LiveStore');
    })((t = a.Live || (a.Live = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(e) {
            function t() {
                var t = e.call(this) || this;
                return (
                    (t.betStoreMap = new Core.HashMap()),
                    (t.pokerStoreMap = new Core.HashMap()),
                    (t.roomTimerStoreMap = new Core.HashMap()),
                    (t.betStoreClassMap = new Core.HashMap()),
                    (t.pokerStoreClassMap = new Core.HashMap()),
                    t.initStoreClassMap(),
                    t
                );
            }
            return (
                __extends(t, e),
                (t.prototype.setupStoresByVid = function(t) {
                    var e = Core.Config.HostConfig.instance.getHostByVid(t),
                        i = e.gameType;
                    this.roomTimerStoreMap.set(t, this.createRoomTimerStore(t)),
                        this.betStoreClassMap.has(i) &&
                            this.betStoreMap.set(
                                t,
                                this.createBetStore(
                                    this.betStoreClassMap.get(i),
                                    t
                                )
                            ),
                        this.pokerStoreClassMap.has(i) &&
                            this.pokerStoreMap.set(
                                t,
                                this.createPokerStore(
                                    this.pokerStoreClassMap.get(i),
                                    t
                                )
                            );
                }),
                (t.prototype.releaseStore = function(t) {
                    var e;
                    (e = this.betStoreMap.get(t)),
                        e &&
                            (this.releaseStoreInstance(e),
                            this.betStoreMap['delete'](t)),
                        (e = this.pokerStoreMap.get(t)),
                        e &&
                            (this.releaseStoreInstance(e),
                            this.pokerStoreMap['delete'](t)),
                        (e = this.roomTimerStoreMap.get(t)),
                        e &&
                            (this.releaseStoreInstance(e),
                            this.roomTimerStoreMap['delete'](t));
                }),
                (t.prototype.releaseStoreAll = function() {
                    var t,
                        e = this;
                    (t = this.betStoreMap.keys.slice()),
                        t.forEach(function(t) {
                            e.releaseStore(t);
                        }),
                        (t = this.pokerStoreMap.keys.slice()),
                        t.forEach(function(t) {
                            e.releaseStore(t);
                        }),
                        (t = this.roomTimerStoreMap.keys.slice()),
                        t.forEach(function(t) {
                            e.releaseStore(t);
                        });
                }),
                (t.prototype.release = function() {
                    e.prototype.release.call(this), this.releaseStoreAll();
                }),
                t
            );
        })(Core.SingletonDispatcher);
        (t.StoreFactoryBase = e),
            __reflect(e.prototype, 'VideoGameCore.Live.StoreFactoryBase');
    })((e = t.Live || (t.Live = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(l) {
    var t;
    !(function(t) {
        var e = (function(i) {
            function t() {
                var t = i.call(this) || this;
                return (
                    (t.socketList = [l.LiveGameSocket.instance]),
                    t.initHashMap(),
                    t
                );
            }
            return (
                __extends(t, i),
                Object.defineProperty(t.prototype, 'roomTimerStore', {
                    get: function() {
                        var t = this.getStoreFactory().roomTimerStoreMap.get(
                            this.vid
                        );
                        return t;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, 'roadMapStore', {
                    get: function() {
                        return l.PlazaRoadStore.instance;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.initHashMap = function() {
                    (this.anchorPlayInfoMap = new Core.HashMap()),
                        (this.playerPlayInfoMap = new Core.HashMap()),
                        (this.otherPlayInfoMap = new Core.HashMap()),
                        (this.overallPlayInfoMap = new Core.HashMap()),
                        (this.playerPayoutInfoMap = new Core.HashMap());
                }),
                (t.prototype.getAmountByPlaytype = function(t, e) {
                    void 0 === e && (e = 0);
                    var i = 0;
                    return (
                        0 === e
                            ? (i = this.stakePool.getAmount(t))
                            : 1 === e
                                ? (i = this.donePool.getAmount(t))
                                : 2 === e && (i = this.lastPool.getAmount(t)),
                        i
                    );
                }),
                (t.prototype.getAmountByPlayerSlot = function(t, e) {
                    var i = 0;
                    switch (e) {
                        case 0:
                            i = this.getAmountByPlaytype(t);
                            break;
                        case 1:
                            this.otherPlayInfoMap.has(t) &&
                                (i = this.fromRMB(
                                    this.otherPlayInfoMap.get(t).betCredit
                                ));
                            break;
                        case 2:
                            this.anchorPlayInfoMap.has(t) &&
                                (i = this.fromRMB(
                                    this.anchorPlayInfoMap.get(t).betCredit
                                ));
                    }
                    return i;
                }),
                (t.prototype.getOverallPlayAmount = function(t) {
                    var e = 0;
                    return (
                        this.overallPlayInfoMap.has(t) &&
                            (e = this.fromRMB(
                                this.overallPlayInfoMap.get(t).betCredit
                            )),
                        e
                    );
                }),
                (t.prototype.getOverallPlayNum = function(t) {
                    var e = 0;
                    return (
                        this.overallPlayInfoMap.has(t) &&
                            (e = this.overallPlayInfoMap.get(t).playerNum),
                        e
                    );
                }),
                (t.prototype.getDisablePlayTypes = function() {
                    var t = [];
                    return (
                        this.roadMapStore.getRoadData(this.vid) &&
                            this.roadMapStore.getRoadData(this.vid)
                                .totalCount >= l.MAX_BET_GAME_BAC_BIG_SMALL &&
                            t.push(l.PLAYTYPE_BIG, l.PLAYTYPE_SMALL),
                        t
                    );
                }),
                (t.prototype.repeatBet = function() {
                    var e = this,
                        t = this.getDisablePlayTypes();
                    t.forEach(function(t) {
                        e.lastPool.getAmount(t) > 0 &&
                            e.lastPool.stakeDataMap['delete'](t);
                    }),
                        i.prototype.repeatBet.call(this);
                }),
                (t.prototype.getBetLimitByPlayType = function(t) {
                    return l.UserStore.instance.getBetLimitByPlayType(t);
                }),
                (t.prototype.reset = function() {
                    i.prototype.reset.call(this);
                }),
                (t.prototype.sendBetToServer = function(t) {
                    if (
                        (i.prototype.sendBetToServer.call(this, t),
                        this.gameSocket.connected)
                    ) {
                        var e = t.playType;
                        e === l.PLAYTYPE_BANKER &&
                            this.noComm &&
                            (e = l.PLAYTYPE_BANKER_NO_COMMISSION),
                            l.LiveGameSocket.instance.writeBytes(
                                l.getCMDFollowerBetExt(
                                    this.vid,
                                    this.gmcode,
                                    e,
                                    t.amount,
                                    'CNY',
                                    t.seq
                                )
                            );
                    }
                }),
                (t.prototype.onSocketData = function(t, e) {
                    var r = this;
                    if (!t.vid || this.vid === t.vid) {
                        switch (t.respId) {
                            case l.Qr:
                                this.initHashMap(), this.dispatchAction(l.Z);
                                break;
                            case l.ts:
                                this.m(t);
                                break;
                            case l.es:
                                var i = t,
                                    s = this.playerPlayInfoMap.get(i.play_type);
                                s ||
                                    ((s = {
                                        betCredit: 0,
                                        playType: i.play_type
                                    }),
                                    this.playerPlayInfoMap.set(s.playType, s)),
                                    (s.betCredit += this.toRMB(i.jetton));
                                break;
                            case l.Nt:
                                this._(t);
                                break;
                            case l.ee:
                                (this.playerPayoutInfoMap = new Core.HashMap()),
                                    this.playerPayoutInfoMap.copy(t.payoutsMap),
                                    Core.NonstopTimer.instance.setTimeout(
                                        function() {
                                            r.dispatchAction(l.ao, t),
                                                r.dispatchAction(l.g, t),
                                                r.payoutOverTimeoutDo(
                                                    l.GAME_LIVE
                                                );
                                        },
                                        this,
                                        l.StreamConfig.instance.getAverageDelay()
                                    );
                                break;
                            case l.mt:
                                this.dispatchAction(l.Y);
                                break;
                            case l.ds:
                                if (this.isRecoverBet) {
                                    var n = t;
                                    n.betInfo.forEach(function(t) {
                                        if (t.jetton > 0) {
                                            r.donePool.setAmount(
                                                t.playType,
                                                t.jetton
                                            );
                                            var e = r.toRMB(t.jetton);
                                            r.playerPlayInfoMap.set(
                                                t.playType,
                                                {
                                                    betCredit: e,
                                                    playType: t.playType
                                                }
                                            ),
                                                r.updateLastPool(),
                                                r.stakePool.getAmount(
                                                    t.playType
                                                ) < t.jetton &&
                                                    r.stakePool.setAmount(
                                                        t.playType,
                                                        t.jetton
                                                    ),
                                                r.updateOtherPlayInfo(
                                                    t.playType
                                                );
                                        }
                                    }),
                                        this.diffPool.clear(),
                                        this.dispatchAction(l.T);
                                }
                        }
                        var o = t.anchorID;
                        if (!o || '' == o || o === this.getLiveStore().anchorID)
                            switch (t.respId) {
                                case l.Wt:
                                    this.initHashMap(),
                                        this.dispatchAction(l.T);
                                    break;
                                case l.as:
                                    var i = t,
                                        s = this.anchorPlayInfoMap.get(
                                            i.betInfo.playType
                                        );
                                    s ||
                                        ((s = {
                                            betCredit: 0,
                                            playType: i.betInfo.playType
                                        }),
                                        this.anchorPlayInfoMap.set(
                                            s.playType,
                                            s
                                        )),
                                        (s.betCredit += i.betInfo.jettonCNY);
                                    break;
                                case l.ss:
                                    if (this.isRecoverBet) {
                                        var a = t;
                                        a.playInfos.forEach(function(t) {
                                            r.overallPlayInfoMap.set(
                                                t.playType,
                                                t
                                            ),
                                                r.updateOtherPlayInfo(
                                                    t.playType
                                                );
                                        }),
                                            this.dispatchAction(l.T, t);
                                    }
                                    break;
                                case l.fs:
                                    var h = t,
                                        u = new Core.HashMap();
                                    h.payoutInfoList.forEach(function(t) {
                                        var e = t.valueCNY;
                                        if (
                                            (r.playerPayoutInfoMap &&
                                                r.playerPayoutInfoMap.has(
                                                    t.playtype
                                                ) &&
                                                (e -= r.playerPayoutInfoMap.get(
                                                    t.playtype
                                                ).valueCNY),
                                            0 != e)
                                        ) {
                                            var i = new l.PlaytypePayout();
                                            (i.playtype = t.playtype),
                                                (i.value = r.fromRMB(e)),
                                                u.set(i.playtype, i);
                                        }
                                    }),
                                        Core.NonstopTimer.instance.setTimeout(
                                            function() {
                                                r.dispatchAction(l.ao, {
                                                    ptPayouts: u,
                                                    playerSlot: 1
                                                });
                                            },
                                            this,
                                            l.StreamConfig.instance.getAverageDelay()
                                        );
                                    break;
                                case l.ls:
                                    var c = t,
                                        f = new Core.HashMap();
                                    c.ptPayouts.forEach(function(t) {
                                        var e = new l.PlaytypePayout();
                                        (e.playtype = t.playtype),
                                            (e.value = r.fromRMB(t.valueCNY)),
                                            f.set(e.playtype, e);
                                    }),
                                        Core.NonstopTimer.instance.setTimeout(
                                            function() {
                                                r.dispatchAction(l.ao, {
                                                    ptPayouts: f,
                                                    playerSlot: 2
                                                });
                                            },
                                            this,
                                            l.StreamConfig.instance.getAverageDelay()
                                        );
                                    break;
                                case l.Gs:
                                    if (this.isRecoverBet) {
                                        var C = t;
                                        C.betInfo.forEach(function(t) {
                                            if (t.jettonCNY > 0) {
                                                var e = {
                                                    betCredit: t.jettonCNY,
                                                    playType: t.playType
                                                };
                                                r.otherPlayInfoMap.set(
                                                    t.playType,
                                                    e
                                                );
                                            }
                                        }),
                                            this.dispatchAction(l.T);
                                    }
                                    break;
                                case l.Ps:
                                    if (this.isRecoverBet) {
                                        var n = t;
                                        n.betInfo.forEach(function(t) {
                                            if (t.jettonCNY > 0) {
                                                var e = {
                                                    betCredit: t.jettonCNY,
                                                    playType: t.playType
                                                };
                                                r.anchorPlayInfoMap.set(
                                                    t.playType,
                                                    e
                                                ),
                                                    r.updateOtherPlayInfo(
                                                        t.playType
                                                    );
                                            }
                                        }),
                                            this.dispatchAction(l.T);
                                    }
                            }
                    }
                }),
                (t.prototype.updateOtherPlayInfo = function(t) {
                    var e = this.overallPlayInfoMap.has(t)
                        ? this.overallPlayInfoMap.get(t).betCredit
                        : 0;
                    this.playerPlayInfoMap.has(t) &&
                        (e -= this.playerPlayInfoMap.get(t).betCredit),
                        this.anchorPlayInfoMap.has(t) &&
                            (e -= this.anchorPlayInfoMap.get(t).betCredit);
                    var i = this.otherPlayInfoMap.get(t);
                    e > 0
                        ? i
                            ? (i.betCredit = e)
                            : this.otherPlayInfoMap.set(t, {
                                  betCredit: e,
                                  playType: t
                              })
                        : i && this.otherPlayInfoMap['delete'](t);
                }),
                Object.defineProperty(t.prototype, 'isRecoverBet', {
                    get: function() {
                        return (
                            1 == this.roomTimerStore.gameStatus ||
                            2 == this.roomTimerStore.gameStatus
                        );
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.fromRMB = function(t) {
                    return (
                        Math.round(
                            t * l.VideoPlazaStore.instance.currencyRate * 100
                        ) / 100
                    );
                }),
                (t.prototype.toRMB = function(t) {
                    return (
                        Math.round(
                            (t / l.VideoPlazaStore.instance.currencyRate) * 100
                        ) / 100
                    );
                }),
                t
            );
        })(l.BetStoreBaseBac);
        (t.BacBetStoreBase = e),
            __reflect(e.prototype, 'VideoGameCore.Live.BacBetStoreBase');
    })((t = l.Live || (l.Live = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                Object.defineProperty(e, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (e.init = function() {
                    return this.initInstance(this);
                }),
                e
            );
        })(t.BetTableStoreCommon);
        (t.BetTableStore = e),
            __reflect(e.prototype, 'VideoGameCore.Rou.BetTableStore');
    })((e = t.Rou || (t.Rou = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t;
    !(function(e) {
        var t = (function(i) {
            function t() {
                var t = i.call(this) || this;
                return (t.socketList = [e.RouGameSocket.instance]), t;
            }
            return (
                __extends(t, i),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.onSocketData = function(t, e) {
                    i.prototype.onSocketData.call(this, t, e),
                        (t.vid && this.vid !== t.vid) || t.respId;
                }),
                (t.prototype.release = function() {
                    i.prototype.release.call(this);
                }),
                t
            );
        })(i.RoomTimerBaseStore);
        (e.RoomTimerStore = t),
            __reflect(t.prototype, 'VideoGameCore.Rou.RoomTimerStore');
    })((t = i.Rou || (i.Rou = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(u) {
    var t;
    !(function(h) {
        var t = (function(e) {
            function t() {
                var t = e.call(this) || this;
                return (t.socketList = [h.RouGameSocket.instance]), t;
            }
            return (
                __extends(t, e),
                (t.prototype.onSocketConnected = function(t) {
                    t.writeBytes(
                        u.getCMDClientLoginGameExt(
                            this.vid,
                            Core.LoginStore.instance.loginName,
                            Core.LoginStore.instance.token,
                            Core.gn
                        )
                    );
                }),
                (t.prototype.onSocketData = function(t, e) {
                    switch (t.respId) {
                        case u.Se:
                            var i = t;
                            0 == i.retCode
                                ? h.RouGameSocket.instance.writeBytes(
                                      u.getCMDAutoEnterTable(this.vid)
                                  )
                                : (e.killSocket(),
                                  dclib('LOGIN Game FAIL ' + i.retCode),
                                  Core.LoginStore.instance.renewToken(
                                      function() {
                                          e.autoConnect();
                                      },
                                      this
                                  ),
                                  Core.globalStore.dispatchGlobal(u.pn));
                            break;
                        case u.Ee:
                            var r = t;
                            0 == r.retCode || 23 == r.retCode
                                ? ((this.tableCode = r.tableCode),
                                  this.dispatchAction(u.de),
                                  e.writeBytes(u.getCMDGetGameCurrentStatus()),
                                  Core.NonstopTimer.instance.setTimeout(
                                      function() {
                                          Core.globalStore.dispatchGlobal(u.zn);
                                      },
                                      this,
                                      1e3
                                  ))
                                : Core.globalStore.dispatchGlobal(u.pn);
                            break;
                        case u.wi:
                            var s = t;
                            0 == s.retCode
                                ? h.RouGameSocket.instance.writeBytes(
                                      u.getCMDAutoEnterTable(this.vid)
                                  )
                                : (e.killSocket(),
                                  dclib('LOGIN Game FAIL ' + s.retCode),
                                  Core.LoginStore.instance.renewToken(
                                      function() {
                                          e.autoConnect();
                                      },
                                      this
                                  ),
                                  Core.globalStore.dispatchGlobal(u.pn));
                            break;
                        case u.Vt:
                            var n = t;
                            0 == n.code || 23 == n.code
                                ? ((this.tableCode = n.table),
                                  this.dispatchAction(u.de),
                                  e.writeBytes(u.getCMDGetGameCurrentStatus()),
                                  Core.NonstopTimer.instance.setTimeout(
                                      function() {
                                          Core.globalStore.dispatchGlobal(u.zn);
                                      },
                                      this,
                                      1e3
                                  ))
                                : Core.globalStore.dispatchGlobal(u.pn, n.code);
                            break;
                        case u.Ae:
                            var o = t;
                            this.dispatchAction(u.kn, o.roundNum);
                            break;
                        case u.gt:
                            var a = t;
                            -2 === a.action &&
                                a.loginname ===
                                    Core.LoginStore.instance.loginName &&
                                this.dispatchAction(u.wn);
                    }
                }),
                (t.prototype.release = function() {
                    e.prototype.release.call(this), this.dispatchAction(u.O);
                }),
                (t.prototype.onSocketDie = function(t) {
                    t === h.RouGameSocket.instance &&
                        Core.globalStore.dispatchGlobal(u.oe);
                }),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                t
            );
        })(Core.NetworkStoreBase);
        (h.RouStore = t), __reflect(t.prototype, 'VideoGameCore.Rou.RouStore');
    })((t = u.Rou || (u.Rou = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(u) {
    var t;
    !(function(r) {
        var e = (function() {
            function t() {
                (this.betLimit = new u.BetLimit()), this.reset();
            }
            return (
                (t.prototype.parseRespData = function(t) {
                    var e = 'MYR' === u.VideoPlazaStore.instance.currencyCode;
                    e
                        ? (this.betLimit.max =
                              Math.floor(Math.round(1e3 * t.max) / 10) / 100)
                        : (this.betLimit.max = Math.floor(t.max)),
                        this.betLimit.max && (this.betLimit.min = e ? 0.01 : 1),
                        (this.betLimit.playtype = t.playType),
                        (this.totalBet = t.totalBet),
                        (this.odds = t.odds),
                        (this.timeOut = t.timeOut);
                }),
                (t.prototype.reset = function() {
                    (this.betLimit.max = 0),
                        (this.betLimit.min = 0),
                        (this.betLimit.playtype = u.PLAYTYPE_UNKNOWN),
                        (this.totalBet = 0),
                        (this.odds = 0),
                        (this.timeOut = 0),
                        this.timeOutTimerId &&
                            (Core.NonstopTimer.instance.clearInterval(
                                this.timeOutTimerId
                            ),
                            (this.timeOutTimerId = 0));
                }),
                Object.defineProperty(t.prototype, 'betEnabled', {
                    get: function() {
                        return (
                            this.betInvited &&
                            this.timeOut > 0 &&
                            this.limitValid
                        );
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, 'betInvited', {
                    get: function() {
                        return (
                            this.betLimit.playtype != u.PLAYTYPE_UNKNOWN &&
                            this.totalBet > 0
                        );
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, 'limitValid', {
                    get: function() {
                        return 0 != this.betLimit.min && 0 != this.betLimit.max;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                t
            );
        })();
        __reflect(e.prototype, 'InsBetStatus');
        var t = (function(i) {
            function t() {
                var t = i.call(this) || this;
                return (
                    (t.playtypes = u.BET_PLAYTYPES.concat(
                        u.SBAC_BET_PLAYTYPES
                    )),
                    (t.tablePool = new u.TablePool()),
                    (t.socketList = [r.SBacGameSocket.instance]),
                    (t.insBetStatus = new e()),
                    t
                );
            }
            return (
                __extends(t, i),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                Object.defineProperty(t.prototype, 'mySeatNum', {
                    get: function() {
                        var t = r.TableSeatStore.instance.getPlayer(
                            Core.LoginStore.instance.loginName
                        );
                        return null != t ? t.seat : 0;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, 'roomTimerStore', {
                    get: function() {
                        return r.RoomTimerStore.instance;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.getAmountByType = function(t, e) {
                    return (
                        void 0 === e && (e = 0),
                        0 === e || e === this.mySeatNum
                            ? this.stakePool.getAmount(t)
                            : this.tablePool.getAmount(e, t)
                    );
                }),
                (t.prototype.getUnconfirmedAmountByType = function(t) {
                    return (
                        this.stakePool.getAmount(t) - this.donePool.getAmount(t)
                    );
                }),
                Object.defineProperty(t.prototype, 'confirmEnabled', {
                    get: function() {
                        return (
                            (this.betEnabled || this.insBetStatus.betEnabled) &&
                            this.stakePool.totalAmount >
                                this.donePool.totalAmount
                        );
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.addChipEnabled = function(t) {
                    var e = this.betEnabled;
                    return (
                        this.isInsBetPlayType(t) &&
                            (e =
                                this.insBetStatus.betEnabled &&
                                t == this.insBetStatus.betLimit.playtype),
                        e
                    );
                }),
                (t.prototype.getBetLimitByPlayType = function(t) {
                    var e;
                    return (
                        this.isInsBetPlayType(t)
                            ? this.insBetStatus.betLimit.playtype == t
                                ? (e = this.insBetStatus.betLimit)
                                : ((e = new u.BetLimit()),
                                  (e.min = 0),
                                  (e.max = 0))
                            : (e = u.UserStore.instance.getBetLimitByPlayType(
                                  t,
                                  r.SbacStore.instance.tableCode
                              )),
                        e
                    );
                }),
                (t.prototype.updateLastPool = function() {
                    var e = this,
                        t = this.donePool.getAllStakeData();
                    this.lastPool.clear(),
                        t.forEach(function(t) {
                            e.isInsBetPlayType(t.playType) ||
                                e.lastPool.setAmount(t.playType, t.amount);
                        });
                }),
                (t.prototype.reset = function() {
                    i.prototype.reset.call(this), this.tablePool.clear();
                }),
                (t.prototype.sendBetToServer = function(t) {
                    if (
                        (i.prototype.sendBetToServer.call(this, t),
                        this.gameSocket.connected)
                    ) {
                        var e = t.playType;
                        e === u.PLAYTYPE_BANKER &&
                            this.noComm &&
                            (e = u.PLAYTYPE_BANKER_NO_COMMISSION),
                            r.SBacGameSocket.instance.writeBytes(
                                u.getCMDGameBetExt(
                                    this.gmcode,
                                    e,
                                    t.amount,
                                    t.seq,
                                    u.GAME_SBAC
                                )
                            );
                    }
                }),
                (t.prototype.onSocketData = function(t, e) {
                    if (!this.isInvalidVid(t)) {
                        var i;
                        switch (t.respId) {
                            case u.ue:
                                this.m(t);
                                break;
                            case u.Nt:
                                this._(t);
                                break;
                            case u.W:
                                this.V(t);
                                break;
                            case u.ce:
                                var r = t;
                                if (null != r.betPoolInfos) {
                                    var s,
                                        n = r.betPoolInfos.length;
                                    for (i = 0; n > i; i++) {
                                        s = r.betPoolInfos[i];
                                        var o = s.playType;
                                        this.tablePool.addBetToPool(
                                            s.seatNum,
                                            o,
                                            s.amount,
                                            s.currency,
                                            !1
                                        ),
                                            s.loginname ===
                                                Core.LoginStore.instance
                                                    .loginName &&
                                                (this.donePool.setAmount(
                                                    o,
                                                    s.amount
                                                ),
                                                s.amount >
                                                    this.stakePool.getAmount(
                                                        o
                                                    ) &&
                                                    this.stakePool.setAmount(
                                                        o,
                                                        s.amount
                                                    ));
                                    }
                                    this.updateLastPool();
                                }
                                this.diffPool.clear(), this.dispatchAction(u.T);
                                break;
                            case u.kt:
                                var a = t;
                                this.tablePool.addBetToPool(
                                    a.seatNum,
                                    a.playType,
                                    a.value,
                                    a.currency
                                ),
                                    this.dispatchAction(u.T, a.seatNum);
                                break;
                            case u.wt:
                                this.p(t);
                                break;
                            case u.SBAC_BET_HINTS_EXT:
                                this.insBetStatus.parseRespData(t),
                                    this.startInsCountDown(),
                                    this.dispatchAction(u.ho),
                                    this.insAutoShow && this.openInsBetPanel();
                                break;
                            case u.mt:
                                var h = t;
                                (this.insBetStatus.betLimit.playtype =
                                    h.insPlayType),
                                    (this.insBetStatus.timeOut = h.timeout),
                                    !this.insBetStatus.timeOut ||
                                    (this.insBetStatus.betLimit.playtype !=
                                        u.PLAYTYPE_BANKER_INS &&
                                        this.insBetStatus.betLimit.playtype !=
                                            u.PLAYTYPE_PLAYER_INS)
                                        ? (this.insBetStatus.reset(),
                                          this.dispatchAction(u.uo))
                                        : (this.startInsCountDown(),
                                          this.dispatchAction(u.ho),
                                          this.insAutoShow &&
                                              this.openInsBetPanel());
                        }
                    }
                }),
                (t.prototype.payoutTimeoutDo = function(t) {
                    i.prototype.payoutTimeoutDo.call(this, t),
                        this.dispatchAction(u.k, {
                            seatNum: this.mySeatNum,
                            payouts: t.ptPayouts
                        });
                }),
                (t.prototype.payoutOtherTimeoutDo = function(t) {
                    var e = r.TableSeatStore.instance.getPlayer(t.loginname);
                    null != e &&
                        this.dispatchAction(u.k, {
                            seatNum: e.seat,
                            payouts: t.ptPayouts
                        });
                }),
                (t.prototype.openInsBetPanel = function() {
                    this.insBetStatus.betEnabled && this.dispatchAction(u.co);
                }),
                (t.prototype.startInsCountDown = function() {
                    this.insBetStatus.timeOut > 0 &&
                        !Core.NonstopTimer.instance.hasInterval(
                            this.insBetStatus.timeOutTimerId
                        ) &&
                        (this.onInsCountDownTimerTick(),
                        (this.insBetStatus.timeOutTimerId = Core.NonstopTimer.instance.setInterval(
                            this.onInsCountDownTimerTick,
                            this,
                            1e3
                        )));
                }),
                (t.prototype.onInsCountDownTimerTick = function() {
                    this.insBetStatus.timeOut > 0
                        ? (this.insBetStatus.timeOut--,
                          this.dispatchAction(u.fo))
                        : (this.insBetStatus.reset(),
                          this.dispatchAction(u.uo));
                }),
                Object.defineProperty(t.prototype, 'insAutoShow', {
                    get: function() {
                        return (
                            'false' !==
                            Core.StorageManager.instance.getObject(
                                u.INS_AUTO_SHOW_KEY
                            )[this.vid]
                        );
                    },
                    set: function(t) {
                        var e = Core.StorageManager.instance.getObject(
                            u.INS_AUTO_SHOW_KEY
                        );
                        (e[this.vid] = t ? 'true' : 'false'),
                            Core.StorageManager.instance.setObject(
                                u.INS_AUTO_SHOW_KEY,
                                e
                            ),
                            this.dispatchAction(u.Co);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.isInsBetPlayType = function(t) {
                    return (
                        t == u.PLAYTYPE_PLAYER_INS || t == u.PLAYTYPE_BANKER_INS
                    );
                }),
                (t.prototype.getCurrencyBySeatNum = function(t) {
                    return this.tablePool.getCurrency(t);
                }),
                t
            );
        })(u.BetStoreBaseBac);
        (r.BetTableStore = t),
            __reflect(t.prototype, 'VideoGameCore.Sbac.BetTableStore');
    })((t = u.Sbac || (u.Sbac = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(h) {
    var t;
    !(function(a) {
        var t = (function(o) {
            function t() {
                var t = o.call(this) || this;
                return (t.socketList = [a.SBacGameSocket.instance]), t;
            }
            return (
                __extends(t, o),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.onSocketConnected = function(t) {}),
                (t.prototype.onSocketData = function(t, e) {
                    var i = this;
                    if (
                        (o.prototype.onSocketData.call(this, t, e),
                        !t.vid || this.vid === t.vid)
                    )
                        switch (t.respId) {
                            case h.Ye:
                                var r = t;
                                Core.NonstopTimer.instance.setTimeout(
                                    function() {
                                        i.pokerDataQue.push(
                                            new h.PokerData(
                                                r.card,
                                                r.who,
                                                r.index
                                            )
                                        ),
                                            i.parsePokerDataQue(),
                                            i.dispatchAction(h.vt);
                                    },
                                    this,
                                    h.StreamConfig.instance.getAverageDelay()
                                );
                                break;
                            case h.Nt:
                                var s = t,
                                    n = s.winPlayTypes;
                                a.BetTableStore.instance.gmcode === s.code &&
                                    (this.resultTimer = Core.NonstopTimer.instance.setTimeout(
                                        function() {
                                            (this.bWin =
                                                -1 !=
                                                n.indexOf(h.PLAYTYPE_BANKER)),
                                                (this.pWin =
                                                    -1 !=
                                                    n.indexOf(
                                                        h.PLAYTYPE_PLAYER
                                                    )),
                                                (this.tie =
                                                    -1 !=
                                                    n.indexOf(h.PLAYTYPE_TIE)),
                                                (this.bPair =
                                                    -1 !=
                                                    n.indexOf(
                                                        h.PLAYTYPE_BANKER_PAIR
                                                    )),
                                                (this.pPair =
                                                    -1 !=
                                                    n.indexOf(
                                                        h.PLAYTYPE_PLAYER_PAIR
                                                    )),
                                                this.dispatchAction(h.vt);
                                        },
                                        this,
                                        h.StreamConfig.instance.getAverageDelay() -
                                            10
                                    ));
                        }
                }),
                t
            );
        })(h.PokerBaseStore);
        (a.PokerStore = t),
            __reflect(t.prototype, 'VideoGameCore.Sbac.PokerStore');
    })((t = h.Sbac || (h.Sbac = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t;
    !(function(e) {
        var t = (function(i) {
            function t() {
                var t = i.call(this) || this;
                return (t.socketList = [e.SBacGameSocket.instance]), t;
            }
            return (
                __extends(t, i),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.onSocketData = function(t, e) {
                    i.prototype.onSocketData.call(this, t, e),
                        t.vid && this.vid !== t.vid;
                }),
                (t.prototype.release = function() {
                    i.prototype.release.call(this);
                }),
                t
            );
        })(i.RoomTimerBaseStore);
        (e.RoomTimerStore = t),
            __reflect(t.prototype, 'VideoGameCore.Sbac.RoomTimerStore');
    })((t = i.Sbac || (i.Sbac = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(o) {
    var t;
    !(function(i) {
        var t = (function(e) {
            function t() {
                var t = e.call(this) || this;
                return (
                    (t.balance = 0),
                    (t.loginType = 0),
                    (t.seat = -1),
                    (t.socketList = [i.SBacGameSocket.instance]),
                    (t.loginType = 2),
                    t
                );
            }
            return (
                __extends(t, e),
                (t.prototype.onSocketConnected = function(t) {
                    t.writeBytes(
                        o.getCMDClientLoginGame(
                            Core.LoginStore.instance.loginName,
                            Core.LoginStore.instance.token,
                            Core.gn
                        )
                    );
                }),
                (t.prototype.onSocketData = function(t, e) {
                    switch (t.respId) {
                        case o.Se:
                            var i = t;
                            0 == i.retCode
                                ? e.writeBytes(o.getCMDAutoEnterTable(this.vid))
                                : (e.killSocket(),
                                  dclib('LOGIN Game FAIL ' + i.retCode),
                                  Core.LoginStore.instance.renewToken(
                                      function() {
                                          e.autoConnect();
                                      },
                                      this
                                  ),
                                  Core.globalStore.dispatchGlobal(o.pn));
                            break;
                        case o.Ee:
                            var r = t;
                            0 == r.retCode || 23 == r.retCode
                                ? ((this.seat = r.seat),
                                  (this.tableCode = r.tableCode),
                                  this.dispatchAction(o.de, this.seat),
                                  e.writeBytes(o.getCMDGetGameCurrentStatus()),
                                  Core.NonstopTimer.instance.setTimeout(
                                      function() {
                                          Core.globalStore.dispatchGlobal(o.zn);
                                      },
                                      this,
                                      1e3
                                  ))
                                : Core.globalStore.dispatchGlobal(
                                      o.pn,
                                      r.retCode
                                  );
                            break;
                        case o.Ae:
                            var s = t;
                            this.dispatchAction(o.kn, s.roundNum);
                            break;
                        case o.gt:
                            var n = t;
                            n.seat === this.seat &&
                                -2 === n.action &&
                                n.loginname ===
                                    Core.LoginStore.instance.loginName &&
                                this.dispatchAction(o.wn);
                    }
                }),
                (t.prototype.release = function() {
                    e.prototype.release.call(this);
                }),
                (t.prototype.onSocketDie = function(t) {
                    t === i.SBacGameSocket.instance &&
                        Core.globalStore.dispatchGlobal(o.oe);
                }),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                t
            );
        })(Core.NetworkStoreBase);
        (i.SbacStore = t),
            __reflect(t.prototype, 'VideoGameCore.Sbac.SbacStore');
    })((t = o.Sbac || (o.Sbac = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(e) {
    var t;
    !(function(i) {
        var t = (function(e) {
            function t() {
                var t = e.call(this) || this;
                return (t.socketList = [i.SBacGameSocket.instance]), t;
            }
            return (
                __extends(t, e),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                t
            );
        })(e.TableSeatBaseStore);
        (i.TableSeatStore = t),
            __reflect(t.prototype, 'VideoGameCore.Sbac.TableSeatStore');
    })((t = e.Sbac || (e.Sbac = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(c) {
    var t;
    !(function(e) {
        var t = (function(u) {
            function t() {
                var t = u.call(this) || this;
                return (t.videoPool = new c.VideoPool()), t;
            }
            return (
                __extends(t, u),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                Object.defineProperty(t.prototype, 'roomTimerStore', {
                    get: function() {
                        return e.RoomTimerStore.instance;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.getSocketList = function() {
                    return [e.ShbGameSocket.instance];
                }),
                (t.prototype.getBetLimitByPlayType = function(t) {
                    return c.UserStore.instance.getBetLimitByPlayType(
                        t,
                        e.ShbStore.instance.tableCode
                    );
                }),
                (t.prototype.sendBetToServer = function(t) {
                    u.prototype.sendBetToServer.call(this, t),
                        this.gameSocket.connected &&
                            e.ShbGameSocket.instance.writeBytes(
                                c.getCMDGameBetExt(
                                    this.gmcode,
                                    t.playType,
                                    t.amount,
                                    t.seq
                                )
                            );
                }),
                (t.prototype.onSocketData = function(t, e) {
                    if (
                        (u.prototype.onSocketData.call(this, t, e),
                        !this.isInvalidVid(t))
                    )
                        switch (t.respId) {
                            case c.ue:
                                this.m(t);
                                break;
                            case c.W:
                                this.V(t);
                                break;
                            case c.ce:
                                var i = t;
                                if (null != i.betPoolInfos)
                                    for (
                                        var r, s = i.betPoolInfos.length, n = 0;
                                        s > n;
                                        n++
                                    ) {
                                        r = i.betPoolInfos[n];
                                        var o = r.playType;
                                        this.videoPool.addBetToPool(
                                            r.loginname,
                                            r.nickname,
                                            o,
                                            r.amount,
                                            r.currency,
                                            null,
                                            !1
                                        ),
                                            r.loginname ===
                                                Core.LoginStore.instance
                                                    .loginName &&
                                                (r.amount >
                                                    this.stakePool.getAmount(
                                                        o
                                                    ) &&
                                                    this.stakePool.setAmount(
                                                        o,
                                                        r.amount
                                                    ),
                                                this.donePool.setAmount(
                                                    o,
                                                    r.amount
                                                ),
                                                this.lastPool.setAmount(
                                                    o,
                                                    r.amount
                                                ));
                                    }
                                this.diffPool.clear(), this.dispatchAction(c.T);
                                break;
                            case c.pt:
                                var a = t;
                                this.videoPool.addBetToPool(
                                    a.name,
                                    a.nick,
                                    a.playType,
                                    a.value,
                                    a.currency
                                );
                                break;
                            case c.kt:
                                var h = t;
                                this.videoPool.addBetToPool(
                                    h.name,
                                    h.nick,
                                    h.playType,
                                    h.value,
                                    h.currency
                                );
                        }
                }),
                (t.prototype.gameResultTimeoutDo = function(t) {
                    u.prototype.gameResultTimeoutDo.call(this, t);
                }),
                t
            );
        })(e.BetTableStoreBase);
        (e.BetTableStore = t),
            __reflect(t.prototype, 'VideoGameCore.Shb.BetTableStore');
    })((t = c.Shb || (c.Shb = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t;
    !(function(e) {
        var t = (function(i) {
            function t() {
                var t = i.call(this) || this;
                return (t.socketList = [e.ShbGameSocket.instance]), t;
            }
            return (
                __extends(t, i),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.onSocketData = function(t, e) {
                    i.prototype.onSocketData.call(this, t, e),
                        (t.vid && this.vid !== t.vid) || t.respId;
                }),
                (t.prototype.release = function() {
                    i.prototype.release.call(this);
                }),
                t
            );
        })(i.RoomTimerBaseStore);
        (e.RoomTimerStore = t),
            __reflect(t.prototype, 'VideoGameCore.Shb.RoomTimerStore');
    })((t = i.Shb || (i.Shb = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(a) {
    var t;
    !(function(o) {
        var t = (function(e) {
            function t() {
                var t = e.call(this) || this;
                return (t.socketList = [o.ShbGameSocket.instance]), t;
            }
            return (
                __extends(t, e),
                (t.prototype.onSocketConnected = function(t) {
                    t.writeBytes(
                        a.getCMDClientLoginGame(
                            Core.LoginStore.instance.loginName,
                            Core.LoginStore.instance.token,
                            Core.gn
                        )
                    );
                }),
                (t.prototype.onSocketData = function(t, e) {
                    switch (t.respId) {
                        case a.Se:
                            var i = t;
                            0 == i.retCode
                                ? o.ShbGameSocket.instance.writeBytes(
                                      a.getCMDAutoEnterTable(this.vid)
                                  )
                                : (e.killSocket(),
                                  dclib('LOGIN Game FAIL ' + i.retCode),
                                  Core.LoginStore.instance.renewToken(
                                      function() {
                                          e.autoConnect();
                                      },
                                      this
                                  ),
                                  Core.globalStore.dispatchGlobal(a.pn));
                            break;
                        case a.Ee:
                            var r = t;
                            0 == r.retCode || 23 == r.retCode
                                ? ((this.tableCode = r.tableCode),
                                  this.dispatchAction(a.de),
                                  e.writeBytes(a.getCMDGetGameCurrentStatus()),
                                  Core.NonstopTimer.instance.setTimeout(
                                      function() {
                                          Core.globalStore.dispatchGlobal(a.zn);
                                      },
                                      this,
                                      1e3
                                  ))
                                : Core.globalStore.dispatchGlobal(
                                      a.pn,
                                      r.retCode
                                  );
                            break;
                        case a.Ae:
                            var s = t;
                            this.dispatchAction(a.kn, s.roundNum);
                            break;
                        case a.gt:
                            var n = t;
                            -2 === n.action &&
                                n.loginname ===
                                    Core.LoginStore.instance.loginName &&
                                this.dispatchAction(a.wn);
                    }
                }),
                (t.prototype.release = function() {
                    e.prototype.release.call(this), this.dispatchAction(a.O);
                }),
                (t.prototype.onSocketDie = function(t) {
                    t === o.ShbGameSocket.instance &&
                        Core.globalStore.dispatchGlobal(a.oe);
                }),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                t
            );
        })(Core.NetworkStoreBase);
        (o.ShbStore = t), __reflect(t.prototype, 'VideoGameCore.Shb.ShbStore');
    })((t = a.Shb || (a.Shb = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(c) {
    var t;
    !(function(u) {
        var t = (function(e) {
            function t() {
                var t = e.call(this) || this;
                return (
                    (t.waitingForPlayerPool = !1),
                    (t.playtypes = c.ZJH_BET_PLAYTYPES),
                    (t.stakePool = new c.StakePool()),
                    (t.donePool = new c.StakePool()),
                    (t.diffPool = new c.StakePool()),
                    (t.lastPool = new c.StakePool()),
                    (t.tablePool = new c.TablePool()),
                    (t.playerPlayInfoMap = new Core.HashMap()),
                    (t.otherPlayInfoMap = new Core.HashMap()),
                    (t.playerPayoutInfoMap = new Core.ArrayMap()),
                    (t.socketList = [c.ZjhGameSocket.instance]),
                    t
                );
            }
            return (
                __extends(t, e),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                Object.defineProperty(t.prototype, 'roomTimerStore', {
                    get: function() {
                        return u.RoomTimerStore.instance;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, 'mySeatNum', {
                    get: function() {
                        return 1;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, 'otherSeatNum', {
                    get: function() {
                        return 2;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.getAmountByPlaytype = function(t, e) {
                    void 0 === e && (e = 0);
                    var i = 0;
                    return (
                        0 === e
                            ? (i = this.stakePool.getAmount(t))
                            : 1 === e
                                ? (i = this.donePool.getAmount(t))
                                : 2 === e && (i = this.lastPool.getAmount(t)),
                        i
                    );
                }),
                (t.prototype.getOtherTablePoolAmount = function(t) {
                    var e = this.tablePool.getAmount(2, t);
                    return e && (e = Math.floor(100 * e) / 100), e;
                }),
                (t.prototype.getBetLimitByPlayType = function(t) {
                    return c.UserStore.instance.getBetLimitByPlayType(
                        t,
                        c.ZjhStore.instance.tableCode
                    );
                }),
                (t.prototype.reset = function() {
                    e.prototype.reset.call(this),
                        this.tablePool.clear(),
                        this.playerPayoutInfoMap.keys.length &&
                            (this.playerPayoutInfoMap = new Core.ArrayMap());
                }),
                (t.prototype.sendBetBundleToServer = function(t) {
                    if (!this.gameSocket.connected)
                        return void this.dispatchAction(Core.l);
                    var e = Core.getSequence(),
                        i =
                            'MYR' === c.VideoPlazaStore.instance.currencyCode
                                ? 10
                                : 1;
                    c.ZjhGameSocket.instance.writeBytes(
                        c.getCMDGameBetZjh(this.gmcode, t, i, e)
                    );
                }),
                (t.prototype.confirmBet = function() {
                    var i = this;
                    if ((this.dispatchAction(c.h), this.confirmEnabled)) {
                        var r = [];
                        (this.diffPool = this.stakePool.calculateDiff(
                            this.donePool
                        )),
                            this.diffPool
                                .getAllStakeData()
                                .forEach(function(t) {
                                    var e = t.playType;
                                    t.amount <= 0 ||
                                        (0 ===
                                        i.checkLimit(
                                            e,
                                            i.stakePool.getAmount(e)
                                        )
                                            ? ((t.seq = Core.getSequence()),
                                              (t.pending = !0),
                                              r.push(t))
                                            : e ===
                                                  i.stakePool.getLastBetPlayType() &&
                                              c.UserStore.instance.balance -
                                                  i.diffPool.totalAmount <
                                                  c.getMinBalance()
                                                ? ((t.seq = Core.getSequence()),
                                                  (t.pending = !0),
                                                  r.push(t))
                                                : (i.cancelBetByPlayType(e),
                                                  i.dispatchAction(c.r)));
                                }, this),
                            r.length > 0 && this.sendBetBundleToServer(r);
                    }
                }),
                (t.prototype.onSocketData = function(t, e) {
                    var s = this;
                    if (!this.isInvalidVid(t)) {
                        switch (t.respId) {
                            case c.un:
                                this.m(t);
                                break;
                            case c.tn:
                                this._(t);
                                break;
                            case c.cn:
                                var i = t;
                                (this.playerPayoutInfoMap = i.payoutHashMap),
                                    this.V(t);
                                break;
                            case c.vn:
                                var r = t;
                                r.betPoolInfos.forEach(function(t, e) {
                                    s.donePool.setAmount(e, t),
                                        t > s.stakePool.getAmount(e) &&
                                            s.stakePool.setAmount(e, t);
                                }, this),
                                    this.diffPool.clear(),
                                    (this.waitingForPlayerPool = !1),
                                    this.dispatchAction(c.T);
                                break;
                            case c.an:
                                if (6 != u.RoomTimerStore.instance.gameStatus) {
                                    this.waitingForPlayerPool &&
                                        (this.diffPool.clear(),
                                        (this.waitingForPlayerPool = !1));
                                    var n = t;
                                    n.betInfos.forEach(function(t) {
                                        var e = s.getAmountByPlaytype(
                                            t.playType,
                                            1
                                        );
                                        t.amount >= e &&
                                            s.tablePool.addBetToPool(
                                                2,
                                                t.playType,
                                                t.amount - e,
                                                '',
                                                !1
                                            );
                                    }, this),
                                        this.dispatchAction(c.T);
                                }
                                break;
                            case c.Cn:
                                var o = t,
                                    a = [];
                                o.ptPayouts.forEach(function(t) {
                                    var e = s.playerPayoutInfoMap.has(
                                            t.playtype
                                        )
                                            ? s.playerPayoutInfoMap.get(
                                                  t.playtype
                                              ).value
                                            : 0,
                                        i = s.fromRMB(t.value) - e;
                                    if (
                                        ((i = Math.floor(100 * i) / 100),
                                        0 != i)
                                    ) {
                                        var r = new c.PlaytypePayout();
                                        (r.playtype = t.playtype),
                                            (r.value = i),
                                            a.push(r);
                                    }
                                }),
                                    (o.ptPayouts = a),
                                    this.p(o);
                                break;
                            case c.Ws:
                                var h = t;
                                h.result.winPlayTypes.length > 0 &&
                                    this.dispatchAction(
                                        c.P,
                                        h.result.winPlayTypes
                                    ),
                                    (this.waitingForPlayerPool = !0);
                        }
                    }
                }),
                (t.prototype.gameResultTimeoutDo = function(t) {
                    var e = t;
                    this.dispatchAction(c.P, e.result.winPlayTypes),
                        this.reset();
                }),
                (t.prototype.payoutTimeoutDo = function(t) {
                    e.prototype.payoutTimeoutDo.call(this, t),
                        this.dispatchAction(c.k, {
                            seatNum: this.mySeatNum,
                            payouts: t.payoutHashMap.values
                        });
                }),
                (t.prototype.payoutOtherTimeoutDo = function(t) {
                    this.dispatchAction(c.k, {
                        seatNum: this.otherSeatNum,
                        payouts: t.ptPayouts
                    });
                }),
                (t.prototype.getCurrencyBySeatNum = function(t) {
                    return this.tablePool.getCurrency(t);
                }),
                (t.prototype.fromRMB = function(t) {
                    return (
                        Math.round(
                            t * c.VideoPlazaStore.instance.currencyRate * 100
                        ) / 100
                    );
                }),
                t
            );
        })(c.BetStoreBase);
        (u.BetTableStore = t),
            __reflect(t.prototype, 'VideoGameCore.Zjh.BetTableStore');
    })((t = c.Zjh || (c.Zjh = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(C) {
    var t;
    !(function(f) {
        var t = (function(e) {
            function t() {
                var t = e.call(this) || this;
                return (
                    (t.pokerDataQue = []),
                    (t.dDataQue = []),
                    (t.pDataQue = []),
                    (t.dWin = !1),
                    (t.pWin = !1),
                    (t.tie = !1),
                    (t.socketList = [C.ZjhGameSocket.instance]),
                    t
                );
            }
            return (
                __extends(t, e),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                Object.defineProperty(t.prototype, 'visible', {
                    get: function() {
                        return this.pokerDataQue.length > 0;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.onSocketData = function(t, e) {
                    var i = this;
                    if (!t.vid || this.vid === t.vid)
                        switch (t.respId) {
                            case C.rn:
                                var r = t;
                                switch (r.status) {
                                    case 11:
                                    case 1:
                                        this.resetByAction();
                                }
                                break;
                            case C.Ws:
                                var s = t;
                                if ((this.resetAll(), 11 != s.status)) {
                                    for (
                                        var n = 0, o = 0;
                                        o < s.dragonCardlist.length;
                                        o++
                                    )
                                        0 != s.dragonCardlist[o] &&
                                            (n++,
                                            this.pokerDataQue.push(
                                                new C.PokerData(
                                                    s.dragonCardlist[o],
                                                    0,
                                                    n
                                                )
                                            ));
                                    for (
                                        var o = 0;
                                        o < s.phoenixCardlist.length;
                                        o++
                                    )
                                        0 != s.phoenixCardlist[o] &&
                                            (n++,
                                            this.pokerDataQue.push(
                                                new C.PokerData(
                                                    s.phoenixCardlist[o],
                                                    1,
                                                    n
                                                )
                                            ));
                                    if (
                                        (this.parsePokerDataQue(),
                                        5 == s.status &&
                                            6 == this.pokerDataQue.length)
                                    ) {
                                        var a = C.PlazaRoadStore.instance.getZjhRoadData(
                                            this.vid
                                        );
                                        if (a.length) {
                                            var h = a[a.length - 1];
                                            h.gmcode ==
                                                f.RoomTimerStore.instance
                                                    .gmcode &&
                                                this.updateHand(
                                                    h.dragonResult,
                                                    h.phoenixResult
                                                );
                                        }
                                        this.updateResult(s.result);
                                    }
                                    this.dispatchAction(C.vt);
                                }
                                break;
                            case C.mn:
                                var u = t;
                                dclib('debug cardListResp: ', u);
                                Core.NonstopTimer.instance.setTimeout(
                                    function() {
                                        i.resetAll();
                                        for (
                                            var t = 0, e = 0;
                                            e < u.dragonCardList.length;
                                            e++
                                        )
                                            0 != u.dragonCardList[e] &&
                                                (t++,
                                                i.pokerDataQue.push(
                                                    new C.PokerData(
                                                        u.dragonCardList[e],
                                                        0,
                                                        t
                                                    )
                                                ));
                                        for (
                                            var e = 0;
                                            e < u.phoenixCardList.length;
                                            e++
                                        )
                                            0 != u.phoenixCardList[e] &&
                                                (t++,
                                                i.pokerDataQue.push(
                                                    new C.PokerData(
                                                        u.phoenixCardList[e],
                                                        1,
                                                        t
                                                    )
                                                ));
                                        i.parsePokerDataQue(),
                                            i.dispatchAction(C.vt);
                                    },
                                    this,
                                    C.StreamConfig.instance.getAverageDelay()
                                );
                                break;
                            case C.tn:
                                var c = t;
                                this.resultTimer = Core.NonstopTimer.instance.setTimeout(
                                    function() {
                                        this.onResultTimeout(c);
                                    },
                                    this,
                                    5e3
                                );
                        }
                }),
                (t.prototype.resetByAction = function() {
                    Core.NonstopTimer.instance.clearTimeout(this.resultTimer),
                        (this.resultTimer = 0),
                        Core.NonstopTimer.instance.clearTimeout(
                            this.resetTimer
                        ),
                        (this.resetTimer = 0),
                        this.resetAll(),
                        this.dispatchAction();
                }),
                (t.prototype.resetAll = function() {
                    (this.pokerDataQue = []),
                        (this.dDataQue = []),
                        (this.pDataQue = []),
                        (this.pCardType = null),
                        (this.dCardType = null),
                        (this.pWin = !1),
                        (this.dWin = !1),
                        (this.tie = !1);
                }),
                (t.prototype.parsePokerDataQue = function() {
                    (this.dDataQue = []),
                        (this.pDataQue = []),
                        (this.dCardType = null),
                        (this.pCardType = null),
                        (this.dWin = !1),
                        (this.pWin = !1),
                        (this.tie = !1);
                    for (var t = 0; t < this.pokerDataQue.length; t++) {
                        var e = this.pokerDataQue[t],
                            i = e.cardValue;
                        (i = 10 > i ? i : 0),
                            1 == e.who &&
                            this.pDataQue.length <= C.MAX_POKER_NUM
                                ? this.pDataQue.push(e)
                                : 0 == e.who &&
                                  this.dDataQue.length <= C.MAX_POKER_NUM &&
                                  this.dDataQue.push(e);
                    }
                }),
                (t.prototype.onResultTimeout = function(t) {
                    this.updateHand(t.info.dragonResult, t.info.phoenixResult),
                        this.updateResult(t.result),
                        this.dispatchAction(C.vt);
                }),
                (t.prototype.updateResult = function(t) {
                    switch (
                        ((this.dWin = !1),
                        (this.pWin = !1),
                        (this.tie = !1),
                        t.bead.winType)
                    ) {
                        case C.RoadPaper.WinType.BLUE_WIN:
                            this.dWin = !0;
                            break;
                        case C.RoadPaper.WinType.RED_WIN:
                            this.pWin = !0;
                            break;
                        case C.RoadPaper.WinType.TIE:
                            this.tie = !0;
                    }
                }),
                (t.prototype.updateHand = function(t, e) {
                    (this.dCardType = new C.ZjhCardTypeData(t)),
                        (this.pCardType = new C.ZjhCardTypeData(e));
                }),
                (t.prototype.release = function() {
                    e.prototype.release.call(this);
                }),
                t
            );
        })(Core.NetworkStoreBase);
        (f.PokerStore = t),
            __reflect(t.prototype, 'VideoGameCore.Zjh.PokerStore');
    })((t = C.Zjh || (C.Zjh = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t;
    !(function(t) {
        var e = (function(r) {
            function t() {
                var t = r.call(this) || this;
                return (t.socketList = [s.ZjhGameSocket.instance]), t;
            }
            return (
                __extends(t, r),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.onSocketData = function(t, e) {
                    if (
                        (r.prototype.onSocketData.call(this, t, e),
                        !t.vid || this.vid === t.vid)
                    )
                        switch (t.respId) {
                            case s.Ws:
                                this.onGameCurrentStatus(t);
                                break;
                            case s.rn:
                                var i = t;
                                switch (
                                    ((this.gameStatus = i.status),
                                    this.updateTimeout(
                                        i.max_timeout,
                                        i.timeout
                                    ),
                                    11 === i.status
                                        ? this.dispatchAction(s.it)
                                        : this.dispatchAction(s.st, i.vid),
                                    this.gameStatus)
                                ) {
                                    case 1:
                                        this.gmcode != i.gmcode &&
                                            (this.dispatchAction(s.z),
                                            (this.gmcode = i.gmcode),
                                            this.dispatchAction(s.Z));
                                    case 11:
                                        this.dispatchAction(s.it);
                                    default:
                                        this.dispatchAction(s.st, i.vid);
                                }
                        }
                }),
                (t.prototype.onGameCurrentStatus = function(t) {
                    var e = t,
                        i =
                            0 != e.status && 11 != this.gameStatus
                                ? e.gmcode
                                : '',
                        r = this.gmcode == i;
                    switch (
                        (r || this.dispatchAction(s.z),
                        (this.gameStatus = e.status),
                        (this.gmcode = i),
                        this.updateTimeout(e.max_timeout, e.timeout),
                        this.gameStatus)
                    ) {
                        case 1:
                            r || this.dispatchAction(s.Z);
                        case 11:
                            this.dispatchAction(s.it);
                        default:
                            this.dispatchAction(s.Y);
                    }
                }),
                t
            );
        })(s.RoomTimerBaseStore);
        (t.RoomTimerStore = e),
            __reflect(e.prototype, 'VideoGameCore.Zjh.RoomTimerStore');
    })((t = s.Zjh || (s.Zjh = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(o) {
    var t = (function(e) {
        function t() {
            var t = e.call(this) || this;
            return (
                (t.balance = 0),
                (t.loginType = 0),
                (t.seat = -1),
                (t.socketList = [o.ZjhGameSocket.instance]),
                (t.loginType = 2),
                t
            );
        }
        return (
            __extends(t, e),
            (t.prototype.onSocketConnected = function(t) {
                var e = Core.ExternalData.isPcVersion ? 5 : 3;
                t.writeBytes(
                    o.getCMDClientLoginZjh(
                        this.vid,
                        Core.LoginStore.instance.loginName,
                        Core.LoginStore.instance.token,
                        Core.gn,
                        e
                    )
                );
            }),
            (t.prototype.onSocketData = function(t, e) {
                switch (t.respId) {
                    case o.qs:
                        var i = t;
                        0 == i.retCode
                            ? (this.dispatchAction(o.de),
                              Core.NonstopTimer.instance.setTimeout(
                                  function() {
                                      Core.globalStore.dispatchGlobal(o.zn);
                                  },
                                  this,
                                  1e3
                              ))
                            : (e.killSocket(),
                              dclib('LOGIN Game FAIL ' + i.retCode),
                              Core.LoginStore.instance.renewToken(function() {
                                  e.autoConnect();
                              }, this),
                              Core.globalStore.dispatchGlobal(o.pn));
                        break;
                    case o.Vt:
                        var r = t;
                        0 == r.code || 23 == r.code
                            ? ((this.seat = r.seat),
                              (this.tableCode = r.table),
                              this.dispatchAction(o.de, this.seat),
                              e.writeBytes(o.getCMDGetGameCurrentStatus()),
                              Core.NonstopTimer.instance.setTimeout(
                                  function() {
                                      Core.globalStore.dispatchGlobal(o.zn);
                                  },
                                  this,
                                  1e3
                              ))
                            : Core.globalStore.dispatchGlobal(o.pn, r.code);
                        break;
                    case o.Ae:
                        var s = t;
                        this.dispatchAction(o.kn, s.roundNum);
                        break;
                    case o.gt:
                        var n = t;
                        -2 === n.action &&
                            n.loginname ===
                                Core.LoginStore.instance.loginName &&
                            this.dispatchAction(o.wn);
                }
            }),
            (t.prototype.release = function() {
                e.prototype.release.call(this);
            }),
            (t.prototype.onSocketDie = function(t) {
                t === o.ZjhGameSocket.instance &&
                    Core.globalStore.dispatchGlobal(o.oe);
            }),
            Object.defineProperty(t, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.init = function() {
                return this.initInstance(this);
            }),
            t
        );
    })(Core.NetworkStoreBase);
    (o.ZjhStore = t), __reflect(t.prototype, 'VideoGameCore.ZjhStore');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    (t.tu = 'ACTION_PLAZA_LOGIN_SUCCESS'),
        (t._c = 'ACTION_PLAZA_LOGIN_FAIL'),
        (t.Fo = 'ACTION_PLAZA_LOCK_LEFT_NAV'),
        (t.zn = 'ACTION_PLAZA_UNLOCK_LEFT_NAV'),
        (t.lc = 'ACTION_RECOVER_LAST_POS'),
        (t.ni = 'ACTION_DUPLICATE_LOGIN'),
        (t.oe = 'ACTION_GAME_SOCKET_DIE'),
        (t.bc = 'ACTION_LONG_TIME_NO_BET'),
        (t.ke = 'ACTION_UPDATE_USER_DATA'),
        (t.Wa = 'ACTION_UPDATE_USER_POINT'),
        (t.yu = 'ACTION_UPDATE_CHIP_SET'),
        (t.Eu = 'ACTION_SETUP_CHIP_SET'),
        (t.ei = 'ACTION_UPDATE_USER_BALANCE'),
        (t.rt = 'ACTION_UPDATE_ROADMAP'),
        (t.st = 'ACTION_UPDATE_ROOM_STATUS'),
        (t.hc = 'ACTION_UPDATE_VIDEO_INFO'),
        (t.Ja = 'ACTION_UPDATE_PLATFORM_STATUS'),
        (t.Gc = 'ACTION_GAME_MAINTAIN'),
        (t.nh = 'ACTION_BET_RECORD_FINISH'),
        (t.Qu = 'ACTION_CREDIT_RECORD_FINISH'),
        (t.Xu = 'ACTION_USER_POINT_FINISH'),
        (t.$u = 'ACTION_SLOTGAME_RECORD_FINISH'),
        (t.Pc = 'ACTION_ALL_PLATFORM_RECORD_FINISH'),
        (t.tc = 'ACTION_HUNTER_BET_RECORD_FINISH'),
        (t.ec = 'ACTION_HUNTER_CREDIT_RECORD_FINISH'),
        (t.ic = 'ACTION_AG_SPORT_RECORD_FINISH'),
        (t.so = 'ACTION_CHANGE_TABLE'),
        (t.ne = 'ACTION_HAS_BET'),
        (t.Tn = 'ACTION_BACK_LOBBY'),
        (t.Vc = 'ACTION_SELECTED_CHIP_CHANGE'),
        (t.oc = 'ACTION_UPDATE_BANNER'),
        (t.I = 'ACTION_OPEN_VIDEO'),
        (t.R = 'ACTION_CHANGE_VIDEO'),
        (t.at = 'ACTION_CHANGE_VOLUME'),
        (t.me = 'ACTION_CHANGE_SIGNAL'),
        (t.O = 'ACTION_CLOSE_VIDEO'),
        (t.j = 'ACTION_VIDEO_PLAYING'),
        (t.B = 'ACTION_VIDEO_ERROR'),
        (t.sh = 'ACTION_BALANCE_BELOW_CREDIT_ENTER'),
        (t.de = 'ACTION_ENTER_TABLE'),
        (t.Y = 'ACTION_GAME_SNAPSHOT'),
        (t.Kt = 'ACTION_GAME_BET_RESTORE'),
        (t.Z = 'ACTION_GAME_START'),
        (t._t = 'ACTION_TIMER_SEC'),
        (t.w = 'ACTION_STOP_BET'),
        (t.P = 'ACTION_GAME_RESULT'),
        (t.g = 'ACTION_GAME_PAYOUT_ME'),
        (t.k = 'ACTION_GAME_PAYOUT_ALL'),
        (t.it = 'ACTION_GAME_SHUFFLE'),
        (t.z = 'ACTION_GAME_END'),
        (t.kn = 'ACTION_GAME_NO_BET_WARN'),
        (t.wn = 'ACTION_GAME_NO_BET_KICK'),
        (t.Wn = 'ACTION_GAME_ALL_PLAYER_LEAVE'),
        (t.In = 'ACTION_FUNCTION_BUTTON_STATUS'),
        (t.pn = 'ACTION_ENTER_GAME_FAIL'),
        (t.J = 'ACTION_TOGGLE_NO_COMM'),
        (t.ro = 'ACTION_NO_COMM_ENABLE_CHANGED'),
        (t.n = 'ACTION_ADD_CHIPS'),
        (t.o = 'ACTION_REPEAT_BET'),
        (t.f = 'ACTION_CANCEL_BET'),
        (t.Co = 'ACTION_TOGGLE_INS_AUTO_SHOW'),
        (t.C = 'ACTION_BET_NETWAIT'),
        (t.i = 'ACTION_BET_OVER_BALANCE'),
        (t.r = 'ACTION_BET_OVER_LIMIT'),
        (t.gc = 'ACTION_BET_BELOW_LIMIT'),
        (t.s = 'ACTION_BET_LAST_BET'),
        (t.v = 'ACTION_BET_ERROR'),
        (t.G = 'ACTION_BET_ALL_RETURN'),
        (t.pc = 'ACTION_BET_LOAD'),
        (t.Et = 'ACTION_BET_BJ_SIDE'),
        (t.u = 'ACTION_BET_CONFIRM_SEND'),
        (t.h = 'ACTION_BET_CONFIRM_CLICK'),
        (t.zt = 'ACTION_GAME_TABLESEAT'),
        (t.Pt = 'ACTION_GAME_SEAT_CREDIT'),
        (t.bt = 'ACTION_GAME_SEAT_PAYOUT'),
        (t.T = 'ACTION_GAME_TABLE_POOL'),
        (t.jn = 'ACTION_GAME_RECOVER_TABLE_POOL'),
        (t.Xn = 'ACTION_MIPAI_OWNER'),
        (t.vt = 'ACTION_DEAL_CARD_LIST'),
        (t.Lt = 'ACTION_BJ_COMMAND_SHOW'),
        (t.It = 'ACTION_BJ_RECEIVE_COMMAND'),
        (t.Ot = 'ACTION_BJ_NOTICE'),
        (t.Rt = 'ACTION_BJ_CURRENT_HAND_UPDATE'),
        (t.ih = 'ACTION_ANCHOR_INFO_UPDATE'),
        (t.kc = 'ACTION_ANCHOR_LEAVE_GAME'),
        (t.wc = 'ACTION_ANCHOR_SELECT_GAME'),
        (t.zc = 'ACTION_ANCHOR_BET_INFO'),
        (t.ao = 'ACTION_ANCHOR_PAYOUT'),
        (t.eh = 'ACTION_ANCHOR_STATUS_UPDATE'),
        (t.ae = 'ACTION_PREPARE_CHANGE_GAME'),
        (t.re = 'ACTION_SELECT_VIDEO_SUCCESS'),
        (t.se = 'ACTION_ANCHOR_CHANGE_GAME'),
        (t.he = 'ACTION_CLIENT_UNFOLLOW_ANCHOR'),
        (t.rh = 'ACTION_CLIENT_FOLLOW_ANCHOR'),
        (t.oo = 'ACTION_ANCHOR_CHANGE_NOTIFY'),
        (t.$t = 'ACTION_ANCHOR_LOSE_CONN_NOTIFY'),
        (t.no = 'ACTION_ANCHOR_CHAT_LOGIN'),
        (t.Sc = 'ACTION_LIVE_RELEASE'),
        (t.Jn = 'ACTION_LED_LAST_CALL'),
        (t.Rn = 'ACTION_LED_DEALER_TIPS'),
        (t.Un = 'ACTION_CUT_SHOE_START'),
        (t.qn = 'ACTION_CUT_SHOE_TIME_OUT'),
        (t.Kn = 'ACTION_CUT_SHOE_SKIP'),
        (t.Fn = 'ACTION_CUT_SHOE_ANIM'),
        (t.Zn = 'ACTION_CUT_SHOE_FAIL'),
        (t.Yn = 'ACTION_CUT_SHOE_FINISH'),
        (t.yc = 'ACTION_ENTER_ROAD'),
        (t.Ju = 'ACTION_UDDATE_GOOD_ROAD'),
        (t.ht = 'ACTION_CHANGE_PAGE'),
        (t.ho = 'ACTION_SBAC_START_INS_BET'),
        (t.uo = 'ACTION_SBAC_STOP_INS_BET'),
        (t.co = 'ACTION_SBAC_OPEN_INS_BET_PANEL'),
        (t.fo = 'ACTION_SBAC_INS_BET_TIMER_SEC'),
        (t.ri = 'ACTION_GET_TIPS_LIST'),
        (t.si = 'ACTION_FEE_CMD_RESULT'),
        (t.Mn = 'ACTION_ADD_BET_POPUP'),
        (t.Zu = 'ACTION_ANCHOR_ONLINE'),
        (t.Dn = 'ACTION_CONFIRM_BET_POPUP'),
        (t.Hn = 'ACTION_RETURN_ADD_BET_POPUP'),
        (t.Qn = 'ACTION_FULL_PEOPLE'),
        (t.dc = 'ACTION_VIP_EXCULSIVE'),
        (t.An = 'ACTION_OPEN_VIP_SETTING'),
        (t.Nn = 'ACTION_VIP_SETTING_UPDATE'),
        (t.cc = 'ACTION_VIP_PASSWORD_ENTER'),
        (t.On = 'ACTION_VIP_HOST_LEFT_KICK'),
        (t.xn = 'ACTION_VIP_HOST_LEAVE'),
        (t.Sn = 'ACTION_VIP_REQUEST_CHANGE_DEALER'),
        (t.yn = 'ACTION_VIP_REQUEST_CHANGE_SHOE'),
        (t.En = 'ACTION_VIP_REQUEST_CHANGE_SHOE_FAIL'),
        (t.Ce = 'ACTION_ROU_UPDATE_RESULT_STAT'),
        (t.mc = 'ACTION_WALLET_LOGIN'),
        (t.be = 'ACTION_SETTING_SOUND'),
        (t._e = 'ACTION_SETTING_BGM'),
        (t.Pe = 'ACTION_SETTING_GAME'),
        (t.ot = 'ACTION_SETTING_LIVE'),
        (t.Ve = 'ACTION_SETTING_VIDEO'),
        (t.ge = 'ACTION_LED_SETTING_BGM'),
        (t.vc = 'ACTION_SERVICE_LAUNCH'),
        (t.Ec = 'ACTION_HIDE_OTHERS_CHAT'),
        (t.Tc = 'ACTION_SHOW_SIDE_BET_BJ'),
        (t.xc = 'ACTION_SHOW_BAC_BET_POOL'),
        (t.Oc = 'ACTION_SHOW_SIDE_BET_BAC'),
        (t.Ic = 'ACTION_UPDATE_ROAD_MAP_THEME'),
        (t.le = 'ACTION_UPDATE_TABLE_PLAYER_LIST'),
        (t.sc = 'ACTION_UPDATE_MOBILE_QR_CODE'),
        (t.A = 'ACTION_CHANGE_RENDER'),
        (t.N = 'ACTION_CHANGE_LAYER'),
        (t.D = 'ACTION_VIDEO_RESIZE'),
        (t.U = 'ACTION_VIDEO_DRAG'),
        (t.F = 'ACTION_VIDEO_ADD_PLUGIN'),
        (t.K = 'ACTION_VIDEO_REMOVE_PLUGIN');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    (t.PLATFORM_EMAP = 'EMA'),
        (t.PLATFORM_DSP = 'DSP'),
        (t.PLATFORM_AGQ = 'AGQ'),
        (t.PLATFORM_LED = 'LED'),
        (t.PLATFORM_VIP = 'VIP'),
        (t.PLATFORM_SPECIAL = 'SPECIAL'),
        (t.PLATFORM_EMA = 'EMA'),
        (t.PLATFORM_COMP = 'COMP'),
        (t.PLATFORM_LIST = [
            t.PLATFORM_EMAP,
            t.PLATFORM_DSP,
            t.PLATFORM_AGQ,
            t.PLATFORM_LED,
            t.PLATFORM_VIP,
            t.PLATFORM_SPECIAL,
            t.PLATFORM_EMA
        ]),
        (t.GAME_BAC = 'BAC'),
        (t.GAME_CBAC = 'CBAC'),
        (t.GAME_ABAC = 'ABAC'),
        (t.GAME_SBAC = 'SBAC'),
        (t.GAME_DT = 'DT'),
        (t.GAME_ZJH = 'ZJH'),
        (t.GAME_LINK = 'LINK'),
        (t.GAME_ROU = 'ROU'),
        (t.GAME_SHB = 'SHB'),
        (t.GAME_LBAC = 'LBAC'),
        (t.GAME_BJ = 'BJ'),
        (t.GAME_NN = 'NN'),
        (t.GAME_LIVE = 'LIVE'),
        (t.GAME_COMP = 'TBAC'),
        (t.GAME_THIRD = 'THIRD'),
        (t.GAME_SPORT = 'SPTA'),
        (t.GAME_FISH = 'AGFH'),
        (t.GAME_EGAMES = 'SPLZ'),
        (t.GAME_YOPLAY = 'YPLZ'),
        (t.THIRD_GAME_LIST = [
            t.GAME_EGAMES,
            t.GAME_SPORT,
            t.GAME_FISH,
            t.GAME_YOPLAY
        ]),
        (t.GAME_ALL_BAC = [
            t.GAME_BAC,
            t.GAME_CBAC,
            t.GAME_ABAC,
            t.GAME_SBAC,
            t.GAME_LBAC
        ]),
        (t.EU_PLATFORM_LIST = [t.GAME_BAC, t.GAME_ROU, t.GAME_BJ]),
        (t.CONFIG_LIVE = 'ANCH'),
        (t.CONFIG_SPORT = 'TAIN'),
        (t.CONFIG_FISH = 'FISH'),
        (t.CONFIG_EGAMES = 'EGAMES'),
        (t.CONFIG_YOPLAY = 'YOPLAY'),
        (t.THIRD_PLATFORM_LIST = [
            t.CONFIG_SPORT,
            t.CONFIG_FISH,
            t.CONFIG_EGAMES,
            t.CONFIG_YOPLAY
        ]),
        (t.MAINTAIN_YOPLAY = 'AGYP'),
        (t.MAINTAIN_SPORT = 'AGSP'),
        (t.MAINTAIN_FISH = 'FISH'),
        (t.MAINTAIN_LIVE = 'LIVE'),
        (t.MAINTAIN_EGAMES = 'EGM'),
        (t.CURRENCY_CNY = 'CNY'),
        (t.CURRENCY_HKD = 'HKD'),
        (t.CURRENCY_USD = 'USD'),
        (t.CURRENCY_GBP = 'GBP'),
        (t.CURRENCY_EUR = 'EUR'),
        (t.CURRENCY_DEFAULT = 'DEFAULT'),
        (t.LANG_RULE_LIST = { hans: 'zh', hant: 'tr', en: 'en' }),
        (t.RULE_INDEX_LIST = {
            INDEX: 'index.jsp',
            BAC: 'b1.jsp',
            CBAC: 'b2.jsp',
            LBAC: 'b3.jsp',
            BAC_DB: 'b4.jsp',
            SBAC: 'b5.jsp',
            BJ: 'bj.jsp',
            NN: 'niuniu.jsp',
            DT: 'c1.jsp',
            ROU: 'd1.jsp',
            SHB: 'e1.jsp',
            GOODROAD: 'b7.jsp',
            ABAC: 'b3.jsp',
            ZJH: 'zhajinhua.jsp'
        }),
        (t.BET_HISTORY_LIVE = 'BET_HISTORY_LIVE'),
        (t.BET_HISTORY_LIVE_CREDIT = 'BET_HISTORY_LIVE_CREDIT'),
        (t.BET_HISTORY_USER_POINT = 'BET_HISTORY_USER_POINT'),
        (t.BET_HISTORY_SLOT_GAME = 'BET_HISTORY_SLOT_GAME'),
        (t.BET_HISTORY_TABLE = 'BET_HISTORY_TABLE'),
        (t.BET_HISTORY_FISH = 'BET_HISTORY_FISH'),
        (t.BET_HISTORY_FISH_CREDIT = 'BET_HISTORY_FISH_CREDIT'),
        (t.BET_HISTORY_AG_SPORT = 'BET_HISTORY_AG_SPORT'),
        (t.PLAYTYPE_UNKNOWN = 0),
        (t.PLAYTYPE_BANKER = 1),
        (t.PLAYTYPE_PLAYER = 2),
        (t.PLAYTYPE_TIE = 3),
        (t.PLAYTYPE_BANKER_PAIR = 4),
        (t.PLAYTYPE_PLAYER_PAIR = 5),
        (t.PLAYTYPE_BIG = 6),
        (t.PLAYTYPE_SMALL = 7),
        (t.PLAYTYPE_BANKER_INS = 8),
        (t.PLAYTYPE_PLAYER_INS = 9),
        (t.PLAYTYPE_BANKER_NO_COMMISSION = 11),
        (t.PLAYTYPE_BANKER_DRAGON_BONUS = 12),
        (t.PLAYTYPE_PLAYER_DRAGON_BONUS = 13),
        (t.PLAYTYPE_SUPER_SIX = 14),
        (t.PLAYTYPE_ANY_PAIR = 15),
        (t.PLAYTYPE_PERFECT_PAIR = 16),
        (t.PLAYTYPE_DRAGON = 21),
        (t.PLAYTYPE_TIGER = 22),
        (t.PLAYTYPE_DT_TIE = 23),
        (t.PLAYTYPE_NN_PLAYER_1_EQUAL = 211),
        (t.PLAYTYPE_NN_PLAYER_1_DOUBLE = 212),
        (t.PLAYTYPE_NN_PLAYER_2_EQUAL = 213),
        (t.PLAYTYPE_NN_PLAYER_2_DOUBLE = 214),
        (t.PLAYTYPE_NN_PLAYER_3_EQUAL = 215),
        (t.PLAYTYPE_NN_PLAYER_3_DOUBLE = 216),
        (t.PLAYTYPE_NN_BANKER_1_EQUAL = 207),
        (t.PLAYTYPE_NN_BANKER_1_DOUBLE = 208),
        (t.PLAYTYPE_NN_BANKER_2_EQUAL = 209),
        (t.PLAYTYPE_NN_BANKER_2_DOUBLE = 210),
        (t.PLAYTYPE_NN_BANKER_3_EQUAL = 217),
        (t.PLAYTYPE_NN_BANKER_3_DOUBLE = 218),
        (t.PLAYTYPE_ROU_DIRECT = 101),
        (t.PLAYTYPE_ROU_SEPARATE = 102),
        (t.PLAYTYPE_ROU_STREET = 103),
        (t.PLAYTYPE_ROU_TRIANGLE = 104),
        (t.PLAYTYPE_ROU_FOUR_NUMBER = 105),
        (t.PLAYTYPE_ROU_CORNER = 106),
        (t.PLAYTYPE_ROU_LINE1 = 107),
        (t.PLAYTYPE_ROU_LINE2 = 108),
        (t.PLAYTYPE_ROU_LINE3 = 109),
        (t.PLAYTYPE_ROU_ROW = 110),
        (t.PLAYTYPE_ROU_DOZEN1 = 111),
        (t.PLAYTYPE_ROU_DOZEN2 = 112),
        (t.PLAYTYPE_ROU_DOZEN3 = 113),
        (t.PLAYTYPE_ROU_RED = 114),
        (t.PLAYTYPE_ROU_BLACK = 115),
        (t.PLAYTYPE_ROU_BIG = 116),
        (t.PLAYTYPE_ROU_SMALL = 117),
        (t.PLAYTYPE_ROU_ODD = 118),
        (t.PLAYTYPE_ROU_EVEN = 119),
        (t.PLAYTYPE_SHB_BIG = 41),
        (t.PLAYTYPE_SHB_SMALL = 42),
        (t.PLAYTYPE_SHB_ODD = 43),
        (t.PLAYTYPE_SHB_EVEN = 44),
        (t.PLAYTYPE_SHB_TRIPLE_ANY = 45),
        (t.PLAYTYPE_SHB_TRIPLE_1 = 46),
        (t.PLAYTYPE_SHB_TRIPLE_2 = 47),
        (t.PLAYTYPE_SHB_TRIPLE_3 = 48),
        (t.PLAYTYPE_SHB_TRIPLE_4 = 49),
        (t.PLAYTYPE_SHB_TRIPLE_5 = 50),
        (t.PLAYTYPE_SHB_TRIPLE_6 = 51),
        (t.PLAYTYPE_SHB_SINGLE_1 = 52),
        (t.PLAYTYPE_SHB_SINGLE_2 = 53),
        (t.PLAYTYPE_SHB_SINGLE_3 = 54),
        (t.PLAYTYPE_SHB_SINGLE_4 = 55),
        (t.PLAYTYPE_SHB_SINGLE_5 = 56),
        (t.PLAYTYPE_SHB_SINGLE_6 = 57),
        (t.PLAYTYPE_SHB_DOUBLE_1 = 58),
        (t.PLAYTYPE_SHB_DOUBLE_2 = 59),
        (t.PLAYTYPE_SHB_DOUBLE_3 = 60),
        (t.PLAYTYPE_SHB_DOUBLE_4 = 61),
        (t.PLAYTYPE_SHB_DOUBLE_5 = 62),
        (t.PLAYTYPE_SHB_DOUBLE_6 = 63),
        (t.PLAYTYPE_SHB_COMBO_1_2 = 64),
        (t.PLAYTYPE_SHB_COMBO_1_3 = 65),
        (t.PLAYTYPE_SHB_COMBO_1_4 = 66),
        (t.PLAYTYPE_SHB_COMBO_1_5 = 67),
        (t.PLAYTYPE_SHB_COMBO_1_6 = 68),
        (t.PLAYTYPE_SHB_COMBO_2_3 = 69),
        (t.PLAYTYPE_SHB_COMBO_2_4 = 70),
        (t.PLAYTYPE_SHB_COMBO_2_5 = 71),
        (t.PLAYTYPE_SHB_COMBO_2_6 = 72),
        (t.PLAYTYPE_SHB_COMBO_3_4 = 73),
        (t.PLAYTYPE_SHB_COMBO_3_5 = 74),
        (t.PLAYTYPE_SHB_COMBO_3_6 = 75),
        (t.PLAYTYPE_SHB_COMBO_4_5 = 76),
        (t.PLAYTYPE_SHB_COMBO_4_6 = 77),
        (t.PLAYTYPE_SHB_COMBO_5_6 = 78),
        (t.PLAYTYPE_SHB_SUM_4 = 79),
        (t.PLAYTYPE_SHB_SUM_5 = 80),
        (t.PLAYTYPE_SHB_SUM_6 = 81),
        (t.PLAYTYPE_SHB_SUM_7 = 82),
        (t.PLAYTYPE_SHB_SUM_8 = 83),
        (t.PLAYTYPE_SHB_SUM_9 = 84),
        (t.PLAYTYPE_SHB_SUM_10 = 85),
        (t.PLAYTYPE_SHB_SUM_11 = 86),
        (t.PLAYTYPE_SHB_SUM_12 = 87),
        (t.PLAYTYPE_SHB_SUM_13 = 88),
        (t.PLAYTYPE_SHB_SUM_14 = 89),
        (t.PLAYTYPE_SHB_SUM_15 = 90),
        (t.PLAYTYPE_SHB_SUM_16 = 91),
        (t.PLAYTYPE_SHB_SUM_17 = 92),
        (t.PLAYTYPE_BJ_ANTE = 220),
        (t.PLAYTYPE_BJ_ANTE_SPLIT = 221),
        (t.PLAYTYPE_BJ_INSURE = 222),
        (t.PLAYTYPE_BJ_DOUBLE = 224),
        (t.PLAYTYPE_BJ_PERFECT_PAIR = 226),
        (t.PLAYTYPE_BJ_TWENTY_FIRST_PLUS_THREE = 227),
        (t.PLAYTYPE_BJ_SIDE = 228),
        (t.PLAYTYPE_BJ_SIDE_SPLIT = 229),
        (t.PLAYTYPE_BJ_SIDE_INSURE = 230),
        (t.PLAYTYPE_BJ_SIDE_DOUBLE = 232),
        (t.PLAYTYPE_ZJH_DRAGON = 260),
        (t.PLAYTYPE_ZJH_PHOENIX = 261),
        (t.PLAYTYPE_ZJH_PAIR_8_PLUS = 262),
        (t.PLAYTYPE_ZJH_FLUSH = 263),
        (t.PLAYTYPE_ZJH_STRAIGHT = 264),
        (t.PLAYTYPE_ZJH_THREE_OF_A_KIND = 265),
        (t.PLAYTYPE_ZJH_STRAIGHT_FLUSH = 266),
        (t.PLATFORMTYPE = 'PLATFORMTYPE'),
        (t.PLAYTYPE = 'PLAYTYPE'),
        (t.TRANSTYPE = 'TRANSTYPE'),
        (t.BET_PLAYTYPES_DB = [
            t.PLAYTYPE_BANKER_DRAGON_BONUS,
            t.PLAYTYPE_PLAYER_DRAGON_BONUS
        ]),
        (t.BET_PLAYTYPES_SS = [t.PLAYTYPE_SUPER_SIX]),
        (t.BET_PLAYTYPES_PAIR = [t.PLAYTYPE_ANY_PAIR, t.PLAYTYPE_PERFECT_PAIR]),
        (t.BET_PLAYTYPES = [
            t.PLAYTYPE_BANKER,
            t.PLAYTYPE_PLAYER,
            t.PLAYTYPE_TIE,
            t.PLAYTYPE_BANKER_PAIR,
            t.PLAYTYPE_PLAYER_PAIR,
            t.PLAYTYPE_BIG,
            t.PLAYTYPE_SMALL
        ]),
        (t.DT_BET_PLAYTYPES = [
            t.PLAYTYPE_DRAGON,
            t.PLAYTYPE_TIGER,
            t.PLAYTYPE_DT_TIE
        ]),
        (t.NN_BET_PLAYTYPES = [
            t.PLAYTYPE_NN_PLAYER_1_EQUAL,
            t.PLAYTYPE_NN_PLAYER_1_DOUBLE,
            t.PLAYTYPE_NN_PLAYER_2_EQUAL,
            t.PLAYTYPE_NN_PLAYER_2_DOUBLE,
            t.PLAYTYPE_NN_PLAYER_3_EQUAL,
            t.PLAYTYPE_NN_PLAYER_3_DOUBLE
        ]),
        (t.ROU_BET_PLAYTYPES = [
            t.PLAYTYPE_ROU_DIRECT,
            t.PLAYTYPE_ROU_SEPARATE,
            t.PLAYTYPE_ROU_STREET,
            t.PLAYTYPE_ROU_TRIANGLE,
            t.PLAYTYPE_ROU_FOUR_NUMBER,
            t.PLAYTYPE_ROU_CORNER,
            t.PLAYTYPE_ROU_LINE1,
            t.PLAYTYPE_ROU_LINE2,
            t.PLAYTYPE_ROU_LINE3,
            t.PLAYTYPE_ROU_ROW,
            t.PLAYTYPE_ROU_DOZEN1,
            t.PLAYTYPE_ROU_DOZEN2,
            t.PLAYTYPE_ROU_DOZEN3,
            t.PLAYTYPE_ROU_RED,
            t.PLAYTYPE_ROU_BLACK,
            t.PLAYTYPE_ROU_BIG,
            t.PLAYTYPE_ROU_SMALL,
            t.PLAYTYPE_ROU_ODD,
            t.PLAYTYPE_ROU_EVEN
        ]),
        (t.SHB_BET_PLAYTYPES = [
            t.PLAYTYPE_SHB_BIG,
            t.PLAYTYPE_SHB_SMALL,
            t.PLAYTYPE_SHB_ODD,
            t.PLAYTYPE_SHB_EVEN,
            t.PLAYTYPE_SHB_TRIPLE_ANY,
            t.PLAYTYPE_SHB_TRIPLE_1,
            t.PLAYTYPE_SHB_TRIPLE_2,
            t.PLAYTYPE_SHB_TRIPLE_3,
            t.PLAYTYPE_SHB_TRIPLE_4,
            t.PLAYTYPE_SHB_TRIPLE_5,
            t.PLAYTYPE_SHB_TRIPLE_6,
            t.PLAYTYPE_SHB_SINGLE_1,
            t.PLAYTYPE_SHB_SINGLE_2,
            t.PLAYTYPE_SHB_SINGLE_3,
            t.PLAYTYPE_SHB_SINGLE_4,
            t.PLAYTYPE_SHB_SINGLE_5,
            t.PLAYTYPE_SHB_SINGLE_6,
            t.PLAYTYPE_SHB_DOUBLE_1,
            t.PLAYTYPE_SHB_DOUBLE_2,
            t.PLAYTYPE_SHB_DOUBLE_3,
            t.PLAYTYPE_SHB_DOUBLE_4,
            t.PLAYTYPE_SHB_DOUBLE_5,
            t.PLAYTYPE_SHB_DOUBLE_6,
            t.PLAYTYPE_SHB_COMBO_1_2,
            t.PLAYTYPE_SHB_COMBO_1_3,
            t.PLAYTYPE_SHB_COMBO_1_4,
            t.PLAYTYPE_SHB_COMBO_1_5,
            t.PLAYTYPE_SHB_COMBO_1_6,
            t.PLAYTYPE_SHB_COMBO_2_3,
            t.PLAYTYPE_SHB_COMBO_2_4,
            t.PLAYTYPE_SHB_COMBO_2_5,
            t.PLAYTYPE_SHB_COMBO_2_6,
            t.PLAYTYPE_SHB_COMBO_3_4,
            t.PLAYTYPE_SHB_COMBO_3_5,
            t.PLAYTYPE_SHB_COMBO_3_6,
            t.PLAYTYPE_SHB_COMBO_4_5,
            t.PLAYTYPE_SHB_COMBO_4_6,
            t.PLAYTYPE_SHB_COMBO_5_6,
            t.PLAYTYPE_SHB_SUM_4,
            t.PLAYTYPE_SHB_SUM_5,
            t.PLAYTYPE_SHB_SUM_6,
            t.PLAYTYPE_SHB_SUM_7,
            t.PLAYTYPE_SHB_SUM_8,
            t.PLAYTYPE_SHB_SUM_9,
            t.PLAYTYPE_SHB_SUM_10,
            t.PLAYTYPE_SHB_SUM_11,
            t.PLAYTYPE_SHB_SUM_12,
            t.PLAYTYPE_SHB_SUM_13,
            t.PLAYTYPE_SHB_SUM_14,
            t.PLAYTYPE_SHB_SUM_15,
            t.PLAYTYPE_SHB_SUM_16,
            t.PLAYTYPE_SHB_SUM_17
        ]),
        (t.BJ_BET_PLAYTYPES = [
            t.PLAYTYPE_BJ_ANTE,
            t.PLAYTYPE_BJ_ANTE_SPLIT,
            t.PLAYTYPE_BJ_INSURE,
            t.PLAYTYPE_BJ_DOUBLE,
            t.PLAYTYPE_BJ_PERFECT_PAIR,
            t.PLAYTYPE_BJ_TWENTY_FIRST_PLUS_THREE,
            t.PLAYTYPE_BJ_SIDE,
            t.PLAYTYPE_BJ_SIDE_SPLIT,
            t.PLAYTYPE_BJ_SIDE_INSURE,
            t.PLAYTYPE_BJ_SIDE_DOUBLE
        ]),
        (t.SBAC_BET_PLAYTYPES = [t.PLAYTYPE_BANKER_INS, t.PLAYTYPE_PLAYER_INS]),
        (t.ZJH_BET_PLAYTYPES = [
            t.PLAYTYPE_ZJH_DRAGON,
            t.PLAYTYPE_ZJH_PHOENIX,
            t.PLAYTYPE_ZJH_PAIR_8_PLUS,
            t.PLAYTYPE_ZJH_FLUSH,
            t.PLAYTYPE_ZJH_STRAIGHT,
            t.PLAYTYPE_ZJH_THREE_OF_A_KIND,
            t.PLAYTYPE_ZJH_STRAIGHT_FLUSH
        ]),
        (t.ZJH_CARD_TYPE = {
            NONE: 0,
            TwoThreeFive: 9,
            HighCard_5: 21,
            HighCard_6: 22,
            HighCard_7: 23,
            HighCard_8: 24,
            HighCard_9: 25,
            HighCard_10: 26,
            HighCard_J: 27,
            HighCard_Q: 28,
            HighCard_K: 29,
            HighCard_A: 30,
            Pair_2: 34,
            Pair_3: 35,
            Pair_4: 36,
            Pair_5: 37,
            Pair_6: 38,
            Pair_7: 39,
            Pair_8: 40,
            Pair_9: 41,
            Pair_10: 42,
            Pair_J: 43,
            Pair_Q: 44,
            Pair_K: 45,
            Pair_A: 46,
            Straight: 48,
            Flush: 64,
            StraightFlush: 80,
            ThreeOfAKind: 96
        }),
        (t.ZJH_CARD_TYPE_STRING = {
            NONE: 'none',
            TwoThreeFive: '235',
            HighCard_5: 'high_card_5',
            HighCard_6: 'high_card_6',
            HighCard_7: 'high_card_7',
            HighCard_8: 'high_card_8',
            HighCard_9: 'high_card_9',
            HighCard_10: 'high_card_10',
            HighCard_J: 'high_card_J',
            HighCard_Q: 'high_card_Q',
            HighCard_K: 'high_card_K',
            HighCard_A: 'high_card_A',
            Pair_2: 'pair_card_2',
            Pair_3: 'pair_card_3',
            Pair_4: 'pair_card_4',
            Pair_5: 'pair_card_5',
            Pair_6: 'pair_card_6',
            Pair_7: 'pair_card_7',
            Pair_8: 'pair_card_8',
            Pair_9: 'pair_card_9',
            Pair_10: 'pair_card_10',
            Pair_J: 'pair_card_J',
            Pair_Q: 'pair_card_Q',
            Pair_K: 'pair_card_K',
            Pair_A: 'pair_card_A',
            Straight: 'straight',
            Flush: 'flush',
            StraightFlush: 'straight_flush',
            ThreeOfAKind: 'three_of_a_kind'
        }),
        (t.COMM_FREE_KEY = 'COMM_FREE_KEY'),
        (t.INS_AUTO_SHOW_KEY = 'INS_AUTO_SHOW_KEY'),
        (t.MAX_DT_POKER_NUM = 1),
        (t.MAX_POKER_NUM = 3),
        (t.MAX_TABLE_SEAT = 7),
        (t.VIP_VISIT_TABLE_SEAT = 8),
        (t.MAX_BET_GAME_BAC_BIG_SMALL = 30),
        (t.MAX_BEGIN_GAME_BAC_DRAGON_BONUS = 30),
        (t.VALID_VID_LIST = []),
        (t.LINK_GAME_VIDS = 'LINK_GAME_VIDS'),
        (t.BJ_HAND_INDEX_DEALER = 0),
        (t.BJ_BASE_HAND_CARD_NUM = 2),
        (t.BJ_HAND_STATUS = { NONE: 0, SPLIT: 1, DOUBLE: 2, HIT: 4, STAND: 8 }),
        (t.BJ_RESULT_TYPE = {
            NONE: 0,
            NORMAL: 1,
            BUST: 2,
            BEST_HAND: 3,
            BLACKJACK: 4
        }),
        (t.BJ_POINT = { BEST_HAND_POINT: 21, MAX_POINT_VALUE: 10 }),
        (t.GOOD_ROAD_TYPE_CFG = [
            { type: 1, pattern: '1111', match: '-1111?', option: 1 },
            { type: 2, pattern: '2222', match: '-2222?', option: 2 },
            { type: 3, pattern: '1122211', match: '-11?-22?', option: 1 },
            { type: 3, pattern: '1122211', match: '-22?-11?', option: 2 },
            { type: 4, pattern: '2121', match: '-2-1-2-1', option: 1 },
            { type: 4, pattern: '1212', match: '-1-2-1-2', option: 2 },
            { type: 5, pattern: '122122', match: '-1-22-1-22', option: 1 },
            { type: 6, pattern: '211211', match: '-2-11-2-11', option: 2 },
            { type: 7, pattern: '11112112', match: '-1111?-2-11-2', option: 1 },
            {
                type: 8,
                pattern: '221222211',
                match: '-22-1-2222?-11',
                option: 2
            },
            {
                type: 11,
                pattern: '121121211',
                match: '-1-2?-11?-2?-1-2?-11?',
                option: 1
            },
            {
                type: 12,
                pattern: '212212122',
                match: '-2-1?-22?-1?-2-1?-22?',
                option: 2
            }
        ]),
        (t.GOOD_ROAD_TYPE_ARRAY = [1, 2, 3, 4, 5, 6, 7, 8, 11, 12]),
        (t.GOOD_ROAD_SETTING_KEY = 'GOOD_ROAD_SETTING_KEY'),
        (t.TIMEOUT = { PAYOUT: 4e3, TWEEN: 500 }),
        (t.VIP_HOST_SEAT = 4),
        (t.ERROR_CODE = {
            NO_TABLE_AVAILABLE: 72,
            VIP_NOT_RESERVED: 90,
            VIP_RESERVED: 91,
            VIP_INVALID_PASSWORD: 97,
            SHOE_ALREADY_CUT: 101,
            PLAYER_SKIP_CUT_SHOE: 102,
            NO_SEAT_AVAILABLE: 36
        }),
        (t.REPLAY_ZOOM_MAX_LVL = 3);
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    i.EVENT_TOUCH_OUTSIDE = 'EVENT_TOUCH_OUTSIDE';
    var t = (function(e) {
        function t() {
            var t = e.call(this) || this;
            return (
                t.addEventListener(
                    egret.Event.ADDED_TO_STAGE,
                    t.onAddToStage,
                    t
                ),
                t.addEventListener(
                    egret.Event.REMOVED_FROM_STAGE,
                    t.onRemoveFromStage,
                    t
                ),
                t
            );
        }
        return (
            __extends(t, e),
            (t.prototype.onAddToStage = function() {
                this.stage.addEventListener(
                    egret.TouchEvent.TOUCH_BEGIN,
                    this.touchBegin,
                    this
                );
            }),
            (t.prototype.onRemoveFromStage = function() {
                this.stage.removeEventListener(
                    egret.TouchEvent.TOUCH_BEGIN,
                    this.touchBegin,
                    this
                );
            }),
            (t.prototype.touchBegin = function(t) {
                this.getTransformedBounds(this.stage).containsPoint(
                    new egret.Point(t.stageX, t.stageY)
                ) || this.dispatchEventWith(i.EVENT_TOUCH_OUTSIDE);
            }),
            t
        );
    })(eui.Group);
    (i.DropDownViewContainer = t),
        __reflect(t.prototype, 'VideoGameCore.DropDownViewContainer');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(n) {
    function t(t) {
        void 0 === t && (t = '');
        var e = 1;
        return (
            'MYR' == n.VideoPlazaStore.instance.currencyCode &&
                (e = t == n.GAME_SBAC ? 100 : 10),
            e
        );
    }
    function e(t, e) {
        void 0 === e && (e = null),
            e || (e = n.VideoPlazaStore.instance.currencyRate);
        var i = t * e;
        return Math.round(i);
    }
    function i(t) {
        var e = 1;
        return (
            n.VideoPlazaStore.instance.currencyInfo &&
                (e = n.VideoPlazaStore.instance.currencyInfo.get(t)),
            e
        );
    }
    function r(t, e) {
        for (var i = t.length, r = i; r > -1; r--) t[r] === e && t.splice(r, 1);
    }
    function o(t) {
        var e = 15 & t,
            i = t >> 4;
        return e >= 1 && 13 >= e && i >= 0 && 4 > i;
    }
    function s(t, e, i) {
        void 0 === e && (e = 'cards_json.'), void 0 === i && (i = 0);
        var r, s;
        switch (48 & t) {
            case 0:
                r = 'S';
                break;
            case 16:
                r = 'D';
                break;
            case 48:
                r = 'H';
                break;
            case 32:
                r = 'C';
        }
        return (
            (s = 15 & t),
            o(t)
                ? e + r + s
                : e +
                  (n.PCGameConfig.instance && n.PCGameConfig.instance.useHWLogo
                      ? 'HW_bg_'
                      : 'bg_') +
                  i
        );
    }
    function a(t, e) {
        void 0 === e && (e = 'cards_json.');
        var i, r;
        switch (48 & t) {
            case 0:
                i = 'S';
                break;
            case 16:
                i = 'D';
                break;
            case 48:
                i = 'H';
                break;
            case 32:
                i = 'C';
        }
        return (
            (r = 15 & t),
            o(t)
                ? e + i + r
                : e +
                  (n.PCGameConfig.instance && n.PCGameConfig.instance.useHWLogo
                      ? 'HW_bg'
                      : 'bg')
        );
    }
    function h(t, e, i) {
        void 0 === i && (i = 0);
        var r = '';
        switch (e) {
            case 0:
                r = 'cards_json.';
                break;
            case 1:
                r = 'cards2_json.';
                break;
            case 2:
                r = 'cards3_json.';
                break;
            case 3:
                r = 'cards4_json.';
        }
        return s(t, r, i);
    }
    function u(t, e) {
        void 0 === e && (e = !0);
        var i = [
                0.7,
                0,
                0,
                0,
                0,
                0,
                0.7,
                0,
                0,
                0,
                0,
                0,
                0.7,
                0,
                0,
                0,
                0,
                0,
                1,
                0
            ],
            r = new egret.ColorMatrixFilter(i);
        t.filters = e ? [r] : [];
    }
    function c(t) {
        var e = Core.getConfigLang(Core.LocalizeStore.instance.lang),
            i = n.PCPlazaConfig.instance.invertColorLangList.indexOf(e) >= 0;
        return t > 0
            ? i
                ? 16711731
                : 6749952
            : 0 == t
                ? 16777215
                : i
                    ? 6749952
                    : 16711731;
    }
    function f() {
        return 'MYR' === n.VideoPlazaStore.instance.currencyCode ? 0.5 : 1;
    }
    function C(t, e) {
        var i = !1;
        return t && t.length >= 3 && (i = e != l(t)), i;
    }
    function l(t) {
        var e = '';
        return t && t.length >= 3 && (e = t.slice(0, 1) + 'V' + t.slice(2)), e;
    }
    function m(t, e) {
        return t + (e ? 'S' : 'E');
    }
    function d(t, e, i, r, s) {
        var n = null;
        if (t) {
            var o = t[e];
            if (void 0 != o && 'number' == typeof o) {
                egret.Tween.removeTweens(t);
                var a = Math.abs(i - o);
                if (0 != a) {
                    var h = r > 0 ? (s * a) / r : 0;
                    if (h > 0) {
                        var u = {};
                        (u[e] = i), (n = egret.Tween.get(t).to(u, h));
                    }
                }
            }
        }
        return n;
    }
    (n.getCurrencyBetExtRatio = t),
        (n.convertToMyCurrency = e),
        (n.getCurrencyRate = i),
        (n.removeValueFromArray = r),
        (n.isValidCard = o),
        (n.getImgByCardCode = s),
        (n.getBjImgByCardCode = a),
        (n.getCardImgBySize = h),
        (n.setDark = u),
        (n.getTextColor = c),
        (n.getMinBalance = f),
        (n.isVipVisitPlayer = C),
        (n.getVipTableCodeFromVid = l),
        (n.getVipChipGmtype = m),
        (n.morphNumericProperty = d);
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t = (function(i) {
        function t() {
            return (null !== i && i.apply(this, arguments)) || this;
        }
        return (
            __extends(t, i),
            (t.prototype.prepareDataModel = function(t, e) {
                i.prototype.prepareDataModel.call(this, t, e),
                    Core.Network.LoginSocket.init(),
                    Core.LoginStore.init(),
                    r.PlazaSocket.init(),
                    r.VideoPlazaStore.init(),
                    r.PlazaRoadStore.init(),
                    r.UserStore.init(),
                    r.QueryStore.init(),
                    dclib('VideoGameCore is prepared!'),
                    t.call(e);
            }),
            (t.prototype.releaseDataModel = function() {
                i.prototype.releaseDataModel.call(this),
                    r.PlazaRoadStore.releaseInstance(),
                    r.VideoPlazaStore.releaseInstance(),
                    r.PlazaSocket.releaseInstance(),
                    (this.isPrepared = !1);
            }),
            t
        );
    })(Core.ModuleHandlerBase);
    (r.ModuleHandler = t),
        __reflect(t.prototype, 'VideoGameCore.ModuleHandler'),
        (r.moduleHandler = new t());
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            Object.defineProperty(e, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.init = function() {
                return this.initInstance(this);
            }),
            Object.defineProperty(e.prototype, 'id', {
                get: function() {
                    return 'anchors';
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.prototype.parseXmlObj = function(t) {
                var e = this;
                (this.anchorInfoMap = new Core.HashMap()),
                    (this.anchorInfoList = []),
                    Core.XMLReader.read(t)
                        .find('dealerInfo')
                        .forEach(function(t) {
                            var n = new i.AnchorInfo();
                            (n.id = t.attr('id')),
                                (n.dealertype = t.attr('dealertype')),
                                (n.platform = t.attr('platform')),
                                (n.birthday = t.attr('birthday')),
                                (n.height = t.attr('height')),
                                (n.weight = t.attr('weight')),
                                (n.bwh = t.attr('bwh'));
                            var o = ['en', 'hans', 'hant', 'ko'];
                            t.find('name').forEach(function(t) {
                                for (var e = {}, i = 0; i < o.length; i++) {
                                    var r = t.find(o[i]);
                                    'ko' === o[i] && (r = t.find(o[0])),
                                        r[0] && (e[o[i]] = r[0].text);
                                }
                                n.name = e;
                            }, e),
                                t.find('interest').forEach(function(t) {
                                    for (var e = {}, i = 0; i < o.length; i++) {
                                        var r = t.find(o[i]);
                                        'ko' === o[i] && (r = t.find(o[0])),
                                            r[0] && (e[o[i]] = r[0].text);
                                    }
                                    n.interest = e;
                                }, e),
                                t.find('experiences').forEach(function(t) {
                                    var s = [];
                                    t.find('experience').forEach(function(t) {
                                        for (
                                            var e = {}, i = 0;
                                            i < o.length;
                                            i++
                                        ) {
                                            var r = t.find(o[i]);
                                            r[0] && (e[o[i]] = r[0].text);
                                        }
                                        s.push(e);
                                    }, e),
                                        (n.experiences = s);
                                }, e),
                                e.anchorInfoMap.set(t.attr('id'), n),
                                e.anchorInfoList.push(n);
                        }, this);
            }),
            (e.prototype.findById = function(t) {
                return this.anchorInfoMap.has(t)
                    ? this.anchorInfoMap.get(t)
                    : null;
            }),
            (e.prototype.fetchAll = function() {
                return this.anchorInfoList;
            }),
            e
        );
    })(Core.Config.CachedConfigBase);
    (i.AnchorConfig = t), __reflect(t.prototype, 'VideoGameCore.AnchorConfig');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(e) {
        function t() {
            var t = (null !== e && e.apply(this, arguments)) || this;
            return (
                (t.bgmtrackNameZhMap = new Core.HashMap()),
                (t.bgmtrackNameTrMap = new Core.HashMap()),
                (t.bgmFileNameMap = new Core.HashMap()),
                (t.curPlayingTrack = 'bgm1_mp3'),
                (t.curTrackIndex = 0),
                t
            );
        }
        return (
            __extends(t, e),
            Object.defineProperty(t, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.init = function() {
                return this.initInstance(this);
            }),
            Object.defineProperty(t.prototype, 'id', {
                get: function() {
                    return 'bgm_config';
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.parseXmlObj = function(t) {
                var n = this;
                Core.XMLReader.read(t)
                    .find('sound')
                    .forEach(function(t) {
                        var e = t.attr('id'),
                            i = t.attr('zh'),
                            r = t.attr('tr'),
                            s = t.attr('file');
                        n.bgmtrackNameZhMap.set(e, i),
                            n.bgmtrackNameTrMap.set(e, r),
                            n.bgmFileNameMap.set(e, s);
                    }, this);
            }),
            (t.prototype.getTrackName = function(t) {
                var e = '',
                    i = Core.LocalizeStore.instance.lang;
                return (e =
                    i == Core.LANG_HANS
                        ? this.bgmtrackNameTrMap.get(t)
                        : this.bgmtrackNameZhMap.get(t));
            }),
            (t.prototype.getFileName = function(t) {
                return this.bgmFileNameMap.has(t)
                    ? this.bgmFileNameMap.get(t)
                    : null;
            }),
            (t.prototype.getAllTracks = function() {
                var t = Core.LocalizeStore.instance.lang;
                if (t == Core.LANG_HANS) {
                    if (this.bgmtrackNameTrMap)
                        return this.bgmtrackNameTrMap.values;
                } else if (this.bgmtrackNameZhMap)
                    return this.bgmtrackNameZhMap.values;
                return [];
            }),
            (t.prototype.getCurPlayingTrack = function() {
                return this.curPlayingTrack;
            }),
            (t.prototype.setCurPlayingTrack = function(t) {
                this.curPlayingTrack = t;
            }),
            (t.prototype.getCurTrackIndex = function() {
                return this.curTrackIndex;
            }),
            (t.prototype.setCurTrackIndex = function(t) {
                this.curTrackIndex = t;
            }),
            (t.prototype.getNumTracks = function() {
                return this.getAllTracks().length;
            }),
            t
        );
    })(Core.Config.CachedConfigBase);
    (t.BgmConfig = e), __reflect(e.prototype, 'VideoGameCore.BgmConfig');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            Object.defineProperty(e, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.init = function() {
                return this.initInstance(this);
            }),
            Object.defineProperty(e.prototype, 'id', {
                get: function() {
                    return 'currency_lang_config';
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.prototype.parseXmlObj = function(t) {
                this.langMap = new Core.HashMap();
                for (
                    var e = Core.XMLReader.read(t).find('group'), i = 0;
                    i < e.length;
                    i++
                ) {
                    var r = e[i],
                        s = r.attr('currency'),
                        n = r.listAttr('lang');
                    this.langMap.set(s, n);
                }
            }),
            (e.prototype.getLangByCurrency = function(t) {
                return this.langMap.has(t)
                    ? this.langMap.get(t)
                    : this.langMap.get(i.CURRENCY_DEFAULT);
            }),
            e
        );
    })(Core.Config.CachedConfigBase);
    (i.CurrencyLangConfig = t),
        __reflect(t.prototype, 'VideoGameCore.CurrencyLangConfig');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            Object.defineProperty(e, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.init = function() {
                return this.initInstance(this);
            }),
            Object.defineProperty(e.prototype, 'id', {
                get: function() {
                    return 'dealer_config';
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.prototype.parseXmlObj = function(t) {
                var n = this;
                this.dealerDataList = new Core.HashMap();
                var e = Core.XMLReader.read(t);
                (this.domain = 'images/dealer'),
                    e.find('dealer').forEach(function(t) {
                        var e = t.attr('platform'),
                            i = t.attr('photoExt'),
                            r = t.attr('subFolder'),
                            s = t.attr('gmtype');
                        e
                            ? n.dealerDataList.set(e, {
                                  paltform: e,
                                  gmtype: s,
                                  photoExt: i,
                                  subFolder: r
                              })
                            : n.dealerDataList.set(s, {
                                  paltform: e,
                                  gmtype: s,
                                  photoExt: i,
                                  subFolder: r
                              });
                    }, this);
            }),
            (e.prototype.getFullPath = function(t, e, i) {
                var r = null;
                r =
                    e && this.dealerDataList.has(e)
                        ? this.dealerDataList.get(e)
                        : i && this.dealerDataList.has(i)
                            ? this.dealerDataList.get(i)
                            : this.dealerDataList.get('DEFAULT');
                var s =
                    '' == r.subFolder
                        ? [this.domain, t + '.' + r.photoExt]
                        : [this.domain, r.subFolder, t + '.' + r.photoExt];
                return s.join('/');
            }),
            e
        );
    })(Core.Config.CachedConfigBase);
    (t.DealerConfig = e), __reflect(e.prototype, 'VideoGameCore.DealerConfig');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            Object.defineProperty(e, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.init = function() {
                return this.initInstance(this);
            }),
            Object.defineProperty(e.prototype, 'id', {
                get: function() {
                    return 'live_anchors';
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.prototype.parseXmlObj = function(t) {
                var i = this;
                Core.XMLReader.read(t)
                    .find('domain')
                    .forEach(function(t) {
                        (i.imageURL = t.attr('url')),
                            (i.infoURL = t.attr('infoUrl')),
                            (i.website = t.attr('website')),
                            (i.width = t.attr('width')),
                            (i.height = t.attr('height'));
                    }, this),
                    Core.XMLReader.read(t)
                        .find('video_bg')
                        .forEach(function(t) {
                            var e = t.attr('url');
                            (i.videoBgURLEn = e + t.attr('en')),
                                (i.videoBgURLHant = e + t.attr('hant')),
                                (i.videoBgURLHans = e + t.attr('hans'));
                        }, this),
                    Core.XMLReader.read(t)
                        .find('banner')
                        .forEach(function(t) {
                            var e = t.attr('url');
                            (i.bannerURLEn = e + t.attr('en')),
                                (i.bannerURLHant = e + t.attr('hant')),
                                (i.bannerURLHans = e + t.attr('hans'));
                        }, this),
                    Core.XMLReader.read(t)
                        .find('gallery')
                        .forEach(function(t) {
                            i.gallery = t.text.split(',');
                        }, this),
                    (this.anchorInfoMap = new Core.HashMap()),
                    (this.anchorInfoList = []),
                    Core.XMLReader.read(t)
                        .find('anchor')
                        .forEach(function(t) {
                            var e = new r.LiveAnchorInfo();
                            (e.username = t.attr('name')),
                                (e.nameEn = t.attr('name')),
                                (e.nameHans = t.attr('nameZH')),
                                (e.nameHant = t.attr('nameTR')),
                                (e.name = {
                                    en: e.nameEn,
                                    hant: e.nameHant,
                                    hans: e.nameHans
                                }),
                                (e.priority =
                                    '' !== t.attr('priority')
                                        ? parseInt(t.attr('priority'))
                                        : 0),
                                (e.thumbnail_small =
                                    i.imageURL + e.username + '_s.jpg'),
                                (e.thumbnail_large =
                                    i.imageURL + e.username + '_l.jpg'),
                                (e.infoURL =
                                    i.infoURL +
                                    '?dealername=' +
                                    e.username +
                                    '&platform=DSP'),
                                i.anchorInfoMap.set(e.username, e),
                                i.anchorInfoList.push(e);
                        }, this);
            }),
            (e.prototype.findById = function(t) {
                return this.anchorInfoMap.has(t)
                    ? this.anchorInfoMap.get(t)
                    : null;
            }),
            (e.prototype.fetchAll = function() {
                return this.anchorInfoList;
            }),
            (e.prototype.getAnchorNameInLang = function(t, e) {
                var i = this.findById(t);
                if (!i) return t;
                switch (e) {
                    case Core.LANG_HANS:
                        return i.nameHans;
                    case Core.LANG_HANT:
                        return i.nameHant;
                    case Core.LANG_EN:
                    default:
                        return i.nameEn;
                }
            }),
            e
        );
    })(Core.Config.CachedConfigBase);
    (r.LiveAnchorConfig = t),
        __reflect(t.prototype, 'VideoGameCore.LiveAnchorConfig');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    (t.LIVE_REGION_PH = 'PH'), (t.LIVE_REGION_TW = 'TW');
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            Object.defineProperty(e, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.init = function() {
                return this.initInstance(this);
            }),
            Object.defineProperty(e.prototype, 'id', {
                get: function() {
                    return 'live_rooms';
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.prototype.parseXmlObj = function(t) {
                var i = this;
                (this.roomsMap = new Core.HashMap()),
                    Core.XMLReader.read(t)
                        .find('environment')
                        .forEach(function(t) {
                            t.attr('name') === Core.ExternalData.env &&
                                t.find('room').forEach(function(t) {
                                    var e = {
                                        roomID: t.attr('id')
                                            ? parseInt(t.attr('id'))
                                            : null,
                                        vid: t.attr('vid') ? t.attr('vid') : ''
                                    };
                                    (e.region = t.hasAttr('region')
                                        ? t.attr('region')
                                        : 'TW'),
                                        i.roomsMap.set(e.roomID, e);
                                }, i);
                        }, this);
            }),
            e
        );
    })(Core.Config.CachedConfigBase);
    (t.LiveRoomConfig = e),
        __reflect(e.prototype, 'VideoGameCore.LiveRoomConfig');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            Object.defineProperty(e, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.init = function() {
                return this.initInstance(this);
            }),
            Object.defineProperty(e.prototype, 'id', {
                get: function() {
                    return 'ad';
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.prototype.parseXmlObj = function(t) {
                var e = Core.XMLReader.read(t).find('lobbyBanner')[0],
                    i = ('/index.html' == location.pathname
                        ? '/'
                        : location.pathname,
                    this.getAdDefaultPath());
                (this.lobbyBannerConfig = {
                    refreshTime: e.intAttr('refreshTime'),
                    splitLiveCam: e.listAttr('splitLiveCam'),
                    path: e.attr('path', i)
                }),
                    (this.adConfigList = []);
                for (var r = e.find('bx'), s = 0; s < r.length; s++) {
                    for (
                        var n = r[s],
                            o = n.find('banner'),
                            a = new Core.HashMap(),
                            h = 0;
                        h < o.length;
                        h++
                    ) {
                        var u = o[h],
                            c = {
                                lang: u.attr('lang'),
                                images: u.attr('images'),
                                button: u.attr('button').split(' '),
                                buttonPos: u.attr('buttonPos').split(' '),
                                buttonURL: u.attr('buttonURL').split(' '),
                                buttonScale: u.attr('buttonScale')
                            };
                        a.set(c.lang, c);
                    }
                    var f = {
                        platformList: n.listAttr('plat'),
                        langMap: a,
                        showbannerId: n.attr('showbanner'),
                        hidePID: n.attr('hidePID').split(' '),
                        onlyPID: n.attr('onlyPID').split(' ')
                    };
                    this.adConfigList.push(f);
                }
            }),
            (e.prototype.getAdDefaultPath = function() {
                var t =
                    '/index.html' == location.pathname
                        ? '/'
                        : location.pathname;
                return (
                    location.protocol + '//' + location.host + t + 'images/ad/'
                );
            }),
            (e.prototype.getAdConfigListByPlatform = function(e) {
                return this.adConfigList.filter(function(t) {
                    return t.platformList.indexOf(e) >= 0;
                });
            }),
            e
        );
    })(Core.Config.CachedConfigBase);
    (t.PCAdConfig = e), __reflect(e.prototype, 'VideoGameCore.PCAdConfig');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(e) {
        function t() {
            var t = (null !== e && e.apply(this, arguments)) || this;
            return (t.useHWLogo = !1), t;
        }
        return (
            __extends(t, e),
            Object.defineProperty(t, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.init = function() {
                return this.initInstance(this);
            }),
            Object.defineProperty(t.prototype, 'id', {
                get: function() {
                    return 'PC_game_config';
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.parseXmlObj = function(t) {
                var s = this;
                Core.XMLReader.read(t)
                    .find('specialVids')
                    .forEach(function(t) {
                        s.specialVidsConfig = {
                            noComm: t.attr('noComm'),
                            dragonBonus: t.attr('dragonBonus'),
                            dragonBonusVIP: t.attr('dragonBonusVIP'),
                            superSix: t.attr('superSix'),
                            pairs: t.attr('pairs'),
                            priority: t.listAttr('priority'),
                            putLast: t.listAttr('putLast'),
                            miCards: t.attr('miCards'),
                            hide: t.listAttr('hide'),
                            specialTables: t.attr('specialTables'),
                            canToggleNoComm: t.boolAttr('canToggleNoComm', !1),
                            canToggleVipNoComm: t.boolAttr(
                                'canToggleVipNoComm',
                                !1
                            )
                        };
                    }, this),
                    Core.XMLReader.read(t)
                        .find('led')
                        .forEach(function(t) {
                            s.ledConfig = {
                                multiCurrency: t.boolAttr('multiCurrency', !1),
                                emptySeatSelector: t.boolAttr(
                                    'emptySeatSelector',
                                    !1
                                ),
                                canCutCards: t.boolAttr('canCutCards', !1),
                                debugTableLayout: t.boolAttr(
                                    'debugTableLayout',
                                    !1
                                ),
                                sideBetTipsEnable: t.boolAttr(
                                    'sideBetTipsEnable',
                                    !1
                                ),
                                newAngleVidList: t.listAttr('newAngle45'),
                                canJoin: t.boolAttr('canJoin', !1)
                            };
                        }, this),
                    Core.XMLReader.read(t)
                        .find('tipsConfig')
                        .forEach(function(t) {
                            s.tipsConfig = t.listAttr('gametypes');
                        }, this),
                    Core.XMLReader.read(t)
                        .find('newShowCard')
                        .forEach(function(t) {
                            s.showCard = t.boolAttr('enable', !1);
                        }, this),
                    Core.XMLReader.read(t)
                        .find('roadmap')
                        .forEach(function(t) {
                            s.showRoadMapNum = t.boolAttr('showNum', !1);
                        }, this),
                    Core.XMLReader.read(t)
                        .find('video')
                        .forEach(function(e) {
                            Core.XMLReader.read(t)
                                .find('videoSound')
                                .forEach(function(t) {
                                    s.videoConfig = {
                                        toggleControl: e.boolAttr('offBtn', !1),
                                        autoPlay: e.boolAttr('autoPlay', !1),
                                        sound: t.boolAttr('enable', !1)
                                    };
                                }, s);
                        }, this),
                    Core.XMLReader.read(t)
                        .find('statistics')
                        .forEach(function(t) {
                            s.statConfig = {
                                showBetPool: t.boolAttr('showBetPool', !1),
                                showRound: t.boolAttr('showRound', !1)
                            };
                        }, this),
                    Core.XMLReader.read(t)
                        .find('specialTables')
                        .forEach(function(t) {
                            s.specialTablesConfig = {
                                tablePosition: t.attr('tablePosition'),
                                showNotice: t.boolAttr('showNotice', !1),
                                hideTableSelector: t.boolAttr(
                                    'hideTableSelector',
                                    !1
                                )
                            };
                            var e = t.find('dealer');
                            s.dealerMap = new Core.HashMap();
                            for (var i = 0; i < e.length; i++) {
                                var r = e[i];
                                s.dealerMap.set(r.attr('en'), {
                                    en: r.attr('en'),
                                    hans: r.attr('zh'),
                                    hant: r.attr('tr')
                                });
                            }
                            t.find('bg').forEach(function(t) {
                                var e = t.attr('url');
                                (s.specialBgMap = new Core.HashMap()),
                                    s.specialBgMap.set(
                                        Core.LANG_EN,
                                        e + t.attr('en')
                                    ),
                                    s.specialBgMap.set(
                                        Core.LANG_HANT,
                                        e + t.attr('hant')
                                    ),
                                    s.specialBgMap.set(
                                        Core.LANG_HANS,
                                        e + t.attr('hans')
                                    );
                            }, s),
                                t.find('platformName').forEach(function(t) {
                                    (s.specialNameMap = new Core.HashMap()),
                                        s.specialNameMap.set(
                                            Core.LANG_EN,
                                            t.attr('en')
                                        ),
                                        s.specialNameMap.set(
                                            Core.LANG_HANT,
                                            t.attr('hant')
                                        ),
                                        s.specialNameMap.set(
                                            Core.LANG_HANS,
                                            t.attr('hans')
                                        );
                                }, s),
                                t.find('link').forEach(function(t) {
                                    s.specialLinkConfig = {
                                        fontsize: t.intAttr('fontsize', 14),
                                        textEn: t.attr('en'),
                                        textHans: t.attr('zh'),
                                        textHant: t.attr('tr'),
                                        url: t.attr('url'),
                                        position: t.attr('linkPosition')
                                    };
                                }, s);
                        }, this),
                    Core.XMLReader.read(t)
                        .find('goodRoute')
                        .forEach(function(e) {
                            e.find('disable').forEach(function(t) {
                                s.goodRoadConfig = {
                                    enable: e.boolAttr('enable', !1),
                                    theme: e.attr('theme'),
                                    pullback: e.intAttr('pullback'),
                                    checkGameType: e.attr('checkGameType'),
                                    showGameType: e.listAttr('showGameType'),
                                    plat: e.listAttr('plat'),
                                    hideVids: e.listAttr('hideVids'),
                                    disableSuffix: t.listAttr('suffix', ',')
                                };
                            }, s);
                        }, this),
                    Core.XMLReader.read(t)
                        .find('followDealer')
                        .forEach(function(t) {
                            s.followDealerConfig = {
                                enable: t.boolAttr('enable', !1),
                                normalDealer: t.intAttr('normalDealer'),
                                webUrl: t.attr('webUrl'),
                                xmlPath: t.attr('xmlPath'),
                                gameType: t.attr('gameType'),
                                platform: t.attr('platform'),
                                hideVids: t.attr('hideVids')
                            };
                        }, this),
                    Core.XMLReader.read(t)
                        .find('YoPlay')
                        .forEach(function(t) {
                            s.yoPlayConfig = { webUrl: t.attr('webUrl') };
                        }, this);
            }),
            (t.prototype.hasDragonBonus = function() {
                return !!this.specialVidsConfig.dragonBonus;
            }),
            (t.prototype.hasPairs = function() {
                return !!this.specialVidsConfig.pairs;
            }),
            (t.prototype.checkDragonBonus = function(t) {
                if (t) {
                    if ('*' === this.specialVidsConfig.dragonBonus) return !0;
                    var e = this.specialVidsConfig.dragonBonus.split(' ');
                    return -1 != e.indexOf(t);
                }
                return !1;
            }),
            (t.prototype.checkSuperSix = function(t) {
                if (t) {
                    if ('*' === this.specialVidsConfig.superSix) return !0;
                    var e = this.specialVidsConfig.superSix.split(' ');
                    return -1 != e.indexOf(t);
                }
                return !1;
            }),
            (t.prototype.checkPairs = function(t) {
                if (t) {
                    if ('*' === this.specialVidsConfig.pairs) return !0;
                    var e = this.specialVidsConfig.pairs.split(' ');
                    return -1 != e.indexOf(t);
                }
                return !1;
            }),
            (t.prototype.isSpecialTable = function(t) {
                return this.specialVidsConfig.specialTables.indexOf(t) >= 0;
            }),
            (t.prototype.checkNoCommToggleSwitch = function() {
                return this.specialVidsConfig.canToggleNoComm;
            }),
            (t.prototype.checkNoCommToggleVipSwitch = function() {
                return this.specialVidsConfig.canToggleVipNoComm;
            }),
            (t.prototype.checkCanReserve = function() {
                return (
                    dclib(
                        'SMO:canReserve ' +
                            i.PCPlazaConfig.instance.vipConfig.canReserve
                    ),
                    i.PCPlazaConfig.instance.vipConfig.canReserve
                );
            }),
            (t.prototype.checkCanJoin = function() {
                return (
                    dclib(
                        'SMO:canJoin ' +
                            i.PCPlazaConfig.instance.vipConfig.canJoin
                    ),
                    i.PCPlazaConfig.instance.vipConfig.canJoin
                );
            }),
            (t.prototype.checkCanSideBet = function() {
                return (
                    dclib(
                        'SMO:canSideBet ' +
                            i.PCPlazaConfig.instance.vipConfig.canSideBet
                    ),
                    i.PCPlazaConfig.instance.vipConfig.canSideBet
                );
            }),
            (t.prototype.checkCanLeaveAfterBet = function() {
                return (
                    dclib(
                        'SMO:canLeaveAfterBet ' +
                            i.PCPlazaConfig.instance.vipConfig.canLeaveAfterBet
                    ),
                    i.PCPlazaConfig.instance.vipConfig.canLeaveAfterBet
                );
            }),
            (t.prototype.goodRoadEnable = function(t) {
                if (!this.goodRoadConfig.enable)
                    return this.goodRoadConfig.enable;
                for (
                    var e = '', i = !1, r = 0;
                    r < this.goodRoadConfig.disableSuffix.length;
                    r++
                )
                    if (
                        ((e = this.goodRoadConfig.disableSuffix[r]),
                        (i = -1 !== t.indexOf(e, t.length - e.length)))
                    )
                        return !1;
                return !0;
            }),
            (t.prototype.goodRoadGameTypeCheck = function(t) {
                return t === this.goodRoadConfig.checkGameType;
            }),
            (t.prototype.goodRoadGameTypeShow = function() {
                return this.goodRoadConfig.showGameType;
            }),
            (t.prototype.goodRoadPlat = function() {
                return this.goodRoadConfig.plat;
            }),
            (t.prototype.goodRoadHideVids = function(t) {
                var e = this;
                return t.filter(function(t) {
                    return e.goodRoadConfig.hideVids.indexOf(t) > -1;
                });
            }),
            t
        );
    })(Core.Config.CachedConfigBase);
    (i.PCGameConfig = t), __reflect(t.prototype, 'VideoGameCore.PCGameConfig');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(e) {
        function t() {
            var t = (null !== e && e.apply(this, arguments)) || this;
            return (
                (t.navList = []),
                (t.newList = []),
                (t.invertColorLangList = []),
                (t.hideNoticeList = []),
                (t.liveCameraVideo = []),
                (t.canQuit = !1),
                (t.canChangePwd = !1),
                (t.canChat = !1),
                (t.isKiosk = !1),
                (t.lowCreditNotice = !1),
                (t.showInfoCurrency = !0),
                (t.showInGameInfoCurrency = !0),
                (t.isEgameSpecial = !1),
                (t.maintenanceHM = new Core.HashMap()),
                (t.showTtlPpl = !1),
                (t.showFullScreenIcon = !0),
                t
            );
        }
        return (
            __extends(t, e),
            Object.defineProperty(t, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.init = function() {
                return this.initInstance(this);
            }),
            Object.defineProperty(t.prototype, 'id', {
                get: function() {
                    return 'PC_plaza_config';
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.parseXmlObj = function(t) {
                var n = this;
                Core.XMLReader.read(t)
                    .find('AMS')
                    .forEach(function(t) {
                        (n.navList = t.listAttr('availPlatform')),
                            (n.newList = t.listAttr('newIcon')),
                            (n.canQuit = t.boolAttr('canQuit', !1)),
                            (n.canChangePwd = t.boolAttr('canChangePwd', !1)),
                            (n.canChat = t.boolAttr('canChat', !1)),
                            (n.showInfoCurrency = t.boolAttr(
                                'showInfoCurrency',
                                !0
                            )),
                            (n.showInGameInfoCurrency = t.boolAttr(
                                'showInGameInfoCurrency',
                                !0
                            )),
                            (n.vipConfig = {
                                canReserve: t.boolAttr('canReserve', !1),
                                canJoin: t.boolAttr('canJoin', !1),
                                canSideBet: t.boolAttr('canSideBet', !1),
                                canLeaveAfterBet: t.boolAttr(
                                    'canLeaveAfterBet',
                                    !1
                                )
                            });
                    }, this),
                    Core.XMLReader.read(t)
                        .find('availServices')
                        .forEach(function(t) {
                            n.services = {
                                deposit: t.boolAttr('deposit', !1),
                                cs: t.boolAttr('cs', !1),
                                record: t.boolAttr('record', !1),
                                rules: t.boolAttr('rules', !1),
                                password: t.boolAttr('password', !1)
                            };
                        }, this),
                    Core.XMLReader.read(t)
                        .find('mobile')
                        .forEach(function(t) {
                            n.mobileConfig = {
                                enable: t.intAttr('enable', 0),
                                android: t.intAttr('android', 0),
                                appLink: t.attr('appLink'),
                                useVoiceQRCode: t.boolAttr(
                                    'useVoiceQRCode',
                                    !1
                                ),
                                trialVoiceEnable: t.boolAttr(
                                    'trialVoiceEnable',
                                    !1
                                ),
                                voiceNoticeEnable: t.boolAttr(
                                    'voiceNoticeEnable',
                                    !1
                                ),
                                voiceLink: t.attr('voiceLink')
                            };
                            var e = t.find('sv');
                            n.mobileSvMap = new Core.HashMap();
                            for (var i = 0; i < e.length; i++) {
                                var r = e[i],
                                    s = {
                                        id: r.attr('id'),
                                        sv: r.attr('sv'),
                                        num: r.attr('num'),
                                        QRCode: r.attr('QRCode'),
                                        wapLink: r.attr('wapLink'),
                                        path: r.attr('path')
                                    };
                                n.mobileSvMap.set(s.id, s);
                            }
                        }, this),
                    Core.XMLReader.read(t)
                        .find('kiosk')
                        .forEach(function(t) {
                            n.isKiosk = t.boolAttr('enable', !1);
                        }, this),
                    Core.XMLReader.read(t)
                        .find('slotGameNameUrl')
                        .forEach(function(t) {
                            n.slotGameNameUrl = t.attr('address');
                        }, this),
                    Core.XMLReader.read(t)
                        .find('hunterRecordUrl')
                        .forEach(function(t) {
                            n.hunterRecordUrl = t.attr('address');
                        }, this),
                    Core.XMLReader.read(t)
                        .find('maintenance')
                        .forEach(function(t) {
                            var e = t.attr('path');
                            t.find('item').forEach(function(t) {
                                n.maintenanceHM.set(t.attr('name'), {
                                    img: e + '/' + t.attr('img')
                                });
                            }, n);
                        }, this),
                    Core.XMLReader.read(t)
                        .find('invertWinLoseColors')
                        .forEach(function(t) {
                            n.invertColorLangList = t.listAttr('lang');
                        }, this),
                    Core.XMLReader.read(t)
                        .find('lowCreditNotice')
                        .forEach(function(t) {
                            n.lowCreditNotice = t.boolAttr('enable', !1);
                        }, this),
                    Core.XMLReader.read(t)
                        .find('notice')
                        .forEach(function(t) {
                            n.hideNoticeList = t.listAttr('hidePlat');
                        }, this),
                    Core.XMLReader.read(t)
                        .find('map')
                        .forEach(function(e) {
                            e.find('mapDetail').forEach(function(t) {
                                n.mapConfig = {
                                    enable: e.boolAttr('enable', !1),
                                    platform: t.listAttr('platform'),
                                    tel: t.attr('tel'),
                                    address: t.attr('address')
                                };
                            }, n);
                        }, this),
                    Core.XMLReader.read(t)
                        .find('topBar')
                        .forEach(function(t) {
                            n.topBarConfig = {
                                enable: t.boolAttr('enable', !1),
                                style: t.attr('style'),
                                currency: t.attr('currency')
                            };
                        }, this),
                    Core.XMLReader.read(t)
                        .find('liveCameraVideo')
                        .forEach(function(t) {
                            t.getChildren().forEach(function(t, e) {
                                n.liveCameraVideo.push(e + '');
                            }, n);
                        }, this),
                    Core.XMLReader.read(t)
                        .find('eGames')
                        .forEach(function(t) {
                            n.isEgameSpecial = t.boolAttr('specialMode', !1);
                        }),
                    Core.XMLReader.read(t)
                        .find('showTtlPpl')
                        .forEach(function(t) {
                            n.showTtlPpl = t.boolAttr('enable', !1);
                        }, this),
                    Core.XMLReader.read(t)
                        .find('showFullScreenIcon')
                        .forEach(function(t) {
                            n.showFullScreenIcon = t.boolAttr('enable', !0);
                        }, this);
            }),
            (t.prototype.hasGameType = function(t) {
                return this.navList.indexOf(t) >= 0;
            }),
            (t.prototype.getGameType = function(t) {
                switch (t) {
                    case i.CONFIG_LIVE:
                        return i.GAME_LIVE;
                    case i.CONFIG_SPORT:
                        return i.GAME_SPORT;
                    case i.CONFIG_FISH:
                        return i.GAME_FISH;
                    case i.CONFIG_EGAMES:
                        return i.GAME_EGAMES;
                    case i.CONFIG_YOPLAY:
                        return i.GAME_YOPLAY;
                }
                return t;
            }),
            t
        );
    })(Core.Config.CachedConfigBase);
    (i.PCPlazaConfig = t),
        __reflect(t.prototype, 'VideoGameCore.PCPlazaConfig');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(n) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            Object.defineProperty(e, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.init = function() {
                return this.initInstance(this);
            }),
            (e.prototype.getRoomInfoByPlatform = function(t) {
                return this.roomInfoVidMap.getItemByProperty('platformtype', t);
            }),
            (e.prototype.getRoomInfoByVid = function(t) {
                return this.roomInfoVidMap.get(t);
            }),
            (e.prototype.getAllRoomInfo = function() {
                return this.roomInfoVidMap.values;
            }),
            (e.prototype.getAllRoomInfoByFilter = function(t) {
                var e = [];
                if (t.gameType)
                    for (
                        var i = 0;
                        i < this.roomInfoVidMap.values.length;
                        i++
                    ) {
                        var r = this.roomInfoVidMap.values[i];
                        t.gameType.indexOf(r.gmtype) > -1 && e.push(r);
                    }
                return e;
            }),
            (e.prototype.getFirstRoomInfo = function(t, e) {
                for (
                    var i = null,
                        r = this.roomInfoVidMap.getItemByProperty(
                            'platformtype',
                            t
                        ),
                        s = 0;
                    s < r.length;
                    s++
                )
                    if (r[s].gmtype == e) {
                        i = r[s];
                        break;
                    }
                return i;
            }),
            Object.defineProperty(e.prototype, 'id', {
                get: function() {
                    return 'room_config';
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.prototype.parseXmlObj = function(t) {
                var s = this;
                (this.roomInfoVidMap = new Core.ArrayMap()),
                    Core.XMLReader.read(t)
                        .find('roominfo')
                        .forEach(function(t) {
                            var e = new n.RoomInfo();
                            (e.vid = t.attr('vid')),
                                (e.gmtype = t.attr('gmtype')),
                                (e.platformtype = t.attr('platformtype'));
                            var i = t.listAttr('roomname', ';');
                            if (i.length >= 3) {
                                e.nameMap = new Core.HashMap();
                                for (var r = 0; r < i.length; r++)
                                    -1 != i[r].indexOf(':') &&
                                        e.nameMap.set(
                                            i[r].split(':')[0],
                                            i[r].split(':')[1]
                                        );
                                e.nameMap.get(Core.LANG_HANS) ||
                                    console.error(
                                        'RoomInfoConfig wrong lang key : vid=' +
                                            e.vid
                                    );
                            }
                            s.roomInfoVidMap.set(e.vid, e);
                        }, this);
            }),
            e
        );
    })(Core.Config.CachedConfigBase);
    (n.RoomConfig = t), __reflect(t.prototype, 'VideoGameCore.RoomConfig');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function() {
        function t() {}
        return (
            Object.defineProperty(t.prototype, 'roomname', {
                get: function() {
                    var t = Core.LocalizeStore.instance.lang;
                    return this.nameMap.has(t)
                        ? this.nameMap.get(t)
                        : this.nameMap.get(Core.LANG_BACKUP);
                },
                enumerable: !0,
                configurable: !0
            }),
            t
        );
    })();
    (t.RoomInfo = e), __reflect(e.prototype, 'VideoGameCore.RoomInfo');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(o) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            Object.defineProperty(e, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.init = function() {
                return this.initInstance(this);
            }),
            (e.prototype.getSlotGameInfoByGameType = function(t) {
                return this.slotGameInfoMap
                    ? this.slotGameInfoMap.get(t)
                    : null;
            }),
            (e.prototype.getSlotGameNameByGameType = function(t) {
                return this.slotGameInfoMap && this.slotGameInfoMap.get(t)
                    ? this.slotGameInfoMap.get(t).slotGameName
                    : null;
            }),
            (e.prototype.getFormat = function(t) {
                var e = '0';
                return (
                    this.slotGameInfoMap &&
                        this.slotGameInfoMap.get(t) &&
                        this.slotGameInfoMap.get(t).formatType &&
                        (e = this.slotGameInfoMap.get(t).formatType),
                    e
                );
            }),
            Object.defineProperty(e.prototype, 'id', {
                get: function() {
                    return 'slot_game_config';
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(e.prototype, 'urls', {
                get: function() {
                    var t = [o.PCPlazaConfig.instance.slotGameNameUrl];
                    return t;
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.prototype.parseXmlObj = function(t) {
                var n = this;
                (this.slotGameInfoMap = new Core.ArrayMap()),
                    Core.XMLReader.read(t)
                        .find('row')
                        .forEach(function(t) {
                            var e = new o.SlotGameInfo();
                            (e.brand = t.attr('brand')),
                                (e.gameid = t.attr('gameid')),
                                (e.gametype = t.attr('gametype')),
                                (e.tableGameFlag = parseInt(
                                    t.attr('TABLEGAMEFLAG')
                                )),
                                null != t.attr('cus_remark_format') &&
                                    (e.formatType = t.attr(
                                        'cus_remark_format'
                                    )),
                                'EP03' == e.gametype && dclib(e),
                                (e.nameMap = new Core.HashMap());
                            var i = t.attr('LANG_CNS');
                            0 != i.length && e.nameMap.set('hans', i);
                            var r = t.attr('LANG_CNR');
                            0 != r.length && e.nameMap.set('hant', r);
                            var s = t.attr('LANG_ENGLISH');
                            0 != s.length && e.nameMap.set('en', s),
                                n.slotGameInfoMap.set(e.gametype, e);
                        }, this);
            }),
            e
        );
    })(Core.AGWorker.ConfigBase);
    (o.SlotGameConfig = t),
        __reflect(t.prototype, 'VideoGameCore.SlotGameConfig');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function() {
        function t() {}
        return (
            Object.defineProperty(t.prototype, 'slotGameName', {
                get: function() {
                    var t = Core.LocalizeStore.instance.lang;
                    return this.nameMap.has(t)
                        ? this.nameMap.get(t)
                        : this.nameMap.get(Core.LANG_BACKUP);
                },
                enumerable: !0,
                configurable: !0
            }),
            t
        );
    })();
    (t.SlotGameInfo = e), __reflect(e.prototype, 'VideoGameCore.SlotGameInfo');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(e) {
        function t() {
            var t = (null !== e && e.apply(this, arguments)) || this;
            return (t.averageDelay = i.TIMEOUT.PAYOUT), t;
        }
        return (
            __extends(t, e),
            Object.defineProperty(t, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.init = function() {
                return this.initInstance(this);
            }),
            Object.defineProperty(t.prototype, 'id', {
                get: function() {
                    return Core.ExternalData.videoCryptoEnabled
                        ? 'stream_config_crypto'
                        : 'stream_config';
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.parseXmlObj = function(t) {
                var e = this;
                (this.lineMap = new Core.HashMap()),
                    (this.angleMap = new Core.HashMap()),
                    Core.XMLReader.read(t)
                        .find('stream')
                        .forEach(this._parseStream$, this),
                    Core.XMLReader.read(t)
                        .find('delay')
                        .forEach(function(t) {
                            e.averageDelay = t.intAttr('averageDelay');
                        }, this);
            }),
            (t.prototype._parseStream$ = function(t) {
                var i = [],
                    e = t.attr('vid'),
                    r = t.attr('orientation'),
                    s = t.boolAttr('hasAudio', !0),
                    n = t.attr('angle', null);
                t.find('line').forEach(function(t) {
                    var e = {};
                    t.attr('ws') && (e.ws = t.attr('ws')),
                        t.attr('icon') && (e.icon = t.attr('icon')),
                        t.attr('flash') && (e.flash = t.attr('flash')),
                        t.attr('url') && (e.url = t.attr('url')),
                        t.attr('rtmp') && (e.rtmp = t.attr('rtmp')),
                        (e.hasAudio = s),
                        i.push(e);
                }, this);
                var o = this.getKey(e, r);
                if ((this.lineMap.set(o, i), n && '' != n)) {
                    var a = this.angleMap.get(n);
                    a || ((a = []), this.angleMap.set(n, a)),
                        -1 === a.indexOf(e) && a.push(e);
                }
            }),
            (t.prototype.getKey = function(t, e) {
                return t + '_' + e;
            }),
            (t.prototype.getNumberOfLine = function(t) {
                var e = this.getStreamLineList(t);
                return e ? e.length : 0;
            }),
            (t.prototype.getStreamLine = function(t, e) {
                void 0 === e && (e = 0);
                var i = this.getStreamLineList(t);
                return i && 0 != i.length
                    ? e >= 0 && e < i.length
                        ? i[e]
                        : i[0]
                    : null;
            }),
            (t.prototype.getStreamLineList = function(t) {
                var e = this.lineMap,
                    i = e.has(t) ? e.get(t).slice() : null;
                return i;
            }),
            (t.prototype.getAverageDelay = function() {
                return this.averageDelay;
            }),
            (t.prototype.getIsEuroAngle = function(t) {
                var e = this.angleMap.get('euro');
                return e && -1 !== e.indexOf(t);
            }),
            t
        );
    })(Core.Config.CachedConfigBase);
    (i.StreamConfig = t), __reflect(t.prototype, 'VideoGameCore.StreamConfig');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            Object.defineProperty(e, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.init = function() {
                return this.initInstance(this);
            }),
            Object.defineProperty(e.prototype, 'id', {
                get: function() {
                    return Core.ExternalData.videoCryptoEnabled
                        ? 'video_config_crypto'
                        : 'video_config';
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.prototype.parseXmlObj = function(t) {
                var r = this;
                (this.replayAddrMap = new Core.HashMap()),
                    (this.liveAddrMap = new Core.HashMap()),
                    Core.XMLReader.read(t)
                        .find('replay')[0]
                        .find('address')
                        .forEach(function(t) {
                            var e = t.attr('platform'),
                                i = {
                                    url: t.attr('address'),
                                    rtmp: t.attr('rtmp')
                                };
                            r.replayAddrMap.set(e, i);
                        }, this),
                    Core.XMLReader.read(t)
                        .find('liveCameraVideo')[0]
                        .find('address')
                        .forEach(function(t) {
                            var e = t.attr('platform'),
                                i = {
                                    url: t.attr('address'),
                                    rtmp: t.attr('rtmp')
                                };
                            r.liveAddrMap.set(e, i);
                        }, this);
            }),
            (e.prototype.getReplayAddress = function(t) {
                return this.replayAddrMap.has(t)
                    ? this.replayAddrMap.get(t)
                    : null;
            }),
            (e.prototype.getLiveAddress = function(t) {
                return this.liveAddrMap.has(t) ? this.liveAddrMap.get(t) : null;
            }),
            e
        );
    })(Core.Config.CachedConfigBase);
    (t.VideoConfig = e), __reflect(e.prototype, 'VideoGameCore.VideoConfig');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function() {
        function t() {}
        return t;
    })();
    (t.AnchorInfo = e), __reflect(e.prototype, 'VideoGameCore.AnchorInfo');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function() {
        function t() {}
        return t;
    })();
    (t.LiveAnchorInfo = e),
        __reflect(e.prototype, 'VideoGameCore.LiveAnchorInfo');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function() {
        function t() {}
        return t;
    })();
    (t.BetPoolInfo = e), __reflect(e.prototype, 'VideoGameCore.BetPoolInfo');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(o) {
    function t(t) {
        return Math.floor((t + 1) / 2);
    }
    function e(t) {
        return 2 * t - 1;
    }
    function i(t) {
        return t >= 1 && 14 >= t;
    }
    function r(t, e) {
        return (t & e) > 0;
    }
    function n(t, e) {
        void 0 === e && (e = !0);
        var i = o.BJ_RESULT_TYPE.NONE,
            r = a(t);
        return (i =
            r == o.BJ_POINT.BEST_HAND_POINT
                ? e && t.length <= 2
                    ? o.BJ_RESULT_TYPE.BLACKJACK
                    : o.BJ_RESULT_TYPE.BEST_HAND
                : r > o.BJ_POINT.BEST_HAND_POINT
                    ? o.BJ_RESULT_TYPE.BUST
                    : o.BJ_RESULT_TYPE.NORMAL);
    }
    function a(t, e) {
        void 0 === e && (e = !0);
        var i = 0;
        if (null != t) {
            var r,
                s,
                n = 0;
            for (r = 0; r < t.length; r++)
                (s = h(t[r])), 1 == s && n++, (i += s);
            e &&
                n > 0 &&
                i <= o.BJ_POINT.BEST_HAND_POINT - o.BJ_POINT.MAX_POINT_VALUE &&
                (i += o.BJ_POINT.MAX_POINT_VALUE);
        }
        return i;
    }
    function s(t, e) {
        void 0 === e && (e = !1);
        var i = a(t),
            r = String(i);
        if (e) {
            var s = a(t, !1);
            s != i &&
                n(t) != o.BJ_RESULT_TYPE.BLACKJACK &&
                (r = String(s) + '/' + r);
        }
        return r;
    }
    function h(t) {
        var e = 15 & t;
        return o.isValidCard(t) ? Math.min(e, o.BJ_POINT.MAX_POINT_VALUE) : 0;
    }
    var u = (function() {
        function t() {
            (this.handStatus = o.BJ_HAND_STATUS.NONE), this.setCardList();
        }
        return (
            (t.prototype.appandCard = function(t) {
                this.cardList.length >= 2 &&
                    this.cardList[1] <= 0 &&
                    o.removeValueFromArray(this.cardList, this.cardList[1]),
                    this.cardList.push(t);
            }),
            (t.prototype.setCardList = function(t) {
                void 0 === t && (t = []), (this.cardList = t);
            }),
            (t.prototype.getCardList = function() {
                return null != this.cardList ? this.cardList.slice() : [];
            }),
            t
        );
    })();
    (o.BjHandData = u),
        __reflect(u.prototype, 'VideoGameCore.BjHandData'),
        (o.getBJSeatNumByHandIndex = t),
        (o.getBJHandIndexBySeatNum = e),
        (o.isBJPlayerHandIndex = i),
        (o.isBJHandStatusHasCmd = r),
        (o.getBjCardsReuslt = n),
        (o.getBjCardsPoint = a),
        (o.getBjCardsPointStr = s),
        (o.getBjCardPointValue = h);
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function() {
        function t() {}
        return t;
    })();
    (t.PlaytypePayout = e),
        __reflect(e.prototype, 'VideoGameCore.PlaytypePayout');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(e) {
        function t() {
            return (null !== e && e.apply(this, arguments)) || this;
        }
        return (
            __extends(t, e),
            (t.prototype.copy = function(t) {
                e.prototype.copy.call(this, t),
                    (this.betSeatNum = t.betSeatNum);
            }),
            t
        );
    })(t.StakeData);
    (t.StakeDataBj = e), __reflect(e.prototype, 'VideoGameCore.StakeDataBj');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(e) {
        function t() {
            var t = (null !== e && e.apply(this, arguments)) || this;
            return (t.nums = []), t;
        }
        return (
            __extends(t, e),
            (t.prototype.copy = function(t) {
                e.prototype.copy.call(this, t), (this.nums = t.nums.slice());
            }),
            t
        );
    })(t.StakeData);
    (t.StakeDataRou = e), __reflect(e.prototype, 'VideoGameCore.StakeDataRou');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t = (function(i) {
        function t() {
            return (null !== i && i.apply(this, arguments)) || this;
        }
        return (
            __extends(t, i),
            (t.prototype.setAmount = function(t, e) {
                return (
                    t === r.PLAYTYPE_BANKER_NO_COMMISSION &&
                        (t = r.PLAYTYPE_BANKER),
                    i.prototype.setAmount.call(this, t, e)
                );
            }),
            (t.prototype.getAmount = function(t) {
                return (
                    t === r.PLAYTYPE_BANKER_NO_COMMISSION &&
                        (t = r.PLAYTYPE_BANKER),
                    i.prototype.getAmount.call(this, t)
                );
            }),
            t
        );
    })(r.StakePool);
    (r.StakePoolBac = t), __reflect(t.prototype, 'VideoGameCore.StakePoolBac');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(n) {
    var t = (function(t) {
        function s() {
            return t.call(this) || this;
        }
        return (
            __extends(s, t),
            (s.getPlayTypeStr = function(t, e) {
                return void 0 === e && (e = 0), t + '_' + e;
            }),
            (s.recoverPlayType = function(t) {
                return parseInt((t + '').split('_')[0]);
            }),
            (s.recoverBetSeatNum = function(t) {
                return parseInt((t + '').split('_')[1]);
            }),
            (s.prototype.removeAmount = function(t, e) {
                void 0 === e && (e = 0);
                var i = this.getStakeData(t, e);
                i && this.stakeDataMap['delete'](s.getPlayTypeStr(t, e));
            }),
            (s.prototype.setAmount = function(t, e, i) {
                void 0 === i && (i = 0);
                var r = this.getStakeData(t, i);
                return (
                    r ||
                        ((r = new n.StakeDataBj()),
                        (r.playType = t),
                        (r.betSeatNum = i),
                        this.stakeDataMap.set(s.getPlayTypeStr(t, i), r)),
                    (r.amount = e),
                    r
                );
            }),
            (s.prototype.getAmount = function(t, e) {
                void 0 === e && (e = 0);
                var i = this.getStakeData(t, e);
                return i ? i.amount : 0;
            }),
            (s.prototype.copy = function(t) {
                var e = this;
                return (
                    this.clear(),
                    t.stakeDataMap.forEach(function(t) {
                        e.setAmount(t.playType, t.amount, t.betSeatNum);
                    }, this),
                    this
                );
            }),
            (s.prototype.copyByPlayTypes = function(t, e) {
                var i = this;
                return (
                    void 0 === e && (e = null),
                    this.clear(),
                    t.stakeDataMap.forEach(function(t) {
                        e.indexOf(t.playType) > -1 &&
                            i.setAmount(t.playType, t.amount);
                    }, this),
                    this
                );
            }),
            (s.prototype.calculateDiff = function(t) {
                var e = new s().copy(this);
                return (
                    t.stakeDataMap.forEach(function(t) {
                        e.setAmount(
                            t.playType,
                            e.getAmount(t.playType, t.betSeatNum) - t.amount,
                            t.betSeatNum
                        );
                    }, this),
                    e
                );
            }),
            (s.prototype.getStakeData = function(t, e) {
                void 0 === e && (e = 0);
                var i = s.getPlayTypeStr(t, e),
                    r = this.stakeDataMap.get(i);
                return r;
            }),
            s
        );
    })(n.StakePool);
    (n.StakePoolBj = t), __reflect(t.prototype, 'VideoGameCore.StakePoolBj');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t = (function(t) {
        function i() {
            return t.call(this) || this;
        }
        return (
            __extends(i, t),
            Object.defineProperty(i.prototype, 'allAmount', {
                get: function() {
                    var r = 0;
                    return (
                        this.stakeDataMap.forEach(function(t) {
                            var e = t.amount,
                                i = t.playType;
                            [
                                s.PLAYTYPE_NN_PLAYER_1_DOUBLE,
                                s.PLAYTYPE_NN_PLAYER_2_DOUBLE,
                                s.PLAYTYPE_NN_PLAYER_3_DOUBLE,
                                s.PLAYTYPE_NN_BANKER_1_DOUBLE,
                                s.PLAYTYPE_NN_BANKER_2_DOUBLE,
                                s.PLAYTYPE_NN_BANKER_3_DOUBLE
                            ].indexOf(i) > -1 && (e = 5 * e),
                                (r += e);
                        }, this),
                        r
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            (i.prototype.calculateDiff = function(t) {
                var e = new i().copy(this);
                return (
                    t.getAllStakeData().forEach(function(t) {
                        e.setAmount(
                            t.playType,
                            e.getAmount(t.playType) - t.amount
                        );
                    }, this),
                    e
                );
            }),
            i
        );
    })(s.StakePool);
    (s.StakePoolBull = t),
        __reflect(t.prototype, 'VideoGameCore.StakePoolBull');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(n) {
    var t = (function(t) {
        function s() {
            return t.call(this) || this;
        }
        return (
            __extends(s, t),
            (s.getRouPlayType = function(t, e) {
                return (
                    void 0 === e && (e = []),
                    !e || e.length <= 0
                        ? t
                        : t + '-' + (e.length > 0 ? e.join('_') : '')
                );
            }),
            (s.recoverPlayType = function(t) {
                return parseInt((t + '').split('-')[0]);
            }),
            (s.prototype.setAmount = function(t, e, i) {
                void 0 === i && (i = []);
                var r = this.getStakeData(t, i);
                return (
                    r ||
                        ((r = new n.StakeDataRou()),
                        (r.playType = t),
                        (r.nums = i ? i.slice() : []),
                        this.stakeDataMap.set(s.getRouPlayType(t, i), r)),
                    (r.amount = e),
                    r
                );
            }),
            (s.prototype.getAmount = function(t, e) {
                void 0 === e && (e = []);
                var i = this.getStakeData(t, e);
                return i ? i.amount : 0;
            }),
            (s.prototype.copy = function(t) {
                var e = this;
                return (
                    this.clear(),
                    t.stakeDataMap.forEach(function(t) {
                        e.setAmount(t.playType, t.amount, t.nums);
                    }, this),
                    this
                );
            }),
            (s.prototype.calculateDiff = function(t) {
                var e = new s().copy(this);
                return (
                    t.stakeDataMap.forEach(function(t) {
                        e.setAmount(
                            t.playType,
                            e.getAmount(t.playType, t.nums) - t.amount,
                            t.nums
                        );
                    }, this),
                    e
                );
            }),
            (s.prototype.getStakeData = function(t, e) {
                void 0 === e && (e = []);
                var i = s.getRouPlayType(t, e),
                    r = this.stakeDataMap.get(i);
                return r;
            }),
            (s.prototype.getStakeDataListBySeq = function(t) {
                var e = this.stakeDataMap.getItemByProperty('seq', t);
                return e.length > 0 ? e : null;
            }),
            s
        );
    })(n.StakePool);
    (n.StakePoolRou = t), __reflect(t.prototype, 'VideoGameCore.StakePoolRou');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(n) {
    var t = (function(s) {
        function t(t) {
            void 0 === t && (t = 8);
            var e = s.call(this) || this;
            (e.maxSeatNum = t), (e.playerPoolMap = new Core.HashMap());
            for (var i, r = 0; t > r; r++)
                (i = new n.StakePoolBj()), e.playerPoolMap.set(r + 1, i);
            return e;
        }
        return (
            __extends(t, s),
            (t.prototype.getPlayerPool = function(t) {
                return this.isTableSeatNum(t)
                    ? this.playerPoolMap.get(t)
                    : null;
            }),
            (t.prototype.addBetToPool = function(t, e, i, r, s, n) {
                void 0 === s && (s = !0), void 0 === n && (n = 0);
                var o = this.getPlayerPool(t);
                null !== o
                    ? ((o.currency = r),
                      s && (i += o.getAmount(e, n)),
                      o.setAmount(e, i, n))
                    : console.error('Seat ' + t + ' does not exist');
            }),
            (t.prototype.removeBetFromPool = function(t, e, i) {
                void 0 === i && (i = 0);
                var r = this.getPlayerPool(t);
                null !== r
                    ? r.removeAmount(e, i)
                    : console.error('Seat ' + t + ' does not exist');
            }),
            (t.prototype.getAmount = function(t, e, i) {
                void 0 === i && (i = 0);
                var r = this.getPlayerPool(t);
                return null !== r ? r.getAmount(e, i) : 0;
            }),
            t
        );
    })(n.TablePool);
    (n.TablePoolBj = t), __reflect(t.prototype, 'VideoGameCore.TablePoolBj');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(e) {
    function t(t) {
        return t > 0 && t <= e.MAX_TABLE_SEAT;
    }
    function i(t) {
        return this.isValidSeatNum(t) ? String(t >= 4 ? t + 1 : t) : '-';
    }
    function r(t) {
        return this.isValidSeatNum(t) ? t : 8;
    }
    var s = (function() {
        function t(t) {
            (this.loginname = ''),
                (this.nickname = ''),
                (this.tableCode = ''),
                (this.currency = ''),
                (this.seat = 0),
                (this.credit = 0),
                (this.action = 0),
                (this.sex = 0),
                (this.vid = ''),
                (this.loginname = t);
        }
        return t;
    })();
    (e.TableSeatPlayer = s),
        __reflect(s.prototype, 'VideoGameCore.TableSeatPlayer'),
        (e.isValidSeatNum = t),
        (e.getValidSeatNumStr = i),
        (e.getBJValidSeatNum = r);
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(h) {
    var t = (function() {
        function t() {
            this.clear();
        }
        return (
            (t.prototype.addBetToPool = function(t, e, i, r, s, n, o) {
                void 0 === n && (n = null),
                    void 0 === o && (o = !0),
                    i == h.PLAYTYPE_BANKER_NO_COMMISSION &&
                        (i = h.PLAYTYPE_BANKER);
                var a = this.getPlayerPool(t);
                null == a && (a = new h.StakePoolRou()),
                    (a.currency = s),
                    o && (r += a.getAmount(i, n)),
                    a.setAmount(i, r, n),
                    a.setLoginName(t),
                    a.setNickname(e),
                    this.playerPoolMap.set(t, a);
            }),
            (t.prototype.getPlayerPool = function(t) {
                return '' != t ? this.playerPoolMap.get(t) : null;
            }),
            (t.prototype.getTotalAmount = function(e, i) {
                void 0 === i && (i = null);
                var r = 0;
                return (
                    this.playerPoolMap.forEach(function(t) {
                        r += t.getAmount(e, i);
                    }, this),
                    r
                );
            }),
            (t.prototype.getTotalPlayerNum = function(e, i) {
                void 0 === i && (i = null);
                var r = 0;
                return (
                    this.playerPoolMap.forEach(function(t) {
                        t.getAmount(e, i) > 0 && r++;
                    }, this),
                    r
                );
            }),
            (t.prototype.getBetPoolInfos = function(i, r) {
                void 0 === r && (r = null);
                var s = [];
                return (
                    this.playerPoolMap.forEach(function(t) {
                        var e = new h.BetPoolInfo();
                        (e.loginname = t.loginname),
                            (e.nickname = t.nickname),
                            (e.playType = i),
                            (e.nums = r),
                            (e.amount = t.getAmount(i, r)),
                            (e.currency = t.currency),
                            s.push(e);
                    }, this),
                    s
                );
            }),
            (t.prototype.clear = function() {
                this.playerPoolMap &&
                    this.playerPoolMap.forEach(function(t) {
                        t.clear();
                    }, this),
                    (this.playerPoolMap = new Core.HashMap());
            }),
            t
        );
    })();
    (h.VideoPool = t), __reflect(t.prototype, 'VideoGameCore.VideoPool');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(e) {
    var t = (function() {
        function t(t) {
            this.cardType = t;
        }
        return (
            Object.defineProperty(t.prototype, 'cardTypeStr', {
                get: function() {
                    switch (this.cardType) {
                        case e.ZJH_CARD_TYPE.NONE:
                            return e.ZJH_CARD_TYPE_STRING.NONE;
                        case e.ZJH_CARD_TYPE.TwoThreeFive:
                            return e.ZJH_CARD_TYPE_STRING.TwoThreeFive;
                        case e.ZJH_CARD_TYPE.HighCard_5:
                            return e.ZJH_CARD_TYPE_STRING.HighCard_5;
                        case e.ZJH_CARD_TYPE.HighCard_6:
                            return e.ZJH_CARD_TYPE_STRING.HighCard_6;
                        case e.ZJH_CARD_TYPE.HighCard_7:
                            return e.ZJH_CARD_TYPE_STRING.HighCard_7;
                        case e.ZJH_CARD_TYPE.HighCard_8:
                            return e.ZJH_CARD_TYPE_STRING.HighCard_8;
                        case e.ZJH_CARD_TYPE.HighCard_9:
                            return e.ZJH_CARD_TYPE_STRING.HighCard_9;
                        case e.ZJH_CARD_TYPE.HighCard_10:
                            return e.ZJH_CARD_TYPE_STRING.HighCard_10;
                        case e.ZJH_CARD_TYPE.HighCard_J:
                            return e.ZJH_CARD_TYPE_STRING.HighCard_J;
                        case e.ZJH_CARD_TYPE.HighCard_Q:
                            return e.ZJH_CARD_TYPE_STRING.HighCard_Q;
                        case e.ZJH_CARD_TYPE.HighCard_K:
                            return e.ZJH_CARD_TYPE_STRING.HighCard_K;
                        case e.ZJH_CARD_TYPE.HighCard_A:
                            return e.ZJH_CARD_TYPE_STRING.HighCard_A;
                        case e.ZJH_CARD_TYPE.Pair_2:
                            return e.ZJH_CARD_TYPE_STRING.Pair_2;
                        case e.ZJH_CARD_TYPE.Pair_3:
                            return e.ZJH_CARD_TYPE_STRING.Pair_3;
                        case e.ZJH_CARD_TYPE.Pair_4:
                            return e.ZJH_CARD_TYPE_STRING.Pair_4;
                        case e.ZJH_CARD_TYPE.Pair_5:
                            return e.ZJH_CARD_TYPE_STRING.Pair_5;
                        case e.ZJH_CARD_TYPE.Pair_6:
                            return e.ZJH_CARD_TYPE_STRING.Pair_6;
                        case e.ZJH_CARD_TYPE.Pair_7:
                            return e.ZJH_CARD_TYPE_STRING.Pair_7;
                        case e.ZJH_CARD_TYPE.Pair_8:
                            return e.ZJH_CARD_TYPE_STRING.Pair_8;
                        case e.ZJH_CARD_TYPE.Pair_9:
                            return e.ZJH_CARD_TYPE_STRING.Pair_9;
                        case e.ZJH_CARD_TYPE.Pair_10:
                            return e.ZJH_CARD_TYPE_STRING.Pair_10;
                        case e.ZJH_CARD_TYPE.Pair_J:
                            return e.ZJH_CARD_TYPE_STRING.Pair_J;
                        case e.ZJH_CARD_TYPE.Pair_Q:
                            return e.ZJH_CARD_TYPE_STRING.Pair_Q;
                        case e.ZJH_CARD_TYPE.Pair_K:
                            return e.ZJH_CARD_TYPE_STRING.Pair_K;
                        case e.ZJH_CARD_TYPE.Pair_A:
                            return e.ZJH_CARD_TYPE_STRING.Pair_A;
                        case e.ZJH_CARD_TYPE.Straight:
                            return e.ZJH_CARD_TYPE_STRING.Straight;
                        case e.ZJH_CARD_TYPE.Flush:
                            return e.ZJH_CARD_TYPE_STRING.Flush;
                        case e.ZJH_CARD_TYPE.StraightFlush:
                            return e.ZJH_CARD_TYPE_STRING.StraightFlush;
                        case e.ZJH_CARD_TYPE.ThreeOfAKind:
                            return e.ZJH_CARD_TYPE_STRING.ThreeOfAKind;
                    }
                },
                enumerable: !0,
                configurable: !0
            }),
            t
        );
    })();
    (e.ZjhCardTypeData = t),
        __reflect(t.prototype, 'VideoGameCore.ZjhCardTypeData');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(e) {
    var t = (function() {
        function t(t) {
            (this.amount = 0),
                (this.seq = -1),
                (this.pending = !1),
                (this.success = !1),
                (this.result = t);
        }
        return (
            Object.defineProperty(t.prototype, 'winPlayTypes', {
                get: function() {
                    var t = [];
                    return (
                        (1 & this.result) >> 0 === 1 &&
                            t.push(e.PLAYTYPE_ZJH_DRAGON),
                        (2 & this.result) >> 1 === 1 &&
                            t.push(e.PLAYTYPE_ZJH_PHOENIX),
                        (4 & this.result) >> 2 === 1 &&
                            t.push(e.PLAYTYPE_ZJH_PAIR_8_PLUS),
                        (8 & this.result) >> 3 === 1 &&
                            t.push(e.PLAYTYPE_ZJH_FLUSH),
                        (16 & this.result) >> 4 === 1 &&
                            t.push(e.PLAYTYPE_ZJH_STRAIGHT),
                        (32 & this.result) >> 5 === 1 &&
                            t.push(e.PLAYTYPE_ZJH_THREE_OF_A_KIND),
                        (64 & this.result) >> 6 === 1 &&
                            t.push(e.PLAYTYPE_ZJH_STRAIGHT_FLUSH),
                        t
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(t.prototype, 'bead', {
                get: function() {
                    var t = new e.RoadPaper.BeadData();
                    return (
                        (1 & this.result) >> 0 === 1
                            ? (t.winType = e.RoadPaper.WinType.BLUE_WIN)
                            : (2 & this.result) >> 1 === 1
                                ? (t.winType = e.RoadPaper.WinType.RED_WIN)
                                : (t.winType = e.RoadPaper.WinType.TIE),
                        t
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            t
        );
    })();
    (e.ZjhResultData = t),
        __reflect(t.prototype, 'VideoGameCore.ZjhResultData');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function() {
            function t(t, e) {
                (this.width = t),
                    (this.height = e),
                    (this.firstMask = this.initShape()),
                    (this.secondMask = this.initShape()),
                    (this.endPointMap = new Core.HashMap()),
                    this.endPointMap.set(o.LEFT, new n(0, 0)),
                    this.endPointMap.set(o.DOWN, new n(this.width, 0)),
                    this.endPointMap.set(
                        o.RIGHT,
                        new n(this.width, this.height)
                    ),
                    this.endPointMap.set(o.UP, new n(0, this.height));
            }
            return (
                (t.prototype.initShape = function() {
                    var t = new egret.Shape();
                    return (t.width = this.width), (t.height = this.height), t;
                }),
                (t.prototype.updateMask = function(t, e) {
                    var i = this.calculateCrossoverList(t, e);
                    2 == i.length &&
                        (this.drawMaskP2P(i[0], i[1], this.firstMask),
                        this.drawMaskP2P(i[1], i[0], this.secondMask));
                }),
                (t.prototype.drawMaskP2P = function(t, e, i) {
                    var r = t.border;
                    i.graphics.clear(),
                        i.graphics.beginFill(16711680),
                        i.graphics.moveTo(t.x, t.y);
                    for (var s; r != e.border; )
                        (s = this.endPointMap.get(r)),
                            i.graphics.lineTo(s.x, s.y),
                            (r = (r + 1) % 4);
                    i.graphics.lineTo(e.x, e.y),
                        i.graphics.lineTo(t.x, t.y),
                        i.graphics.endFill();
                }),
                (t.prototype.calculateCrossoverList = function(t, e) {
                    var r = this,
                        s = [];
                    if (null === t)
                        s =
                            e > 0 && e < this.width
                                ? [new n(e, 0), new n(e, this.height)]
                                : [new n(0, 0), new n(0, this.height)];
                    else {
                        var i = [];
                        i.push(new n(0, e)),
                            i.push(new n(-e / t, 0)),
                            i.push(new n(this.width, t * this.width + e)),
                            i.push(new n((this.height - e) / t, this.height)),
                            i.forEach(function(e) {
                                if (
                                    0 <= e.x &&
                                    e.x <= r.width &&
                                    0 <= e.y &&
                                    e.y <= r.height
                                ) {
                                    var i = !1;
                                    s.forEach(function(t) {
                                        i = t.isEqualTo(e);
                                    }),
                                        i || s.push(e);
                                }
                            });
                    }
                    return (
                        s.forEach(function(t) {
                            0 == t.x && 0 < t.y && t.y <= r.height
                                ? (t.border = o.LEFT)
                                : 0 == t.y && 0 <= t.x && t.x < r.width
                                    ? (t.border = o.DOWN)
                                    : t.x == r.width &&
                                      0 <= t.y &&
                                      t.y < r.height
                                        ? (t.border = o.RIGHT)
                                        : t.y == r.height &&
                                          0 < t.x &&
                                          t.x <= r.width &&
                                          (t.border = o.UP);
                        }),
                        s
                    );
                }),
                t
            );
        })();
        (t.MaskMaker = e),
            __reflect(e.prototype, 'VideoGameCore.MiPai.MaskMaker');
        var n = (function() {
            function t(t, e) {
                (this.x = t), (this.y = e);
            }
            return (
                (t.prototype.isEqualTo = function(t) {
                    return this.x == t.x && this.y == t.y;
                }),
                t
            );
        })();
        (t.Point = n), __reflect(n.prototype, 'VideoGameCore.MiPai.Point');
        var o;
        !(function(t) {
            (t[(t.LEFT = 0)] = 'LEFT'),
                (t[(t.DOWN = 1)] = 'DOWN'),
                (t[(t.RIGHT = 2)] = 'RIGHT'),
                (t[(t.UP = 3)] = 'UP');
        })((o = t.Border || (t.Border = {})));
    })((e = t.MiPai || (t.MiPai = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(l) {
    function t(t, e) {
        var i = Core.startCMD(l.CLIENT_LOGIN_PLAZA);
        return (
            i.writeBytes(Core.stringToBytes(t, Core.la)),
            i.writeDouble(e[0]),
            i.writeDouble(e[1]),
            Core.endCMD(i)
        );
    }
    function e(t, e, i, r, s) {
        void 0 === t && (t = 1), void 0 === e && (e = 1);
        var n = Core.startCMD(l.GET_WALLET_SESSION);
        return (
            n.writeByte(t),
            n.writeByte(e),
            n.writeBytes(Core.stringToBytes(i, Core.la)),
            n.writeBytes(Core.stringToBytes(r, Core.bn)),
            n.writeBytes(Core.stringToBytes(s, 32)),
            Core.endCMD(n)
        );
    }
    function i(t) {
        var e = Core.startCMD(l.GET_PLAYER_BALANCE);
        return e.writeBytes(Core.stringToBytes(t, Core.la)), Core.endCMD(e);
    }
    function r() {
        return Core.getSimpleCMD(l.GET_USER_POINT);
    }
    function s() {
        var t = Core.startCMD(l.GET_ALL_CHIP_SET);
        return t.writeInt(10), t.writeInt(10), Core.endCMD(t);
    }
    function n(t) {
        var e = Core.startCMD(l.SET_FAV_CHIP_SET);
        return (
            e.writeBytes(Core.stringToBytes(t.gametype, Core.bn + 1)),
            e.writeBytes(Core.stringToBytes(t.chips.join(','), 100)),
            Core.endCMD(e)
        );
    }
    function o(t, e, i, r, s, n, o, a, h) {
        void 0 === i && (i = ''),
            void 0 === r && (r = ''),
            void 0 === s && (s = 1),
            void 0 === n && (n = 20),
            void 0 === o && (o = ''),
            void 0 === a && (a = ''),
            void 0 === h && (h = '');
        var u = Core.startCMD(l.GET_CREDIT_RECORDS);
        return (
            u.writeBytes(Core.stringToBytes(t, 10)),
            u.writeBytes(Core.stringToBytes(e, Core.la)),
            u.writeBytes(Core.stringToBytes(i, 19)),
            u.writeBytes(Core.stringToBytes(r, 19)),
            u.writeBytes(Core.stringToBytes(o, 16)),
            u.writeBytes(Core.stringToBytes(a, 20)),
            u.writeBytes(Core.stringToBytes(h, 30)),
            u.writeShort(n),
            u.writeShort(s),
            Core.endCMD(u)
        );
    }
    function a(t, e, i, r, s, n, o) {
        var a = Core.startCMD(l.GET_USER_POINT_RECORDS);
        return (
            a.writeBytes(Core.stringToBytes(t, Core.dh)),
            a.writeBytes(Core.stringToBytes(e, Core.dh)),
            a.writeBytes(Core.stringToBytes(i, Core.la)),
            a.writeBytes(Core.stringToBytes(r, 20)),
            a.writeBytes(Core.stringToBytes(s, 20)),
            a.writeUnsignedShort(n),
            a.writeUnsignedShort(o),
            Core.endCMD(a)
        );
    }
    function h(t, e, i, r, s, n, o, a, h, u) {
        void 0 === i && (i = ''),
            void 0 === r && (r = ''),
            void 0 === n && (n = 20),
            void 0 === o && (o = ''),
            void 0 === a && (a = ''),
            void 0 === h && (h = ''),
            void 0 === u && (u = '');
        var c = Core.startCMD(l.GET_SLOTGAME_RECORDS);
        return (
            c.writeBytes(Core.stringToBytes(t, 10)),
            c.writeBytes(Core.stringToBytes(e, 30)),
            c.writeBytes(Core.stringToBytes(i, 19)),
            c.writeBytes(Core.stringToBytes(r, 19)),
            c.writeBytes(Core.stringToBytes(a, 4)),
            c.writeBytes(Core.stringToBytes(o, 16)),
            c.writeBytes(Core.stringToBytes(h, 10)),
            c.writeBytes(Core.stringToBytes(u, 30)),
            c.writeShort(n),
            c.writeShort(s),
            Core.endCMD(c)
        );
    }
    function u(t) {
        var e = Core.startCMD(l.GET_PLATFORMTYPE);
        return e.writeBytes(Core.stringToBytes(t, 20)), Core.endCMD(e);
    }
    function c(t) {
        var e = Core.startCMD(l.GET_PLAYTYPE);
        return e.writeBytes(Core.stringToBytes(t, 20)), Core.endCMD(e);
    }
    function f(t) {
        var e = Core.startCMD(l.GET_TRANSTYPE);
        return e.writeBytes(Core.stringToBytes(t, 20)), Core.endCMD(e);
    }
    function C(t, e, i, r, s, n, o, a, h, u, c) {
        void 0 === i && (i = ''),
            void 0 === r && (r = ''),
            void 0 === s && (s = 1),
            void 0 === n && (n = 20),
            void 0 === o && (o = ''),
            void 0 === a && (a = ''),
            void 0 === h && (h = ''),
            void 0 === u && (u = ''),
            void 0 === c && (c = '');
        var f = Core.startCMD(l.GET_BET_RECORDS);
        return (
            f.writeBytes(Core.stringToBytes(t, 10)),
            f.writeBytes(Core.stringToBytes(e, Core.la)),
            f.writeBytes(Core.stringToBytes(i, 19)),
            f.writeBytes(Core.stringToBytes(r, 19)),
            f.writeBytes(Core.stringToBytes(o, 14)),
            f.writeBytes(Core.stringToBytes(a, 4)),
            f.writeBytes(Core.stringToBytes(h, 16)),
            f.writeBytes(Core.stringToBytes(u, 10)),
            f.writeBytes(Core.stringToBytes(c, 30)),
            f.writeShort(n),
            f.writeShort(s),
            Core.endCMD(f)
        );
    }
    function m(t) {
        var e = Core.startCMD(l.GET_ALL_BAC_RESULTS);
        return e.writeBytes(Core.stringToBytes(t, Core._n)), Core.endCMD(e);
    }
    function d(t, e, i, r, s, n, o, a, h, u, c) {
        void 0 === i && (i = ''),
            void 0 === r && (r = ''),
            void 0 === s && (s = 1),
            void 0 === n && (n = 20),
            void 0 === o && (o = ''),
            void 0 === a && (a = ''),
            void 0 === h && (h = ''),
            void 0 === u && (u = ''),
            void 0 === c && (c = '');
        var f = Core.startCMD(l.GET_ALL_PLATFORM_RECORDS);
        return (
            f.writeBytes(Core.stringToBytes(t, 10)),
            f.writeBytes(Core.stringToBytes(e, Core.la)),
            f.writeBytes(Core.stringToBytes(i, 19)),
            f.writeBytes(Core.stringToBytes(r, 19)),
            f.writeBytes(Core.stringToBytes(o, 14)),
            f.writeBytes(Core.stringToBytes(a, 4)),
            f.writeBytes(Core.stringToBytes(h, 16)),
            f.writeBytes(Core.stringToBytes(u, 10)),
            f.writeBytes(Core.stringToBytes(c, 30)),
            f.writeShort(n),
            f.writeShort(s),
            Core.endCMD(f)
        );
    }
    function v(t, e, i) {
        void 0 === i && (i = Core.gn);
        var r = Core.startCMD(l.CLIENT_LOGIN_GAME_PC, i);
        return (
            r.writeBytes(Core.stringToBytes(t, Core.la)),
            r.writeDouble(e[0]),
            r.writeDouble(e[1]),
            Core.endCMD(r)
        );
    }
    function G(t, e, i, r) {
        void 0 === r && (r = Core.gn);
        var s = Core.startCMD(l.CLIENT_LOGIN_GAME_EXT, r);
        return (
            s.writeBytes(Core.stringToBytes(t, Core._n)),
            s.writeBytes(Core.stringToBytes(e, Core.la)),
            s.writeByte(5),
            s.writeByte(0),
            s.writeByte(0),
            s.writeDouble(i[0]),
            s.writeDouble(i[1]),
            Core.endCMD(s)
        );
    }
    function _() {
        return Core.getSimpleCMD(l.GET_GAME_CURRENT_STATUS);
    }
    function b(t, e, i, r, s) {
        void 0 === r && (r = Core.gn), void 0 === s && (s = 5);
        var n = Core.startCMD(l.ZJH_LOGIN_GAME, r);
        return (
            n.writeBytes(Core.stringToBytes(t, Core._n)),
            n.writeBytes(Core.stringToBytes(e, Core.la)),
            n.writeByte(s),
            n.writeDouble(i[0]),
            n.writeDouble(i[1]),
            Core.endCMD(n)
        );
    }
    function P() {
        return Core.getSimpleCMD(l.ZJH_LOGOUT);
    }
    function V(t, e, i, r) {
        void 0 === i && (i = 1);
        var s = Core.startCMD(l.ZJH_BET, r);
        s.writeBytes(Core.stringToBytes(t, Core.Pn)), s.writeByte(e.length);
        for (var n, o = 0; o < e.length; o++)
            (n = e[o]),
                s.writeUnsignedInt(n.seq),
                s.writeUnsignedShort(n.playType),
                s.writeUnsignedInt(n.amount * i),
                s.writeUnsignedShort(i),
                s.writeUnsignedInt(0);
        return Core.endCMD(s);
    }
    function g(t, e, i) {
        void 0 === i && (i = null);
        var r = Core.startCMD(l.VIP_AUTO_ENTER_TABLE);
        r.writeBytes(Core.stringToBytes(t, Core._n)),
            r.writeByte(e),
            r.writeByte(0);
        var s = i ? i : '';
        return (
            r.writeByte('' != s ? 1 : 0),
            r.writeBytes(Core.stringToBytes(s, Core.ku)),
            Core.endCMD(r)
        );
    }
    function p(t) {
        var e = Core.startCMD(l.VIP_LEAVE_TABLE);
        return e.writeBytes(Core.stringToBytes(t, Core._n)), Core.endCMD(e);
    }
    function k(t) {
        var e = Core.startCMD(l.VIP_START_GAME);
        return e.writeBytes(Core.stringToBytes(t, Core._n)), Core.endCMD(e);
    }
    function w(t, e) {
        var i = Core.startCMD(l.VIP_DISPATCH_CARD);
        return (
            i.writeBytes(Core.stringToBytes(t, Core._n)),
            i.writeBytes(Core.stringToBytes(e, Core.Pn)),
            Core.endCMD(i)
        );
    }
    function z(t) {
        var e = Core.startCMD(l.VIP_CHANGE_SHOE);
        return e.writeBytes(Core.stringToBytes(t, Core._n)), Core.endCMD(e);
    }
    function S(t, e) {
        var i = Core.startCMD(l.VIP_CHANGE_DEALER);
        return (
            i.writeBytes(Core.stringToBytes(t, Core._n)),
            i.writeBytes(Core.stringToBytes(e, Core.Vu)),
            Core.endCMD(i)
        );
    }
    function y(t, e, i) {
        var r = Core.startCMD(l.VIP_MOUSE_MI_CARD_EX);
        return (
            r.writeBytes(Core.stringToBytes(t, Core._n)),
            r.writeByte(e),
            r.writeByte(i.length),
            i.forEach(function(t) {
                r.writeFloat(t.x),
                    r.writeFloat(t.y),
                    r.writeFloat(t.baseX),
                    r.writeFloat(t.baseY),
                    r.writeByte(t.rot1),
                    r.writeByte(t.rot2);
            }, this),
            Core.endCMD(r)
        );
    }
    function E(t, e, i, r) {
        var s = Core.startCMD(l.VIP_BAC_SET_INFO);
        return (
            s.writeBytes(Core.stringToBytes(t, Core._n)),
            s.writeBoolean(e),
            s.writeByte(1),
            s.writeBoolean(i),
            s.writeByte(0),
            s.writeBoolean(r),
            Core.endCMD(s)
        );
    }
    function T(t, e) {
        var i = Core.startCMD(l.VIP_SET_PASSWORD);
        i.writeBytes(Core.stringToBytes(t, Core._n));
        var r = e ? e : '';
        return (
            i.writeByte('' != r ? 1 : 0),
            i.writeBytes(Core.stringToBytes(r, Core.ku)),
            Core.endCMD(i)
        );
    }
    function x(t) {
        var e = Core.startCMD(l.AUTO_ENTER_TABLE);
        return e.writeBytes(Core.stringToBytes(t, Core._n)), Core.endCMD(e);
    }
    function O(t, e, i, r, s) {
        void 0 === s && (s = '');
        var n = Core.startCMD(l.GAME_BET_EXT, r),
            o = l.getCurrencyBetExtRatio(s);
        return (
            n.writeBytes(Core.stringToBytes(t, Core.Pn)),
            n.writeShort(e),
            n.writeUnsignedInt(i * o),
            n.writeUnsignedInt(o),
            Core.endCMD(n)
        );
    }
    function I(t, e, i, r) {
        var s = Core.startCMD(l.GAME_BET, r);
        return (
            s.writeBytes(Core.stringToBytes(t, Core.Pn)),
            s.writeByte(e),
            s.writeInt(i),
            Core.endCMD(s)
        );
    }
    function R() {
        return Core.getSimpleCMD(l.GAME_TABLE_EXIT);
    }
    function L() {
        return Core.getSimpleCMD(l.ENTER_MULTI_TABLE);
    }
    function j(t) {
        var e = Core.startCMD(l.GET_MULTI_CURRENT_STATUS);
        e.writeInt(4);
        for (var i = 0; 4 > i; i++)
            e.writeBytes(Core.stringToBytes(t[i % t.length], Core._n));
        return Core.endCMD(e);
    }
    function B(t, e, i, r, s) {
        var n = Core.startCMD(l.MULTI_TABLE_BET, s);
        return (
            n.writeBytes(Core.stringToBytes(t, Core._n)),
            n.writeBytes(Core.stringToBytes(e, 14)),
            n.writeByte(i),
            n.writeInt(r),
            Core.endCMD(n)
        );
    }
    function A() {
        return Core.getSimpleCMD(l.MULTI_TABLE_EXIT);
    }
    function N() {
        var t = Core.startCMD(l.CLIENT_DISCONN);
        return t.writeDouble(0), t.writeDouble(0), Core.endCMD(t);
    }
    function M(t, e, i, r, s) {
        void 0 === s && (s = Core.gn);
        var n = Core.startCMD(l.GET_GAME_POOL, s);
        return (
            n.writeBytes(Core.stringToBytes(t, Core._n)),
            n.writeByte(e),
            n.writeShort(i),
            n.writeShort(r),
            Core.endCMD(n)
        );
    }
    function D(t, e, i) {
        void 0 === i && (i = Core.gn);
        var r = Core.startCMD(l.MULTITABLE_CLIENT_LOGIN_GAME, i);
        return (
            r.writeBytes(Core.stringToBytes(t, Core.la)),
            r.writeDouble(e[0]),
            r.writeDouble(e[1]),
            r.writeByte(3),
            Core.endCMD(r)
        );
    }
    function H() {
        return Core.getSimpleCMD(l.ROAD_ENTER);
    }
    function U(t) {
        void 0 === t && (t = 0);
        var e = Core.startCMD(l.ROAD_ENTER_LINK);
        return e.writeInt(t), Core.endCMD(e);
    }
    function F() {
        var t = Core.startCMD(l.ROAD_PLAYER_ATTRIBUTE);
        return t.writeInt(1), Core.endCMD(t);
    }
    function K(t) {
        var e = Core.startCMD(l.ROAD_SELECT_VIDEOS);
        e.writeInt(t.length);
        for (var i = 0; i < t.length; i++) e.writeUTFBytes(t[i]);
        return Core.endCMD(e);
    }
    function Z(t, e, i, r, s) {
        var n = Core.startCMD(l.MULTITABLE_ROAD_BET, s);
        return (
            n.writeBytes(Core.stringToBytes(t, Core._n)),
            n.writeBytes(Core.stringToBytes(e, 14)),
            n.writeByte(i),
            n.writeInt(r),
            Core.endCMD(n)
        );
    }
    function Y(t, e, i, r, s) {
        var n = Core.startCMD(l.MULTI_TABLE_BET_EXT, s),
            o = l.getCurrencyBetExtRatio();
        return (
            n.writeBytes(Core.stringToBytes(t, Core._n)),
            n.writeBytes(Core.stringToBytes(e, 14)),
            n.writeShort(i),
            n.writeUnsignedInt(r * o),
            n.writeUnsignedInt(o),
            Core.endCMD(n)
        );
    }
    function q(t, e, i, r, s) {
        var n = Core.startCMD(l.ROAD_BET_EXT, s),
            o = l.getCurrencyBetExtRatio();
        return (
            n.writeBytes(Core.stringToBytes(t, Core._n)),
            n.writeBytes(Core.stringToBytes(e, 14)),
            n.writeByte(i),
            n.writeInt(r * o),
            n.writeInt(o),
            Core.endCMD(n)
        );
    }
    function J(t, e, i) {
        var r = Core.startCMD(l.GAME_BET, i);
        r.writeBytes(Core.stringToBytes(t, Core.Pn)), r.writeInt(e.length);
        var s, n, o, a;
        for (o = 0; o < e.length; o++) {
            for (
                n = e[o],
                    r.writeByte(n.playType),
                    r.writeInt(n.amount),
                    s = new egret.ByteArray(),
                    s.length = 12,
                    a = 0;
                a < s.length;
                a++
            )
                s.writeByte(a < n.nums.length ? n.nums[a] : -1);
            r.writeBytes(s);
        }
        return Core.endCMD(r);
    }
    function W(t, e, i) {
        var r = Core.startCMD(l.GAME_BET_EXT, i);
        r.writeBytes(Core.stringToBytes(t, Core.Pn)), r.writeInt(e.length);
        var s, n, o, a;
        for (o = 0; o < e.length; o++) {
            for (
                n = e[o],
                    r.writeByte(n.playType),
                    r.writeUnsignedInt(n.amount * l.getCurrencyBetExtRatio()),
                    s = new egret.ByteArray(),
                    s.length = 12,
                    a = 0;
                a < s.length;
                a++
            )
                s.writeByte(a < n.nums.length ? n.nums[a] : -1);
            r.writeBytes(s),
                r.writeUnsignedInt(l.getCurrencyBetExtRatio()),
                (n.pending = !0),
                (n.seq = i);
        }
        return Core.endCMD(r);
    }
    function Q(t, e, i, r) {
        var s = Core.startCMD(l.MULTI_TABLE_ROU_BET_EXT, r);
        s.writeBytes(Core.stringToBytes(t, Core._n)),
            s.writeBytes(Core.stringToBytes(e, 14));
        var n,
            o,
            a,
            h,
            u = i.length,
            c = 0,
            f = l.getCurrencyBetExtRatio();
        for (a = 0; u > a; a++) (o = i[a]), o.pending || o.amount <= 0 || c++;
        for (s.writeInt(c), a = 0; u > a; a++)
            if (((o = i[a]), !(o.pending || o.amount <= 0))) {
                s.writeByte(o.playType),
                    s.writeUnsignedInt(o.amount * f),
                    s.writeUnsignedInt(f),
                    null == n ? (n = new egret.ByteArray()) : n.clear();
                var C = o.playType == l.PLAYTYPE_ROU_DIRECT ? [0] : [];
                for (o.nums = C, h = 0; 12 > h; h++)
                    n.writeByte(h < o.nums.length ? o.nums[h] : -1);
                s.writeBytes(n), (o.pending = !0), (o.seq = r);
            }
        return Core.endCMD(s);
    }
    function X(t, e, i) {
        void 0 === i && (i = 0);
        var r = Core.startCMD(l.GAME_BET_CANCEL, i);
        return (
            r.writeBytes(Core.stringToBytes(t, Core._n)),
            r.writeBytes(Core.stringToBytes(e, 14)),
            Core.endCMD(r)
        );
    }
    function $(t, e, i) {
        void 0 === i && (i = 0);
        var r = Core.startCMD(l.BJ_GAME_BET_CANCEL, i);
        return (
            r.writeBytes(Core.stringToBytes(t, Core._n)),
            r.writeBytes(Core.stringToBytes(e, 14)),
            Core.endCMD(r)
        );
    }
    function tt(t, e, i, r) {
        var s = Core.startCMD(l.ROU_BET_BATCH, r);
        s.writeBytes(Core.stringToBytes(t, Core._n)),
            s.writeBytes(Core.stringToBytes(e, Core.Pn)),
            s.writeUnsignedInt(r),
            s.writeUnsignedInt(l.getCurrencyBetExtRatio()),
            s.writeUnsignedInt(i.length);
        var n, o, a, h;
        for (a = 0; a < i.length; a++) {
            for (
                o = i[a],
                    s.writeUnsignedInt(a),
                    s.writeUnsignedShort(o.playType),
                    n = new egret.ByteArray(),
                    n.length = 12,
                    h = 0;
                h < n.length;
                h++
            )
                n.writeByte(h < o.nums.length ? o.nums[h] : -1);
            s.writeBytes(n), s.writeUnsignedInt(o.amount);
        }
        return Core.endCMD(s);
    }
    function et(t, e) {
        var i = Core.startCMD(l.ROU_BET_UNDO);
        return (
            i.writeBytes(Core.stringToBytes(t, Core._n)),
            i.writeBytes(Core.stringToBytes(e, Core.Pn)),
            Core.endCMD(i)
        );
    }
    function it(t, e, i, r, s) {
        var n = Core.startCMD(l.EXECUTE_CMD);
        return (
            n.writeBytes(Core.stringToBytes(e, Core._n)),
            n.writeBytes(Core.stringToBytes(i, Core.Pn)),
            n.writeBytes(Core.stringToBytes(t, Core.la)),
            n.writeInt(r),
            n.writeByte(s),
            Core.endCMD(n)
        );
    }
    function rt(t, e, i, r) {
        var s = Core.startCMD(l.VIP_SHOW_CARD);
        return (
            s.writeBytes(Core.stringToBytes(t, Core._n)),
            s.writeBytes(Core.stringToBytes(e, Core.Pn)),
            s.writeByte(i),
            s.writeByte(r),
            Core.endCMD(s)
        );
    }
    function st(t, e, i, r) {
        var s = Core.startCMD(l.TURNCARD_MOUSE_MI_CARD_MOBILE);
        return (
            s.writeBytes(Core.stringToBytes(t, Core._n)),
            s.writeByte(e),
            s.writeByte(i),
            s.writeByte(r.length),
            r.forEach(function(t) {
                s.writeFloat(t.x),
                    s.writeFloat(t.y),
                    s.writeFloat(t.baseX),
                    s.writeFloat(t.baseY),
                    s.writeByte(t.rot1),
                    s.writeByte(t.rot2);
            }, this),
            Core.endCMD(s)
        );
    }
    function nt(t, e, i, r, s, n, o, a) {
        var h = Core.startCMD(l.PRE_BET);
        return (
            h.writeBytes(Core.stringToBytes(t, Core._n)),
            h.writeBytes(Core.stringToBytes(e, 14)),
            h.writeBytes(Core.stringToBytes(i, Core.la)),
            h.writeDouble(r),
            h.writeByte(s),
            h.writeShort(n),
            h.writeShort(o),
            h.writeInt(a),
            Core.endCMD(h)
        );
    }
    function ot(t, e) {
        var i = Core.startCMD(l.FEE_FOR_DEALER);
        return (
            i.writeBytes(Core.stringToBytes(t, Core._n)),
            i.writeDouble(e),
            Core.endCMD(i)
        );
    }
    function at(t, e, i, r, s) {
        void 0 === i && (i = ''),
            void 0 === r && (r = ''),
            void 0 === s && (s = Core.gn);
        var n = Core.startCMD(l.DEALER_TIPS_HIST, s);
        return (
            n.writeBytes(Core.stringToBytes(t, Core._n)),
            n.writeBytes(Core.stringToBytes(e, Core.la)),
            n.writeBytes(Core.stringToBytes(i, 8)),
            n.writeBytes(Core.stringToBytes(r, 8)),
            Core.endCMD(n)
        );
    }
    function ht(t, e, i, r) {
        var s = Core.startCMD(l.CUT_SHOE_CONFIRMED);
        return (
            s.writeBytes(Core.stringToBytes(t, Core._n)),
            s.writeBytes(Core.stringToBytes(e, Core.la)),
            s.writeBytes(Core.stringToBytes(i, Core.ma)),
            s.writeFloat(r),
            Core.endCMD(s)
        );
    }
    function ut(t) {
        var e = Core.startCMD(l.TABLE_NICKNAME_LIST_REQ);
        return (
            e.writeByte(1),
            e.writeBytes(Core.stringToBytes(t, Core._n)),
            Core.endCMD(e)
        );
    }
    function ct(t, e, i) {
        void 0 === t && (t = 0);
        var r = Core.startCMD(l.CLIENT_FOLLOW_DEALER);
        return (
            r.writeByte(t),
            r.writeBytes(Core.stringToBytes(e, Core.pu)),
            r.writeBytes(Core.stringToBytes(i, Core.Vu)),
            Core.endCMD(r)
        );
    }
    function ft(t, e, i) {
        void 0 === t && (t = 0);
        var r = Core.startCMD(l.CLIENT_UNFOLLOW_DEALER);
        return (
            r.writeByte(t),
            r.writeBytes(Core.stringToBytes(e, Core.pu)),
            r.writeBytes(Core.stringToBytes(i, Core.Vu)),
            Core.endCMD(r)
        );
    }
    function Ct(t, e, i) {
        void 0 === i && (i = Core.gn);
        var r = Core.startCMD(l.FOLLOWER_CONN, i);
        return (
            r.writeBytes(Core.stringToBytes(t, Core.la)),
            r.writeDouble(e[0]),
            r.writeDouble(e[1]),
            r.writeByte(5),
            Core.endCMD(r)
        );
    }
    function lt(t, e, i, r, s) {
        var n = Core.startCMD(l.ANCHOR_CHAT_LOGIN);
        console.warn('ANCHOR_CHAT_LOGIN getCMDAnchorChatLogin: ', t, e, r, s),
            n.writeBytes(Core.stringToBytes('TST', l.PID_LENGTH)),
            n.writeBytes(
                Core.stringToBytes(Core.LoginStore.instance.loginName, Core.la)
            ),
            n.writeByte(t),
            n.writeByte(e),
            n.writeUnsignedInt(i),
            n.writeUnsignedInt(0);
        var o = new egret.ByteArray();
        o.writeUTFBytes(r);
        var a = new egret.ByteArray();
        return (
            a.writeUTFBytes(s),
            n.writeUnsignedInt(o.length),
            n.writeUnsignedInt(a.length),
            n.writeBytes(o),
            n.writeBytes(a),
            Core.endCMD(n)
        );
    }
    function mt(t) {
        var e = Core.startCMD(l.CLIENT_FOLLOW);
        return e.writeBytes(Core.stringToBytes(t, Core.Vu)), Core.endCMD(e);
    }
    function dt(t) {
        var e = Core.startCMD(l.CLIENT_UNFOLLOW_ANCHORLIST);
        return e.writeBytes(Core.stringToBytes(t, Core.Vu)), Core.endCMD(e);
    }
    function vt(t) {
        var e = Core.startCMD(l.SELECT_VIDEOS);
        e.writeInt(t.length);
        for (var i = 0; i < t.length; i++) e.writeUTFBytes(t[i]);
        return Core.endCMD(e);
    }
    function Gt() {
        var t = Core.startCMD(l.LEAVE_VIDEOS);
        return Core.endCMD(t);
    }
    function _t(t) {
        var e = Core.startCMD(l.FOLLOWER_DISCONNET);
        return e.writeDouble(t[0]), e.writeDouble(t[1]), Core.endCMD(e);
    }
    function bt(t, e, i, r, s, n) {
        var o = Core.startCMD(l.ANCHOR_GAME_BET_EXT, n),
            a = 'MYR' === s ? 10 : 1;
        return (
            o.writeBytes(Core.stringToBytes(t, Core._n)),
            o.writeBytes(Core.stringToBytes(e, Core.Pn)),
            o.writeUnsignedShort(i),
            o.writeUnsignedInt(r * a),
            o.writeUnsignedInt(a),
            Core.endCMD(o)
        );
    }
    function Pt(t, e, i, r, s) {
        var n = Core.startCMD(l.Rc, s),
            o = 'MYR' === r ? 10 : 1;
        n.writeBytes(Core.stringToBytes(t, Core._n)),
            n.writeBytes(Core.stringToBytes(e, Core.Pn)),
            n.writeInt(i.length);
        var a, h, u, c;
        for (u = 0; u < i.length; u++) {
            for (
                h = i[u],
                    n.writeShort(h.playType),
                    n.writeInt(h.amount),
                    n.writeUnsignedInt(o),
                    a = new egret.ByteArray(),
                    a.length = 12,
                    c = 0;
                c < a.length;
                c++
            )
                a.writeByte(c < h.nums.length ? h.nums[c] : -1);
            n.writeBytes(a);
        }
        return Core.endCMD(n);
    }
    function Vt(t, e, i) {
        void 0 === i && (i = 0);
        var r = Core.startCMD(l.BJ_ENTER_TABLE_REQ);
        return (
            r.writeBytes(Core.stringToBytes(t, Core._n)),
            r.writeByte(e),
            r.writeByte(i),
            Core.endCMD(r)
        );
    }
    function gt() {
        return Core.getSimpleCMD(l.BJ_LEAVE_TABLE);
    }
    function pt(t, e, i, r) {
        var s = Core.startCMD(l.BJ_BET_REQ, r);
        return (
            s.writeBytes(Core.stringToBytes(t, Core._n)),
            s.writeBytes(Core.stringToBytes(e, Core.Pn)),
            s.writeByte(i.betSeatNum),
            s.writeByte(i.playType),
            s.writeInt(i.amount),
            Core.endCMD(s)
        );
    }
    function kt(t, e, i, r) {
        var s = Core.startCMD(l.BJ_BET_EXT_REQ);
        s.writeBytes(Core.stringToBytes(t, Core._n)),
            s.writeBytes(Core.stringToBytes(e, Core.Pn));
        var n = 1,
            o = {
                seq: r,
                seatnum: i.betSeatNum,
                playtype: i.playType,
                jetton: i.amount,
                ratio: l.getCurrencyBetExtRatio()
            };
        return (
            s.writeShort(n),
            s.writeInt(o.seq),
            s.writeByte(o.seatnum),
            s.writeByte(o.playtype),
            s.writeInt(o.jetton * o.ratio),
            s.writeShort(o.ratio),
            Core.endCMD(s)
        );
    }
    function wt(t, e, i, r) {
        var s = Core.startCMD(l.BJ_CMD_REQ);
        return (
            s.writeBytes(Core.stringToBytes(t, Core._n)),
            s.writeBytes(Core.stringToBytes(e, Core.Pn)),
            s.writeByte(i),
            s.writeByte(r),
            Core.endCMD(s)
        );
    }
    function zt(t, e, i) {
        var r = Core.startCMD(l.BJ_INSURE_REQ);
        return (
            r.writeBytes(Core.stringToBytes(t, Core._n)),
            r.writeBytes(Core.stringToBytes(e, Core.Pn)),
            r.writeByte(i),
            Core.endCMD(r)
        );
    }
    function St(t) {
        var e = Core.startCMD(l.BJ_SIDE_BET_SETTING);
        return e.writeByte(t['double'] + t.split), Core.endCMD(e);
    }
    function yt() {
        var t = Core.startCMD(l.MOBILE_QRCODE_REQ);
        return Core.endCMD(t);
    }
    function Et(t, e, i, r, s, n, o) {
        void 0 === i && (i = ''),
            void 0 === r && (r = ''),
            void 0 === s && (s = 1),
            void 0 === n && (n = 20),
            void 0 === o && (o = '');
        var a = Core.startCMD(l.GET_TAIN_RECORDS);
        return (
            a.writeBytes(Core.stringToBytes(t, 10)),
            a.writeBytes(Core.stringToBytes(e, Core.la)),
            a.writeBytes(Core.stringToBytes(i, 19)),
            a.writeBytes(Core.stringToBytes(r, 19)),
            a.writeBytes(Core.stringToBytes(o, 16)),
            a.writeShort(n),
            a.writeShort(s),
            Core.endCMD(a)
        );
    }
    (l.getCMDClientLoginPlaza = t),
        (l.getCMDWalletSession = e),
        (l.getCMDGetPlayerBalance = i),
        (l.getCMDUserPoint = r),
        (l.getCMDGetAllChipSet = s),
        (l.getCMDSetFavChipSet = n),
        (l.getCMDGetCreditRecords = o),
        (l.getCMDGetUserPointRecords = a),
        (l.getCMDGetSlotGameRecords = h),
        (l.getCMDGetPlatformType = u),
        (l.getCMDGetPlayType = c),
        (l.getCMDGetTransType = f),
        (l.getCMDGetBetRecords = C),
        (l.getCMDGetAllBacResults = m),
        (l.getCMDGetAllPlatformRecords = d),
        (l.getCMDClientLoginGame = v),
        (l.getCMDClientLoginGameExt = G),
        (l.getCMDGetGameCurrentStatus = _),
        (l.getCMDClientLoginZjh = b),
        (l.getCMDClientLogoutZjh = P),
        (l.getCMDGameBetZjh = V),
        (l.getCMDVipAutoEnterTable = g),
        (l.getCMDVipLeaveTable = p),
        (l.getCMDVipStartGame = k),
        (l.getCMDVipDispatchCard = w),
        (l.getCMDVipChangeShoe = z),
        (l.getCMDVipChangeDealer = S),
        (l.getVipMouseMiCardExCmd = y),
        (l.getVipBacSettingCmd = E),
        (l.getVipSetPasswordCmd = T),
        (l.getCMDAutoEnterTable = x),
        (l.getCMDGameBetExt = O),
        (l.getCMDGameBet = I),
        (l.getCMDGameTableExit = R),
        (l.getCMDEnterMultiTable = L),
        (l.getCMDGetMultiCurrentStatus = j),
        (l.getCMDMultiTableBet = B),
        (l.getCMDMultiTableExit = A),
        (l.getCMDClientDisconnect = N),
        (l.getCMDGamePool = M),
        (l.getCMDMultitableClientLoginGame = D),
        (l.getCMDEnterRoad = H),
        (l.getCMDEnterLink = U),
        (l.getCMDRoadPlayerAttr = F),
        (l.getCMDRoadSelectVideos = K),
        (l.getCMDRoadBet = Z),
        (l.getCMDRoadBetExt = Y),
        (l.getCMDGoodRoadBet = q),
        (l.getCMDGameBetRou = J),
        (l.getCMDGameBetExtRou = W),
        (l.getCMDRouMultiTableBet = Q),
        (l.getCMDGameBetCancel = X),
        (l.getCMDBjGameBetCancel = $),
        (l.getCMDGameBetRouEv = tt),
        (l.getCMDGameRouBetUndo = et),
        (l.getCMDExecuteCmd = it),
        (l.getShowCardCmd = rt),
        (l.getMouseMiCardCmd = st),
        (l.getPlayerPreBet = nt),
        (l.getFeeCmd = ot),
        (l.getDealerTipsHist = at),
        (l.getCutShoeConfirmedCmd = ht),
        (l.getCMDOnliePlayerList = ut),
        (l.getCMDFollowDealer = ct),
        (l.getCMDUnfollowDealer = ft),
        (l.getCMDFollowerConnect = Ct),
        (l.PID_LENGTH = 3),
        (l.getCMDAnchorChatLogin = lt),
        (l.getCMDClientFollow = mt),
        (l.getCMDClientUnFollow = dt),
        (l.getCMDSelectVideo = vt),
        (l.getCMDLeaveVideo = Gt),
        (l.getCMDFollwerDisconnect = _t),
        (l.getCMDFollowerBetExt = bt),
        (l.getCMDFollowerBetExtRou = Pt),
        (l.getCMDBjEnterTable = Vt),
        (l.getCMDBjTableExit = gt),
        (l.getCMDGameBetBj = pt),
        (l.getCMDGameBetExtBj = kt),
        (l.getCMDBjCommand = wt),
        (l.getCMDBJInsureReq = zt),
        (l.getCMDBJSideBetSetting = St),
        (l.getMobileQRCode = yt),
        (l.getCMDGetTainRecords = Et);
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            Object.defineProperty(e, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.init = function() {
                return this.initInstance(this);
            }),
            Object.defineProperty(e.prototype, 'urlList', {
                get: function() {
                    return Core.Config.HostConfig.instance.getHost('road')
                        .urlList;
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(e.prototype, 'respMap', {
                get: function() {
                    return (
                        this._respMap ||
                            ((this._respMap = new Core.HashMap()),
                            this._respMap.set(i.we, i.ze),
                            this._respMap.set(i.Ue, i.Fe),
                            this._respMap.set(i.Se, i.ye),
                            this._respMap.set(i.eo, i.ye),
                            this._respMap.set(i.Nt, i.De),
                            this._respMap.set(i.lt, i.He),
                            this._respMap.set(i.ut, i.zr),
                            this._respMap.set(i.ct, i.zr),
                            this._respMap.set(i.jt, i.Sr),
                            this._respMap.set(i.Bt, i.Sr),
                            this._respMap.set(i.Ft, i.xr),
                            this._respMap.set(i.Ye, i.qe),
                            this._respMap.set(i.Or, i.Ir),
                            this._respMap.set(i.Rr, i.Lr),
                            this._respMap.set(i.jr, i.Br),
                            this._respMap.set(i.Ct, i.Je),
                            this._respMap.set(i.Gt, i.Me),
                            this._respMap.set(i.hr, i.ur)),
                        this._respMap
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(e.prototype, 'tag', {
                get: function() {
                    return '[GoodRoadSocket]';
                },
                enumerable: !0,
                configurable: !0
            }),
            e
        );
    })(Core.Network.WebSocketBase);
    (i.GoodRoadSocket = t),
        __reflect(t.prototype, 'VideoGameCore.GoodRoadSocket');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    function e() {
        return Core.ExternalData.isPcVersion
            ? t.CLIENT_LOGIN_GAME_PC
            : t.CLIENT_LOGIN_GAME_MOBILE;
    }
    (t.CLIENT_LOGIN_PLAZA = 262150),
        (t.Lc = 262151),
        (t.jc = 262230),
        (t.Bc = 131142),
        (t.GET_WALLET_SESSION = 294915),
        (t.Ac = 294914),
        (t.VIDEO_DEALER_INFO = 131079),
        (t.LBAC_DEALER_INFO = 131077),
        (t.VIP_VIDEO_LIST = 262261),
        (t.Nc = 263434),
        (t.$n = 327734),
        (t.Mc = 262164),
        (t.Dc = 262257),
        (t.Gt = 131080),
        (t.Nt = 131089),
        (t.ki = 172049),
        (t.hr = 131114),
        (t.Mt = 131113),
        (t.er = 131848),
        (t.rr = 131857),
        (t.qa = 131127),
        (t.Vn = 172087),
        (t.Ti = 196663),
        (t.lt = 131125),
        (t.di = 86039),
        (t.Ue = 131119),
        (t.Ke = 131096),
        (t.Hc = 196632),
        (t.GET_PLAYER_BALANCE = 131107),
        (t.we = 131106),
        (t.ALL_CURRENCY_INFO = 196888),
        (t.GET_ALL_CHIP_SET = 262213),
        (t.Uc = 262214),
        (t.Fc = 262208),
        (t.SET_FAV_CHIP_SET = 262209),
        (t.Kc = 262210),
        (t.GET_USER_POINT = 262232),
        (t.Zc = 262233),
        (t.GET_SLOTGAME_RECORDS = 262405),
        (t.Yc = 262406),
        (t.GET_CREDIT_RECORDS = 262292),
        (t.qc = 262293),
        (t.GET_USER_POINT_RECORDS = 262544),
        (t.Jc = 262545),
        (t.GET_BET_RECORDS = 262290),
        (t.Wc = 262291),
        (t.GET_ALL_BAC_RESULTS = 196617),
        (t.GET_TAIN_RECORDS = 262411),
        (t.Qc = 262412),
        (t.GET_ALL_PLATFORM_RECORDS = 262452),
        (t.Xc = 262453),
        (t.GET_PLATFORMTYPE = 262278),
        (t.$c = 262279),
        (t.GET_PLAYTYPE = 262280),
        (t.tf = 262281),
        (t.GET_TRANSTYPE = 262288),
        (t.ef = 262289),
        (t.TABLE_NICKNAME_LIST_REQ = 139300),
        (t.TABLE_NICKNAME_LIST_RES = 139313),
        (t.if = 263470),
        (t.te = 263171),
        (t.rf = 263239),
        (t.sf = 263465),
        (t.CLIENT_FOLLOW_DEALER = 263461),
        (t.nf = 263462),
        (t.CLIENT_UNFOLLOW_DEALER = 263463),
        (t.af = 263464),
        (t.hf = 263469),
        (t.uf = 132168),
        (t.FOLLOWER_CONN = 66564),
        (t.Zt = 132100),
        (t.FOLLOWER_DISCONNET = 66600),
        (t.ANCHOR_CHAT_LOGIN = 299011),
        (t.Ur = 299010),
        (t.CLIENT_FOLLOW = 66586),
        (t.Yt = 132122),
        (t.CLIENT_UNFOLLOW_ANCHORLIST = 66579),
        (t.Wt = 132115),
        (t.SELECT_VIDEOS = 66562),
        (t.qt = 132098),
        (t.LEAVE_VIDEOS = 66582),
        (t.cf = 132118),
        (t.ff = 132119),
        (t.Qt = 132120),
        (t.ds = 132104),
        (t.Gs = 132162),
        (t.Qr = 132133),
        (t.ANCHOR_GAME_BET_EXT = 107558),
        (t.ts = 132134),
        (t.es = 173066),
        (t.ss = 147511),
        (t.as = 132101),
        (t.Ps = 132103),
        (t.ee = 132135),
        (t.ls = 132112),
        (t.fs = 132113),
        (t.Cf = 299013),
        (t.ps = 132155),
        (t.Rc = 107547),
        (t.zs = 173067),
        (t.ys = 132123),
        (t.ie = 132158),
        (t.xs = 132159),
        (t.Is = 132160),
        (t.qr = 132177),
        (t.Xt = 132129),
        (t.CLIENT_LOGIN_GAME_EXT = 73730),
        (t.CLIENT_LOGIN_GAME_MOBILE = 69634),
        (t.CLIENT_LOGIN_GAME_PC = 65538),
        (t.wi = 139266),
        (t.Se = 131074),
        (t.gt = 131092),
        (t.GAME_LAST_POSITION_OLD = 131098),
        (t.GAME_LAST_POSITION = 139290),
        (t.GAME_USERLIST = 131091),
        (t.GAME_USERLIST_WITH_VID = 131078),
        (t.GET_GAME_POOL = 65814),
        (t.Qe = 131350),
        (t.lf = 131351),
        (t.CLIENT_LOGIN_GAME = e),
        (t.ENTER_MULTI_TABLE = 65596),
        (t.kr = 131132),
        (t.EXIT_MULTI_TABLE = 65597),
        (t.GET_GAME_CURRENT_STATUS = 65558),
        (t.GET_MULTI_CURRENT_STATUS = 196630),
        (t.mt = 131094),
        (t.LED_LAST_POSITION = 131098),
        (t.AUTO_ENTER_TABLE = 65542),
        (t.Ee = 65543),
        (t.Vt = 73735),
        (t.ce = 131123),
        (t.fe = 172083),
        (t.ft = 131083),
        (t.GAME_BET = 65539),
        (t.GAME_BET_EXT = 106499),
        (t.ue = 131075),
        (t.pt = 131126),
        (t.kt = 172086),
        (t.W = 131088),
        (t.wt = 131129),
        (t.GAME_TABLE_EXIT = 65541),
        (t.Ae = 131103),
        (t.ut = 131099),
        (t.MULTI_TABLE_BET = 65604),
        (t.jt = 131140),
        (t.Ut = 131141),
        (t.MULTI_TABLE_EXIT = 65597),
        (t.Ye = 327682),
        (t.pi = 368642),
        (t.fr = 372738),
        (t.Or = 132162),
        (t.Ct = 131100),
        (t.CLIENT_DISCONN = 65557),
        (t.SBAC_BET_HINTS_EXT = 172080),
        (t.SBAC_BET_HINTS = 131120),
        (t.mf = 131082),
        (t.CHANGE_WRONG_CARD = 131112),
        (t.nr = 131116),
        (t.Ar = 131592),
        (t.Ht = 131601),
        (t.Ls = 393227),
        (t.ROU_GAME_PAYOUT_RATE = 131649),
        (t.ROU_GAME_RESULT_STAT = 180744),
        (t.Xr = 131136),
        (t.X = 131138),
        (t.SHB_GAME_PAYOUT_RATE = 131137),
        (t.SHB_GAME_INFO = 131139),
        (t.TURNCARD_PERSON = 393222),
        (t.dr = 524337),
        (t.TURNCARD_MOUSE_MI_CARD_MOBILE = 86067),
        (t.EXECUTE_CMD = 131143),
        (t.PRE_BET = 131161),
        (t.CLIENT_LIST = 524320),
        (t.TURN_CARD_COMMAND = 131168),
        (t.LBAC_SEAT_STATUS = 86040),
        (t.FUNCTION_BUTTON_STATUS = 131185),
        (t.FEE_FOR_DEALER = 65566),
        (t.Oi = 131102),
        (t.Ri = 65567),
        (t.DEALER_TIPS_HIST = 65601),
        (t.ji = 65602),
        (t.NOTIFY_TURN_CARD = 131158),
        (t.CUT_SHOE_START = 65608),
        (t.CUT_SHOE_INFO = 65618),
        (t.CUT_SHOE_CONFIRMED = 65605),
        (t.Pr = 65609),
        (t.VIP_VIDEO_LIMITSET = 86052),
        (t.LED_CONTACT_PERSON = 196728),
        (t.VIP_SHOW_CARD = 86023),
        (t.VIP_AUTO_ENTER_TABLE = 86017),
        (t.oi = 86018),
        (t.VIP_LEAVE_TABLE = 86029),
        (t.VIP_START_GAME = 86019),
        (t.VIP_DISPATCH_CARD = 86021),
        (t.VIP_WHO_MI_CARD = 86033),
        (t.VIP_START_MI_CARD = 86041),
        (t.VIP_END_MI_CARD = 86049),
        (t.VIP_CHANGE_SHOE = 86025),
        (t.df = 86026),
        (t.VIP_CHANGE_DEALER = 86027),
        (t.vf = 86028),
        (t.VIP_MOUSE_MI_CARD_EX = 86064),
        (t.VIP_BAC_SET_INFO = 86035),
        (t.VIP_SET_PASSWORD = 86053),
        (t.Pi = 86054),
        (t.VIP_NEW_SHOE = 327940),
        (t.xt = 32771),
        (t.Hi = 32773),
        (t.yt = 32806),
        (t.BJ_USER_BET_INFO = 32774),
        (t.BJ_ENTER_TABLE_REQ = 32784),
        (t.BJ_ENTER_TABLE_RESP = 33040),
        (t.BJ_SNAPSHOT = 32786),
        (t.BJ_LAST_POSITION = 32807),
        (t.BJ_VID_POOL_RESP = 32787),
        (t.BJ_USER_LIST = 32788),
        (t.BJ_PLAYER_ENTRY_LEAVE = 32808),
        (t.BJ_LEAVE_TABLE = 32792),
        (t.BJ_START_GAME = 32789),
        (t.BJ_BET_REQ = 32790),
        (t.BJ_BET_EXT_REQ = 32816),
        (t.BJ_BET_EXT_RESP = 32817),
        (t.BJ_BET_RESP = 33046),
        (t.Ki = 32809),
        (t.St = 32818),
        (t.BJ_RECEIVE_CARD = 32791),
        (t.BJ_CMD_REQ = 32805),
        (t.BJ_CMD_RESP = 33061),
        (t.BJ_CMD_OTHER = 32800),
        (t.BJ_PAYOUT_ME = 32810),
        (t.BJ_PAYOUT_OTHER = 32811),
        (t.BJ_SIDE_BET_SETTING = 32813),
        (t.BJ_INSURE_REQ = 32801),
        (t.BJ_INSURE_RES = 32802),
        (t.BJ_FINAL_PAYOFF = 32814),
        (t.Qi = 32815),
        (t.ZJH_LOGIN_GAME = 45057),
        (t.qs = 45058),
        (t.ZJH_LOGOUT = 45059),
        (t.rn = 45060),
        (t.Gf = 45061),
        (t.Xs = 45063),
        (t.an = 45064),
        (t.ZJH_SNAPSHOT = 45065),
        (t.Ws = 45066),
        (t.vn = 45067),
        (t.ZJH_BET = 45068),
        (t.un = 45069),
        (t.mn = 45070),
        (t.tn = 45071),
        (t.cn = 45072),
        (t.Cn = 45073),
        (t.Zs = 45075),
        (t.MULTITABLE_CLIENT_LOGIN_GAME = 73730),
        (t.pr = 139266),
        (t.ROAD_ENTER = 69692),
        (t.eo = 135228),
        (t.ROAD_ENTER_LINK = 73788),
        (t.io = 139324),
        (t.ct = 135195),
        (t._f = 135249),
        (t.ROAD_PLAYER_ATTRIBUTE = 69729),
        (t.ROAD_SELECT_VIDEOS = 69730),
        (t.Rr = 135266),
        (t.ROAD_SET = 69728),
        (t.bf = 135264),
        (t.ROAD_BET = 69700),
        (t.ROAD_BET_EXT = 110660),
        (t.Bt = 135236),
        (t.MULTITABLE_ROAD_BET = 73796),
        (t.At = 139332),
        (t.Ft = 135237),
        (t.MULTITABLE_NOBET_WARN = 131103),
        (t.MULTITABLE_NOBET_KICKOUT = 131142),
        (t.MULTI_TABLE_BET_EXT = 76356),
        (t.MULTI_TABLE_ROU_BET_EXT = 73798),
        (t.MULTI_TABLE_ROU_BET_RES = 139334),
        (t.Er = 132158),
        (t.jr = 131381),
        (t.GAME_BET_CANCEL = 126979),
        (t.Ai = 192515),
        (t.BJ_GAME_BET_CANCEL = 32823),
        (t.Xi = 32824),
        (t.BJ_GAME_BET_CANCEL_NOTICE = 32825),
        (t.MOBILE_QRCODE_REQ = 263449),
        (t.MOBILE_QRCODE_RES = 263456),
        (t.ROU_BET_BATCH = 114691),
        (t.Ns = 180227),
        (t.ROU_BET_UNDO = 122883),
        (t.Ds = 188419),
        (t.ROU_VIDEO_JETTON_WITH_RATIO = 180278);
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            Object.defineProperty(e, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.init = function() {
                return this.initInstance(this);
            }),
            Object.defineProperty(e.prototype, 'urlList', {
                get: function() {
                    return Core.Config.HostConfig.instance.getHost('plaza')
                        .urlList;
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(e.prototype, 'respMap', {
                get: function() {
                    return (
                        this._respMap ||
                            ((this._respMap = new Core.HashMap()),
                            this._respMap.set(i.Lc, i.Pf),
                            this._respMap.set(i.Nc, i.Vf),
                            this._respMap.set(i.jc, i.gf),
                            this._respMap.set(i.Bc, i.pf),
                            this._respMap.set(i.VIDEO_DEALER_INFO, i.Ga),
                            this._respMap.set(i.LBAC_DEALER_INFO, i.kf),
                            this._respMap.set(i.VIP_VIDEO_LIST, i.wf),
                            this._respMap.set(i.Ac, i.zf),
                            this._respMap.set(i.Mc, i.Sf),
                            this._respMap.set(i.$n, i.yf),
                            this._respMap.set(i.Dc, i.Ef),
                            this._respMap.set(i.Yc, i.Tf),
                            this._respMap.set(i.qc, i.xf),
                            this._respMap.set(i.Jc, i.Of),
                            this._respMap.set(i.Wc, i.If),
                            this._respMap.set(i.$c, i.Rf),
                            this._respMap.set(i.tf, i.Lf),
                            this._respMap.set(i.ef, i.jf),
                            this._respMap.set(i.Qc, i.Bf),
                            this._respMap.set(i.Xc, i.Af),
                            this._respMap.set(i.Gt, i.Me),
                            this._respMap.set(i.Nt, i.De),
                            this._respMap.set(i.Ct, i.Je),
                            this._respMap.set(i.hr, i.ur),
                            this._respMap.set(i.Mt, i.cr),
                            this._respMap.set(i.er, i.ir),
                            this._respMap.set(i.rr, i.sr),
                            this._respMap.set(i.Ar, i.Nr),
                            this._respMap.set(i.Ht, i.Dr),
                            this._respMap.set(i.Xr, i.$r),
                            this._respMap.set(i.X, i.Mr),
                            this._respMap.set(i.SHB_GAME_INFO, i.Mi),
                            this._respMap.set(i.Hi, i.Ui),
                            this._respMap.set(i.yt, i.Fi),
                            this._respMap.set(i.BJ_USER_BET_INFO, i.Mi),
                            this._respMap.set(i.xt, i.He),
                            this._respMap.set(i.Xs, i.$s),
                            this._respMap.set(i.tn, i.in),
                            this._respMap.set(i.an, i.hn),
                            this._respMap.set(i.rn, i.sn),
                            this._respMap.set(i.qa, i.Mi),
                            this._respMap.set(i.Ti, i.Nf),
                            this._respMap.set(i.lt, i.He),
                            this._respMap.set(i.di, i.vi),
                            this._respMap.set(i.LBAC_SEAT_STATUS, i.Led.Mf),
                            this._respMap.set(i.Ue, i.Fe),
                            this._respMap.set(i.Hc, i.Df),
                            this._respMap.set(
                                i.ALL_CURRENCY_INFO,
                                i.AllCurrencyInfo
                            ),
                            this._respMap.set(i.we, i.ze),
                            this._respMap.set(i.Uc, i.Hf),
                            this._respMap.set(i.Fc, i.Hf),
                            this._respMap.set(i.Kc, i.Uf),
                            this._respMap.set(i.Zc, i.Ff),
                            this._respMap.set(i.TABLE_NICKNAME_LIST_RES, i.Kf),
                            this._respMap.set(i.if, i.Zf),
                            this._respMap.set(i.te, i.Yf),
                            this._respMap.set(i.rf, i.qf),
                            this._respMap.set(i.sf, i.Jf),
                            this._respMap.set(i.nf, i.Wf),
                            this._respMap.set(i.af, i.Wf),
                            this._respMap.set(i.hf, i.Qf),
                            this._respMap.set(i.Ur, i.Fr),
                            this._respMap.set(i.Cf, i.Xf),
                            this._respMap.set(i.uf, i.$f),
                            this._respMap.set(i.MOBILE_QRCODE_RES, i.tC)),
                        this._respMap
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(e.prototype, 'tag', {
                get: function() {
                    return '[VideoPlaza]';
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(e.prototype, 'MAX_TOTAL_RETRY_COUNT', {
                get: function() {
                    return Number.MAX_VALUE;
                },
                enumerable: !0,
                configurable: !0
            }),
            e
        );
    })(Core.Network.WebSocketBase);
    (i.PlazaSocket = t), __reflect(t.prototype, 'VideoGameCore.PlazaSocket');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.gmtype = t.readUTFBytes(Core.bn)),
                        (this.status = t.readByte()),
                        (this.gmcode = t.readUTFBytes(Core.Pn)),
                        13 != this.gmcode.length && (this.gmcode = ''),
                        (this.vipStatus = t.readByte()),
                        (this.subscribeType = t.readByte()),
                        (this.bcards = []);
                    for (var e = 0; 3 > e; e++)
                        this.bcards.push(t.readUnsignedByte());
                    this.bShowCards = [];
                    for (var e = 0; 3 > e; e++)
                        this.bShowCards.push(t.readBoolean());
                    this.pcards = [];
                    for (var e = 0; 3 > e; e++)
                        this.pcards.push(t.readUnsignedByte());
                    this.pShowCards = [];
                    for (var e = 0; 3 > e; e++)
                        this.pShowCards.push(t.readBoolean());
                    (this.whoMiCard = t.readByte()),
                        (this.timeout = t.readShort()),
                        (this.miCardTimeout = t.readShort()),
                        (this.shoeCode = t.readInt()),
                        (this.isShared = t.readBoolean()),
                        (this.isPasswd = t.readBoolean()),
                        (this.bColor = t.readByte()),
                        Core.ExternalData.showSocketLog &&
                            dclib(egret.getQualifiedClassName(this), this);
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.dt = e),
            __reflect(e.prototype, 'VideoGameCore.Abac.GameCurrentStatusResp');
    })((e = t.Abac || (t.Abac = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.retCode = t.readInt()),
                    (this.tableCode = t.readUTFBytes(Core.va)),
                    (this.seat = t.readByte()),
                    Core.ExternalData.showSocketLog &&
                        dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Te = e), __reflect(e.prototype, 'VideoGameCore.AutoEnterTableResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.code = t.readInt()),
                    (this.vid = t.readUTFBytes(Core._n)),
                    (this.table = t.readUTFBytes(Core.va)),
                    (this.seat = t.readByte());
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Si = e), __reflect(e.prototype, 'VideoGameCore.AutoEnterTableVidResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.name = t.readUTFBytes(Core.la)),
                    (this.nick = t.readUTFBytes(Core.ma)),
                    (this.tableCode = t.readUTFBytes(Core.va)),
                    (this.seatNum = t.readByte()),
                    (this.playType = t.readUnsignedShort()),
                    (this.value = t.readDouble()),
                    (this.left = t.readDouble()),
                    (this.currency = t.readUTFBytes(Core.Fa));
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Re = e), __reflect(e.prototype, 'VideoGameCore.GameJettonExtResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.name = t.readUTFBytes(Core.la)),
                    (this.nick = t.readUTFBytes(Core.ma)),
                    (this.tableCode = t.readUTFBytes(Core.va)),
                    (this.seatNum = t.readByte()),
                    (this.playType = t.readUnsignedByte()),
                    (this.value = t.readInt()),
                    (this.left = t.readDouble()),
                    (this.currency = t.readUTFBytes(Core.Fa));
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Ie = e), __reflect(e.prototype, 'VideoGameCore.GameJettonResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                this.roundNum = t.readByte();
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Ne = e), __reflect(e.prototype, 'VideoGameCore.GameNoBetWarnResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(n) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.payoutHashMap = new Core.HashMap()),
                    (this.gmcode = t.readUTFBytes(Core.Pn)),
                    (this.payout = t.readDouble()),
                    (this.balance = t.readDouble()),
                    (this.ptNum = t.readUnsignedByte()),
                    (this.ptPayouts = []);
                for (var e = 0; e < this.ptNum; e++) {
                    var i,
                        r = t.readUnsignedByte(),
                        s = t.readDouble();
                    this.payoutHashMap.has(r)
                        ? ((i = this.payoutHashMap.get(r)), (i.value += s))
                        : ((i = new n.PlaytypePayout()),
                          (i.playtype = r),
                          (i.value = s)),
                        this.ptPayouts.push(i),
                        this.payoutHashMap.set(r, i);
                }
                Core.ExternalData.showSocketLog &&
                    dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (n.je = t), __reflect(t.prototype, 'VideoGameCore.GamePayoutMeResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.loginname = t.readUTFBytes(Core.la)),
                    (this.currency = t.readUTFBytes(Core.Fa)),
                    (this.credit = t.readDouble()),
                    (this.ptPayouts = []);
                var e;
                this.betNum = t.readByte();
                for (var i = 0; i < this.betNum; i++)
                    (e = new r.PlaytypePayout()),
                        (e.playtype = t.readUnsignedByte()),
                        (e.value = t.readDouble()),
                        this.ptPayouts.push(e);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (r.Be = t), __reflect(t.prototype, 'VideoGameCore.GamePayoutOtherResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                var e = t.readInt();
                this.payoutRates = [];
                for (var i = 0; e > i; i++) {
                    var r = t.readByte(),
                        s = t.readFloat();
                    this.payoutRates.push({ playType: r, rate: s });
                }
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.gs = e), __reflect(e.prototype, 'VideoGameCore.GamePayoutRateResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(n) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                var e, i;
                this.respId === n.fe
                    ? ((e = t.readUnsignedShort()), (i = t.readUnsignedShort()))
                    : ((e = t.readUnsignedByte()), (i = t.readShort())),
                    (this.betPoolInfos = []);
                for (var r = 0; i > r; r++) {
                    var s = new n.BetPoolInfo();
                    (s.playType = e),
                        (s.loginname = t.readUTFBytes(Core.la)),
                        (s.nickname = t.readUTFBytes(Core.ma)),
                        (s.tableCode = t.readUTFBytes(Core.va)),
                        (s.currency = t.readUTFBytes(Core.Fa)),
                        (s.seatNum = t.readByte()),
                        this.respId === n.fe
                            ? (s.amount = t.readDouble())
                            : (s.amount = t.readInt()),
                        this.betPoolInfos.push(s);
                }
                Core.ExternalData.showSocketLog &&
                    dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (n.xe = t), __reflect(t.prototype, 'VideoGameCore.GameTablePoolResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.retCode = t.readUnsignedInt()),
                    (this.vid = t.readUTFBytes(Core._n)),
                    (this.deviceType = t.readByte()),
                    (this.reserve1 = t.readByte()),
                    (this.reserve2 = t.readByte());
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.zi = e), __reflect(e.prototype, 'VideoGameCore.LoginGameExtResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                this.retCode = t.readInt();
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.ye = e), __reflect(e.prototype, 'VideoGameCore.LoginGameResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                this.retCode = t.readInt();
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.La = e), __reflect(e.prototype, 'VideoGameCore.SimpleResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(o) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                var e = !1,
                    i = 1;
                switch (this.respId) {
                    case o.gt:
                        this.action = t.readByte();
                        break;
                    case o.GAME_LAST_POSITION:
                        e = !0;
                        break;
                    case o.GAME_USERLIST:
                        (this.action = 2), (i = t.readInt());
                        break;
                    case o.GAME_USERLIST_WITH_VID:
                        (this.tableCode = t.readUTFBytes(Core._n)),
                            (this.action = 2),
                            (i = t.readInt());
                }
                this.players = [];
                for (var r = 0; i > r; r++) {
                    var s = t.readUTFBytes(Core.la),
                        n = new o.TableSeatPlayer(s);
                    (n.nickname = t.readUTFBytes(Core.ma)),
                        (n.sex = t.readUnsignedByte()),
                        e && (n.vid = t.readUTFBytes(Core._n)),
                        (n.tableCode = t.readUTFBytes(Core.va)),
                        (n.seat = t.readByte()),
                        (n.currency = t.readUTFBytes(Core.Fa)),
                        (n.credit = t.readDouble()),
                        (n.action = this.action),
                        this.players.push(n);
                }
                1 === i &&
                    ((this.loginname = this.players[0].loginname),
                    (this.seat = this.players[0].seat));
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (o.We = t), __reflect(t.prototype, 'VideoGameCore.UserPositionResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(a) {
    (a.FISH_SCENES_API = 'getscenes'),
        (a.FISH_GAMETRANSLISTS_API = 'getgametranslists');
    var n = 'superd84b062c76a87a7322a',
        o = 'supermd87a7322ad84b062c7',
        i = (function() {
            function t() {}
            return t;
        })();
    __reflect(i.prototype, 'RequestObj');
    var r = (function() {
        function t() {}
        return t;
    })();
    (a.eC = r), __reflect(r.prototype, 'VideoGameCore.HunterBetRecordResp');
    var h = (function() {
        function t() {}
        return t;
    })();
    (a.iC = h), __reflect(h.prototype, 'VideoGameCore.HunterCreditRecordResp');
    var t = (function(e) {
        function t() {
            var t = e.call(this) || this;
            return (t.requestObj = new i()), t;
        }
        return (
            __extends(t, e),
            Object.defineProperty(t.prototype, 'currRequestAPI', {
                get: function() {
                    return this.requestObj ? this.requestObj.api : '';
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(t.prototype, 'urls', {
                get: function() {
                    var t = [this.getFishUrl(this.requestObj)];
                    return t;
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.parseXmlObj = function(t) {
                if (this.requestObj)
                    switch (this.requestObj.api) {
                        case a.FISH_SCENES_API:
                            this.parseFishBetXmlObj(t);
                            break;
                        case a.FISH_GAMETRANSLISTS_API:
                            this.parseFishCreditXmlObj(t);
                    }
            }),
            (t.prototype.parseFishBetXmlObj = function(t) {
                var s = this;
                (this.rC = new r()), (this.rC.records = new Array());
                var e = Core.XMLReader.read(t);
                e.find('Items').forEach(function(t) {
                    var e = new a.HunterBetRecord();
                    (e.sceneid = t.find('SceneId')[0].text),
                        (e.roomid = t.find('RoomId')[0].text);
                    var i = new Date();
                    i.setTime(1e3 * parseInt(t.find('StartTime')[0].text)),
                        (e.starttime = Core.patternDate(
                            'yyyy-MM-dd hh:mm:ss',
                            i
                        ));
                    var r = new Date();
                    r.setTime(1e3 * parseInt(t.find('EndTime')[0].text)),
                        (e.endtime = Core.patternDate(
                            'yyyy-MM-dd hh:mm:ss',
                            r
                        )),
                        (e.cost = parseFloat(t.find('Cost')[0].text)),
                        (e.earn = parseFloat(t.find('Earn')[0].text)),
                        (e.dividend = e.earn - e.cost),
                        s.rC.records.push(e);
                }),
                    (this.rC.pageNum = parseInt(
                        e.find('PageData')[0].find('perpage')[0].text
                    )),
                    (this.rC.recordsTotal = parseInt(
                        e.find('PageData')[0].find('ItemTotal')[0].text
                    )),
                    (this.rC.ttl_cost = parseFloat(
                        e.find('TotalCost')[0].text
                    )),
                    (this.rC.ttl_earn = parseFloat(
                        e.find('TotalEarn')[0].text
                    ));
            }),
            (t.prototype.parseFishCreditXmlObj = function(t) {
                var s = this;
                (this.sC = new h()),
                    (this.sC.records = new Array()),
                    (this.sC.subExpend = 0),
                    (this.sC.subIncome = 0);
                var e = Core.XMLReader.read(t);
                e.find('Bill').forEach(function(t) {
                    var e = new a.CreditRecord();
                    (e.remark = t.find('SceneId')[0].text),
                        (e.code = t.find('BillType')[0].text),
                        (e.tradeno = t.find('BillId')[0].text);
                    var i = new Date();
                    i.setTime(1e3 * parseInt(t.find('Time')[0].text)),
                        (e.jointime = Core.patternDate(
                            'yyyy-MM-dd hh:mm:ss',
                            i
                        )),
                        (e.src_amount = t.find('UserCashBefore')[0].text),
                        (e.dst_amount = t.find('UserCashCurrent')[0].text),
                        (e.trans_amount = t.find('UserCashDelta')[0].text);
                    var r = Number(e.trans_amount);
                    0 > r ? (s.sC.subExpend += r) : (s.sC.subIncome += r),
                        s.sC.records.push(e);
                }),
                    (this.sC.pageNum = parseInt(e.find('perpage')[0].text)),
                    (this.sC.recordsTotal = parseInt(e.find('Total')[0].text)),
                    (this.sC.page_index = parseInt(e.find('numpage')[0].text)),
                    (this.sC.income = parseFloat(
                        e.find('TotalCashEarn')[0].text
                    )),
                    (this.sC.expend = parseFloat(
                        e.find('TotalCashPay')[0].text
                    ));
            }),
            (t.prototype.getFishCreditRecord = function(t, e, i, r, s) {
                this.requestObj.api = a.FISH_GAMETRANSLISTS_API;
                var n = new Date(t);
                n &&
                    (this.requestObj.begintime =
                        '' + Math.round(n.getTime() / 1e3));
                var o = new Date(e);
                o &&
                    (this.requestObj.endtime =
                        '' + Math.round(o.getTime() / 1e3)),
                    (this.requestObj.username =
                        Core.LoginStore.instance.userName),
                    (this.requestObj.pid = Core.ExternalData.pid),
                    (this.requestObj.billno = ''),
                    (this.requestObj.order = '-time'),
                    (this.requestObj.orderby = 'desc'),
                    (this.requestObj.sceneid = ''),
                    (this.requestObj.api = a.FISH_GAMETRANSLISTS_API),
                    (this.requestObj.page = i),
                    (this.requestObj.numperpage = r),
                    (this.requestObj.billno = s),
                    this.fetchConfig();
            }),
            (t.prototype.getFishBetRecord = function(t, e, i, r) {
                this.requestObj.api = a.FISH_SCENES_API;
                var s = new Date(t);
                s &&
                    (this.requestObj.begintime =
                        '' + Math.round(s.getTime() / 1e3));
                var n = new Date(e);
                n &&
                    (this.requestObj.endtime =
                        '' + Math.round(n.getTime() / 1e3)),
                    (this.requestObj.username =
                        Core.LoginStore.instance.userName),
                    (this.requestObj.pid = Core.ExternalData.pid),
                    (this.requestObj.billno = ''),
                    (this.requestObj.order = '-time'),
                    (this.requestObj.orderby = 'desc'),
                    (this.requestObj.sceneid = ''),
                    (this.requestObj.api = a.FISH_SCENES_API),
                    (this.requestObj.page = i),
                    (this.requestObj.numperpage = r),
                    this.fetchConfig();
            }),
            (t.prototype.getFishUrl = function(t) {
                var e = '';
                if (t) {
                    var i = '',
                        r = new Date();
                    switch (
                        ((i += '&stamp=' + r.getTime()),
                        (i += '&pidtoken=' + n),
                        (i += '&begintime=' + t.begintime),
                        (i += '&by=' + t.orderby),
                        (i += '&endtime=' + t.endtime),
                        (i += '&numperpage=' + t.numperpage),
                        (i += '&order=' + t.order),
                        (i += '&page=' + t.page),
                        (i += '&productid=' + t.pid),
                        (i += '&username=' + t.username),
                        t.api)
                    ) {
                        case a.FISH_SCENES_API:
                            i +=
                                '&sessionkey=' +
                                new md5().hex_md5(
                                    n +
                                        t.begintime +
                                        t.endtime +
                                        t.numperpage +
                                        t.order +
                                        t.page +
                                        t.pid +
                                        t.username +
                                        o
                                );
                            break;
                        case a.FISH_GAMETRANSLISTS_API:
                            (i += '' != t.billno ? '&billid=' + t.billno : ''),
                                (i +=
                                    '&sessionkey=' +
                                    new md5().hex_md5(
                                        n +
                                            t.begintime +
                                            t.billno +
                                            t.endtime +
                                            t.numperpage +
                                            t.order +
                                            t.page +
                                            t.pid +
                                            t.username +
                                            o
                                    ));
                    }
                    var s = a.PCPlazaConfig.instance.hunterRecordUrl;
                    e = s + '/api?act=' + t.api + i;
                }
                return e;
            }),
            t
        );
    })(Core.AGWorker.ConfigBase);
    (a.HunterRecordRequest = t),
        __reflect(t.prototype, 'VideoGameCore.HunterRecordRequest');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(o) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.num = t.readInt()),
                    (this.beadList = []);
                for (var e, i = 0; i < this.num; i++) {
                    (e = new o.RoadPaper.BeadData()),
                        (e.gmcode = t.readUTFBytes(Core.Pn));
                    var r = t.readByte(),
                        s = t.readByte();
                    r > s
                        ? ((e.winType = o.RoadPaper.WinType.RED_WIN),
                          (e.winNum = r))
                        : s > r
                            ? ((e.winType = o.RoadPaper.WinType.BLUE_WIN),
                              (e.winNum = s))
                            : ((e.winType = o.RoadPaper.WinType.TIE),
                              (e.winNum = s));
                    var n = (t.readByte(), t.readByte());
                    (e.redPair = 1 === (1 & n)),
                        (e.bluePair = (2 & n) >> 1 === 1),
                        this.beadList.push(e);
                }
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (o.Me = t), __reflect(t.prototype, 'VideoGameCore.BacBeadListResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.ret = t.readUnsignedInt());
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Ni = e), __reflect(e.prototype, 'VideoGameCore.BacBetCancelResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.code = t.readUTFBytes(Core.Pn)),
                    (this.bval = t.readByte()),
                    (this.pval = t.readByte()),
                    (this.bankerCardList = []);
                for (var e = 0; 3 > e; e++) {
                    var i = t.readUnsignedByte();
                    this.bankerCardList.push(i);
                }
                this.playerCardList = [];
                for (var e = 0; 3 > e; e++) {
                    var i = t.readUnsignedByte();
                    this.playerCardList.push(i);
                }
                this.overallRes = t.readUnsignedShort();
            }),
            Object.defineProperty(e.prototype, 'bead', {
                get: function() {
                    var t = new i.RoadPaper.BeadData();
                    return (
                        (t.gmcode = this.code),
                        this.bval > this.pval
                            ? ((t.winType = i.RoadPaper.WinType.RED_WIN),
                              (t.winNum = this.bval))
                            : this.bval < this.pval
                                ? ((t.winType = i.RoadPaper.WinType.BLUE_WIN),
                                  (t.winNum = this.pval))
                                : ((t.winType = i.RoadPaper.WinType.TIE),
                                  (t.winNum = this.pval)),
                        (t.redPair = (8 & this.overallRes) >> 3 === 1),
                        (t.bluePair = (16 & this.overallRes) >> 4 === 1),
                        t
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            (e.prototype.checkDragonBonus = function(t, e, i) {
                if (4 == t) {
                    if (e > i && (8 == e || 9 == e)) return !0;
                } else if (e - i >= 4) return !0;
            }),
            Object.defineProperty(e.prototype, 'winPlayTypes', {
                get: function() {
                    var t = [];
                    return (
                        ((1 & this.overallRes) >> 0 === 1 ||
                            (128 & this.overallRes) >> 7 === 1) &&
                            t.push(i.PLAYTYPE_BANKER),
                        (2 & this.overallRes) >> 1 === 1 &&
                            t.push(i.PLAYTYPE_PLAYER),
                        (4 & this.overallRes) >> 2 === 1 &&
                            t.push(i.PLAYTYPE_TIE),
                        (8 & this.overallRes) >> 3 === 1 &&
                            t.push(i.PLAYTYPE_BANKER_PAIR),
                        (16 & this.overallRes) >> 4 === 1 &&
                            t.push(i.PLAYTYPE_PLAYER_PAIR),
                        (32 & this.overallRes) >> 5 === 1 &&
                            t.push(i.PLAYTYPE_BIG),
                        (64 & this.overallRes) >> 6 === 1 &&
                            t.push(i.PLAYTYPE_SMALL),
                        (256 & this.overallRes) >> 8 === 1 &&
                            t.push(i.PLAYTYPE_BANKER_DRAGON_BONUS),
                        (512 & this.overallRes) >> 9 === 1 &&
                            t.push(i.PLAYTYPE_PLAYER_DRAGON_BONUS),
                        (1024 & this.overallRes) >> 10 === 1 &&
                            t.push(i.PLAYTYPE_SUPER_SIX),
                        (2048 & this.overallRes) >> 11 === 1 &&
                            t.push(i.PLAYTYPE_ANY_PAIR),
                        (4096 & this.overallRes) >> 12 === 1 &&
                            t.push(i.PLAYTYPE_PERFECT_PAIR),
                        t
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (i.yi = t), __reflect(t.prototype, 'VideoGameCore.BacGameResultExtResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.res = t.readByte()),
                    (this.code = t.readUTFBytes(Core.Pn)),
                    (this.bval = t.readByte()),
                    (this.pval = t.readByte()),
                    (this.num = t.readByte()),
                    (this.pair = t.readByte());
            }),
            Object.defineProperty(e.prototype, 'bead', {
                get: function() {
                    var t = new i.RoadPaper.BeadData();
                    return (
                        (t.redPair = (1 & this.pair) > 0),
                        (t.bluePair = (2 & this.pair) > 0),
                        this.bval > this.pval
                            ? ((t.winType = i.RoadPaper.WinType.RED_WIN),
                              (t.winNum = this.bval))
                            : this.bval < this.pval
                                ? ((t.winType = i.RoadPaper.WinType.BLUE_WIN),
                                  (t.winNum = this.pval))
                                : ((t.winType = i.RoadPaper.WinType.TIE),
                                  (t.winNum = this.pval)),
                        t
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(e.prototype, 'winPlayTypes', {
                get: function() {
                    var t = [],
                        e = this.bead;
                    switch (e.winType) {
                        case i.RoadPaper.WinType.RED_WIN:
                            t.push(i.PLAYTYPE_BANKER);
                            break;
                        case i.RoadPaper.WinType.BLUE_WIN:
                            t.push(i.PLAYTYPE_PLAYER);
                            break;
                        case i.RoadPaper.WinType.TIE:
                            t.push(i.PLAYTYPE_TIE);
                    }
                    return (
                        e.redPair && t.push(i.PLAYTYPE_BANKER_PAIR),
                        e.bluePair && t.push(i.PLAYTYPE_PLAYER_PAIR),
                        t
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (i.De = t), __reflect(t.prototype, 'VideoGameCore.BacGameResultResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.code = t.readInt()),
                    (this.table = t.readUTFBytes(Core.va)),
                    (this.seat = t.readByte());
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.mr = e), __reflect(e.prototype, 'VideoGameCore.ClientEnterTableResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.code = t.readUTFBytes(Core.Pn)),
                    (this.vid = t.readUTFBytes(Core._n)),
                    (this.card = t.readByte()),
                    (this.index = t.readByte()),
                    (this.who = t.readByte()),
                    (this.bankerCardList = []);
                for (var e = 0; 3 > e; e++) {
                    var i = t.readUnsignedByte();
                    this.bankerCardList.push(i);
                }
                this.playerCardList = [];
                for (var e = 0; 3 > e; e++) {
                    var i = t.readUnsignedByte();
                    this.playerCardList.push(i);
                }
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Ei = e), __reflect(e.prototype, 'VideoGameCore.DealCardListResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.card = t.readByte()),
                    (this.index = t.readByte()),
                    (this.show = 1 == t.readByte()),
                    (this.who = t.readByte()),
                    Core.ExternalData.showSocketLog &&
                        dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.qe = e), __reflect(e.prototype, 'VideoGameCore.DealCardResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                this.retCode = t.readInt();
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.wr = e), __reflect(e.prototype, 'VideoGameCore.EnterMultiTableResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.retCode = t.readInt());
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.nC = e), __reflect(e.prototype, 'VideoGameCore.MultiTableBetResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.gmcode = t.readUTFBytes(Core.Pn)),
                    (this.payout = t.readDouble()),
                    (this.balance = t.readDouble()),
                    (this.ptNum = t.readByte()),
                    (this.ptPayouts = []);
                for (var e, i = 0; i < this.ptNum; i++)
                    (e = new r.PlaytypePayout()),
                        (e.playtype = t.readByte()),
                        (e.value = t.readDouble()),
                        this.ptPayouts.push(e);
                Core.ExternalData.showSocketLog &&
                    dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (r.oC = t), __reflect(t.prototype, 'VideoGameCore.MultiTablePayoutResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.gmcode = t.readUTFBytes(Core.Pn)),
                    (this.span = t.readShort());
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.aC = e), __reflect(e.prototype, 'VideoGameCore.MultiTableStartResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                this.vid = t.readUTFBytes(Core._n);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Je = e), __reflect(e.prototype, 'VideoGameCore.RestShoecodeResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.gmCode = t.readUTFBytes(Core.Pn)),
                    (this.index = t.readByte()),
                    (this.forWho = t.readByte());
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Gi = e), __reflect(e.prototype, 'VideoGameCore.ShowCardResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                var e = t.length - 12,
                    i = t.readUTFBytes(e);
                Core.XMLReader.read(Core.parseXML(i))
                    .find('games')[0]
                    .find('game')
                    .forEach(this.parseGame, this);
            }),
            (e.prototype.parseGame = function(t) {
                var e,
                    i = new Core.HashMap();
                t.find('table').forEach(function(t) {
                    (e = new r()),
                        (e.tablecode = t.attr('code')),
                        (e.gametype = t.attr('gametype')),
                        (e.vid = t.attr('vid')),
                        i.set(e.tablecode, e);
                }, this),
                    (this.configMap = i);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.hC = e), __reflect(e.prototype, 'VideoGameCore.TableConfigResp');
    var r = (function() {
        function t() {}
        return t;
    })();
    (t.TableConfig = r), __reflect(r.prototype, 'VideoGameCore.TableConfig');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    function n(t) {
        for (var e = [], i = t.readByte(), r = 0; 15 > r; r++) {
            var s = t.readByte();
            i > r && e.push(s);
        }
        return e;
    }
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)), (this.infos = []);
                for (var e, i = t.readInt(), r = 0; i > r; r++)
                    (e = new s.RoadPaper.RoadBjData()),
                        (e.code = t.readUTFBytes(Core.Pn)),
                        (e.result = t.readByte()),
                        (e.point = t.readByte()),
                        (e.cardlist = n(t)),
                        this.infos.push(e);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (s.Ui = t),
        __reflect(t.prototype, 'VideoGameCore.BjBeadListResp'),
        (s.getBjResultCardlist = n);
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.code = t.readUTFBytes(Core.Pn)),
                    (this.info = new i.RoadPaper.RoadBjData()),
                    (this.info.code = this.code),
                    (this.info.result = t.readByte()),
                    (this.info.point = t.readByte()),
                    (this.info.cardlist = i.getBjResultCardlist(t));
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (i.Fi = t), __reflect(t.prototype, 'VideoGameCore.BjGameResultResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.handIndex = t.readByte()),
                        (this.errCode = t.readInt()),
                        (this.cmdType = t.readByte()),
                        Core.ExternalData.showSocketLog &&
                            dclib(egret.getQualifiedClassName(this), this);
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.Yi = e), __reflect(e.prototype, 'VideoGameCore.Bj.CommandMeResp');
    })((e = t.Bj || (t.Bj = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.handIndex = t.readByte()),
                        (this.cmdType = t.readByte()),
                        Core.ExternalData.showSocketLog &&
                            dclib(egret.getQualifiedClassName(this), this);
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.qi = e), __reflect(e.prototype, 'VideoGameCore.Bj.CommandOtherResp');
    })((e = t.Bj || (t.Bj = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.loginType = t.readByte()),
                        (this.seat = t.readByte()),
                        (this.seat = i.getBJValidSeatNum(this.seat)),
                        (this.retCode = t.readInt());
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.Di = e), __reflect(e.prototype, 'VideoGameCore.Bj.EnterTableResp');
    })((t = i.Bj || (i.Bj = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.gmcode = t.readUTFBytes(Core.Pn)),
                        (this.betAmount = t.readDouble()),
                        (this.winAmount = t.readDouble()),
                        Core.ExternalData.showSocketLog &&
                            dclib(egret.getQualifiedClassName(this), this);
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.Wi = e), __reflect(e.prototype, 'VideoGameCore.Bj.FinalPayoffResp');
    })((e = t.Bj || (t.Bj = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.gmcode = t.readUTFBytes(Core.Pn)),
                        (this.loginname = t.readUTFBytes(Core.la)),
                        (this.handIndex = t.readUnsignedByte());
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.tr = e),
            __reflect(e.prototype, 'VideoGameCore.Bj.GameBetCancelNoticeResp');
    })((e = t.Bj || (t.Bj = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.ret = t.readUnsignedInt());
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.$i = e),
            __reflect(e.prototype, 'VideoGameCore.Bj.GameBetCancelResp');
    })((e = t.Bj || (t.Bj = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(c) {
    var t;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.gmcode = t.readUTFBytes(Core.Pn)),
                        13 != this.gmcode.length && (this.gmcode = ''),
                        (this.status = t.readByte()),
                        (this.timeout = t.readByte()),
                        (this.max_timeout = t.readByte()),
                        (this.curHandIndex = t.readByte());
                    var e, i;
                    for (
                        e = t.readByte(), this.dealerCardlist = [], i = 0;
                        e > i;
                        i++
                    )
                        this.dealerCardlist.push(t.readByte());
                    this.playerHandData = new Core.HashMap();
                    var r, s, n, o, a, h, u;
                    for (r = t.readByte(), i = 0; r > i; i++)
                        for (
                            n = t.readByte(), s = t.readByte(), o = 0;
                            s > o;
                            o++
                        ) {
                            for (
                                h = new c.BjHandData(),
                                    h.handIndex =
                                        c.getBJHandIndexBySeatNum(n) + o,
                                    h.handStatus = t.readByte(),
                                    e = t.readByte(),
                                    u = [],
                                    a = 0;
                                e > a;
                                a++
                            )
                                u.push(t.readByte());
                            h.setCardList(u),
                                this.playerHandData.set(h.handIndex, h);
                        }
                    Core.ExternalData.showSocketLog &&
                        dclib(egret.getQualifiedClassName(this), this);
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.dt = e),
            __reflect(e.prototype, 'VideoGameCore.Bj.GameCurrentStatusResp');
    })((t = c.Bj || (c.Bj = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t;
    !(function(i) {
        var t = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.name = t.readUTFBytes(Core.la)),
                        (this.nick = t.readUTFBytes(Core.ma)),
                        (this.tableCode = t.readUTFBytes(Core.va)),
                        (this.tableCode = i.TableSeatStore.instance.tableCode),
                        (this.seatNum = t.readByte()),
                        (this.seatNum = r.getBJValidSeatNum(this.seatNum)),
                        (this.playType = t.readUnsignedByte()),
                        (this.betSeatNum = t.readByte()),
                        (this.value = t.readDouble()),
                        (this.left = t.readDouble()),
                        (this.currency = t.readUTFBytes(Core.Fa));
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (i.Re = t),
            __reflect(t.prototype, 'VideoGameCore.Bj.GameJettonExtResp');
    })((t = r.Bj || (r.Bj = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t;
    !(function(i) {
        var t = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.name = t.readUTFBytes(Core.la)),
                        (this.nick = t.readUTFBytes(Core.ma)),
                        (this.tableCode = t.readUTFBytes(Core.va)),
                        (this.tableCode = i.TableSeatStore.instance.tableCode),
                        (this.seatNum = t.readByte()),
                        (this.seatNum = r.getBJValidSeatNum(this.seatNum)),
                        (this.playType = t.readUnsignedByte()),
                        (this.betSeatNum = t.readByte()),
                        (this.value = t.readInt()),
                        (this.left = t.readDouble()),
                        (this.currency = t.readUTFBytes(Core.Fa));
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (i.Ie = t), __reflect(t.prototype, 'VideoGameCore.Bj.GameJettonResp');
    })((t = r.Bj || (r.Bj = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.roundNum = t.readByte()),
                        (this.kickNum = t.readByte());
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.Ne = e),
            __reflect(e.prototype, 'VideoGameCore.Bj.GameNoBetWarnResp');
    })((e = t.Bj || (t.Bj = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.gmcode = t.readUTFBytes(Core.Pn)),
                        (this.payout = t.readDouble()),
                        (this.balance = t.readDouble()),
                        (this.ptNum = t.readByte()),
                        (this.ptPayouts = []);
                    for (var e, i = 0; i < this.ptNum; i++)
                        (e = new r.PlaytypePayout()),
                            (e.betSeatNum = t.readUnsignedByte()),
                            (e.playtype = t.readUnsignedByte()),
                            (e.value = t.readDouble()),
                            this.ptPayouts.push(e);
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.je = e), __reflect(e.prototype, 'VideoGameCore.Bj.GamePayoutMeResp');
    })((t = r.Bj || (r.Bj = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.loginname = t.readUTFBytes(Core.la)),
                        (this.currency = t.readUTFBytes(Core.Fa)),
                        (this.credit = t.readDouble()),
                        (this.ptPayouts = []);
                    var e;
                    this.betNum = t.readByte();
                    for (var i = 0; i < this.betNum; i++)
                        (e = new r.PlaytypePayout()),
                            (e.betSeatNum = t.readUnsignedByte()),
                            (e.playtype = t.readUnsignedByte()),
                            (e.value = t.readDouble()),
                            this.ptPayouts.push(e);
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.Be = e),
            __reflect(e.prototype, 'VideoGameCore.Bj.GamePayoutOtherResp');
    })((t = r.Bj || (r.Bj = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.gmcode = t.readUTFBytes(Core.Pn));
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.Le = e), __reflect(e.prototype, 'VideoGameCore.Bj.GameStartResp');
    })((e = t.Bj || (t.Bj = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    this.betPoolInfos = [];
                    t.readUTFBytes(Core._n);
                    this.betSeatNum = t.readByte();
                    for (var e = t.readShort(), i = 0; e > i; i++) {
                        var r = new s.BetPoolInfo();
                        (r.betSeatNum = this.betSeatNum),
                            (r.loginname = t.readUTFBytes(Core.la)),
                            (r.nickname = t.readUTFBytes(Core.ma)),
                            (r.tableCode = t.readUTFBytes(Core.va)),
                            (r.currency = t.readUTFBytes(Core.Fa)),
                            (r.seatNum = s.getBJValidSeatNum(t.readByte())),
                            (r.playType = t.readUnsignedByte()),
                            (r.amount = t.readDouble()),
                            this.betPoolInfos.push(r);
                    }
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.xe = e),
            __reflect(e.prototype, 'VideoGameCore.Bj.GameTablePoolResp');
    })((t = s.Bj || (s.Bj = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.retCode = t.readInt()),
                        (this.seatNum = t.readByte()),
                        Core.ExternalData.showSocketLog &&
                            dclib(egret.getQualifiedClassName(this), this);
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.Ji = e), __reflect(e.prototype, 'VideoGameCore.Bj.InsuranceResp');
    })((e = t.Bj || (t.Bj = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.gmcode = t.readUTFBytes(Core.Pn)),
                        (this.handIndex = t.readByte()),
                        (this.card = t.readByte()),
                        Core.ExternalData.showSocketLog &&
                            dclib(egret.getQualifiedClassName(this), this);
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.Zi = e), __reflect(e.prototype, 'VideoGameCore.Bj.RecevieCardResp');
    })((e = t.Bj || (t.Bj = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(o) {
    var t;
    !(function(n) {
        var t = (function(e) {
            function t() {
                var t = (null !== e && e.apply(this, arguments)) || this;
                return (t.vid = ''), (t.action = 0), t;
            }
            return (
                __extends(t, e),
                (t.prototype.$ = function(t) {
                    var e = 1;
                    switch (this.respId) {
                        case o.BJ_PLAYER_ENTRY_LEAVE:
                            this.action = t.readByte();
                            break;
                        case o.BJ_USER_LIST:
                            (this.vid = t.readUTFBytes(Core._n)),
                                (this.action = 2),
                                (e = t.readInt());
                    }
                    this.players = [];
                    for (var i = 0; e > i; i++) {
                        var r = t.readUTFBytes(Core.la),
                            s = new o.TableSeatPlayer(r);
                        (s.nickname = t.readUTFBytes(Core.ma)),
                            (s.sex = t.readUnsignedByte()),
                            (s.vid = t.readUTFBytes(Core._n)),
                            '' != this.vid && (s.vid = this.vid),
                            (s.tableCode = t.readUTFBytes(Core.va)),
                            (s.tableCode = n.TableSeatStore.instance.tableCode),
                            (s.seat = t.readByte()),
                            (s.action = t.readByte()),
                            0 == this.action
                                ? 1 == s.action &&
                                  (s.seat = o.getBJValidSeatNum(s.seat))
                                : (s.action = this.action),
                            (s.currency = t.readUTFBytes(Core.Fa)),
                            (s.credit = t.readDouble()),
                            this.players.push(s);
                    }
                }),
                t
            );
        })(Core.Network.ResponseBase);
        (n.We = t), __reflect(t.prototype, 'VideoGameCore.Bj.UserPositionResp');
    })((t = o.Bj || (o.Bj = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.num = t.readUnsignedInt()),
                    (this.beadList = []);
                for (var e = 0; e < this.num; e++) {
                    var i = new r.RoadPaper.RoadBullData();
                    (i.gm_code = t.readUTFBytes(Core.Pn)),
                        (i.res = t.readByte()),
                        (i.banker_point = t.readByte()),
                        (i.player_1_point = t.readByte()),
                        (i.player_2_point = t.readByte()),
                        (i.player_3_point = t.readByte()),
                        this.beadList.push(i);
                }
                Core.ExternalData.showSocketLog &&
                    dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (r.ir = t), __reflect(t.prototype, 'VideoGameCore.BullBeadListResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.code = t.readUTFBytes(Core.Pn)),
                    (this.result = t.readByte()),
                    (this.beadData = new i.RoadPaper.RoadBullData()),
                    (this.beadData.gm_code = this.code),
                    (this.beadData.res = this.result),
                    (this.beadData.banker_point = t.readByte()),
                    (this.beadData.player_1_point = t.readByte()),
                    (this.beadData.player_2_point = t.readByte()),
                    (this.beadData.player_3_point = t.readByte()),
                    Core.ExternalData.showSocketLog &&
                        dclib(egret.getQualifiedClassName(this), this);
            }),
            Object.defineProperty(e.prototype, 'winPlayTypes', {
                get: function() {
                    var t = [this.result];
                    return t;
                },
                enumerable: !0,
                configurable: !0
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (i.sr = t), __reflect(t.prototype, 'VideoGameCore.BullBeadResultResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.table = t.readUTFBytes(Core.va)),
                        (this.loginname = t.readUTFBytes(Core.la)),
                        (this.currency = t.readUTFBytes(Core.Fa));
                    var e = t.readUnsignedShort();
                    this.betInfos = [];
                    for (var i = 0; e > i; i++) {
                        var r = t.readUnsignedByte(),
                            s = t.readUnsignedInt(),
                            n = { playtype: r, total_jetton_cny: s };
                        this.betInfos.push(n);
                    }
                    Core.ExternalData.showSocketLog &&
                        dclib(egret.getQualifiedClassName(this), this);
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.or = e),
            __reflect(e.prototype, 'VideoGameCore.Bull.BullExistBetListResp');
    })((e = t.Bull || (t.Bull = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.gmtype = t.readUTFBytes(Core.bn)),
                        (this.status = t.readByte()),
                        (this.gmcode = t.readUTFBytes(Core.Pn)),
                        13 != this.gmcode.length && (this.gmcode = ''),
                        (this.vipStatus = t.readByte()),
                        (this.subscribeType = t.readByte()),
                        (this.bcards = []);
                    for (var e = 0; 3 > e; e++)
                        this.bcards.push(t.readUnsignedByte());
                    this.bShowCards = [];
                    for (var e = 0; 3 > e; e++)
                        this.bShowCards.push(t.readBoolean());
                    this.pcards = [];
                    for (var e = 0; 3 > e; e++)
                        this.pcards.push(t.readUnsignedByte());
                    this.pShowCards = [];
                    for (var e = 0; 3 > e; e++)
                        this.pShowCards.push(t.readBoolean());
                    (this.whoMiCard = t.readByte()),
                        (this.timeout = t.readShort()),
                        (this.miCardTimeout = t.readShort()),
                        (this.shoeCode = t.readInt()),
                        (this.isShared = t.readBoolean()),
                        (this.isPasswd = t.readBoolean()),
                        (this.bColor = t.readByte()),
                        Core.ExternalData.showSocketLog &&
                            dclib(egret.getQualifiedClassName(this), this);
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.dt = e),
            __reflect(e.prototype, 'VideoGameCore.Cbac.GameCurrentStatusResp');
    })((e = t.Cbac || (t.Cbac = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(n) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.num = t.readInt()),
                    (this.beadList = []);
                for (var e, i = 0; i < this.num; i++) {
                    (e = new n.RoadPaper.BeadData()),
                        (e.gmcode = t.readUTFBytes(Core.Pn));
                    var r = t.readByte(),
                        s = t.readByte();
                    r > s
                        ? ((e.winType = n.RoadPaper.WinType.RED_WIN),
                          (e.winNum = r))
                        : s > r
                            ? ((e.winType = n.RoadPaper.WinType.BLUE_WIN),
                              (e.winNum = s))
                            : ((e.winType = n.RoadPaper.WinType.TIE),
                              (e.winNum = s)),
                        this.beadList.push(e);
                }
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (n.ur = t), __reflect(t.prototype, 'VideoGameCore.DtBeadListResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.code = t.readUTFBytes(Core.Pn)),
                    (this.vid = t.readUTFBytes(Core._n)),
                    (this.card = t.readByte()),
                    (this.index = t.readByte()),
                    (this.who = t.readByte()),
                    (this.dragonCard = t.readByte()),
                    (this.tigerCard = t.readByte());
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Cr = e), __reflect(e.prototype, 'VideoGameCore.DtDealCardListResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.code = t.readUTFBytes(Core.Pn)),
                    (this.dval = t.readByte()),
                    (this.tval = t.readByte());
            }),
            Object.defineProperty(e.prototype, 'bead', {
                get: function() {
                    var t = new i.RoadPaper.BeadData();
                    return (
                        (t.gmcode = this.code),
                        this.dval > this.tval
                            ? ((t.winType = i.RoadPaper.WinType.RED_WIN),
                              (t.winNum = this.dval))
                            : this.dval < this.tval
                                ? ((t.winType = i.RoadPaper.WinType.BLUE_WIN),
                                  (t.winNum = this.tval))
                                : ((t.winType = i.RoadPaper.WinType.TIE),
                                  (t.winNum = this.tval)),
                        t
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(e.prototype, 'winPlayTypes', {
                get: function() {
                    var t = [],
                        e = this.bead;
                    switch (e.winType) {
                        case i.RoadPaper.WinType.RED_WIN:
                            t.push(i.PLAYTYPE_DRAGON);
                            break;
                        case i.RoadPaper.WinType.BLUE_WIN:
                            t.push(i.PLAYTYPE_TIGER);
                            break;
                        case i.RoadPaper.WinType.TIE:
                            t.push(i.PLAYTYPE_DT_TIE);
                    }
                    return t;
                },
                enumerable: !0,
                configurable: !0
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (i.cr = t), __reflect(t.prototype, 'VideoGameCore.DtGameResultResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.playerNum = t.readByte()),
                        (this.seatInfoArray = new Array());
                    for (var e, i = 0; i < this.playerNum; i++)
                        (e = new r()),
                            (e.serverId = t.readInt()),
                            (e.userName = t.readUTFBytes(Core.la)),
                            (e.nickName = t.readUTFBytes(Core.ma)),
                            (e.account = t.readDouble()),
                            (e.seat = t.readByte()),
                            (e.playtype = t.readByte()),
                            (e.currency = t.readUTFBytes(Core.Fa)),
                            (e.frate = t.readFloat()),
                            this.seatInfoArray.push(e);
                }),
                (e.prototype.getDisplayName = function(i) {
                    var r = '***';
                    return (
                        this.seatInfoArray &&
                            this.seatInfoArray.forEach(function(t) {
                                if (t.userName == i) {
                                    var e = t.nickName;
                                    r =
                                        e.length > 3
                                            ? '***' + e.substring(e.length - 3)
                                            : '***' + e.substring(e.length - 1);
                                }
                            }, this),
                        r
                    );
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.gr = e), __reflect(e.prototype, 'VideoGameCore.Led.ClientListResp');
        var r = (function() {
            function t() {}
            return t;
        })();
        (t.SeatInfo = r), __reflect(r.prototype, 'VideoGameCore.Led.SeatInfo');
    })((e = t.Led || (t.Led = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.loginname = t.readUTFBytes(Core.la)),
                        (this.nickname = this.loginname),
                        (this.seat = t.readByte()),
                        (this.tableCode = i.getVipTableCodeFromVid(this.vid));
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.gi = e),
            __reflect(e.prototype, 'VideoGameCore.Led.ContractPersonResp');
    })((t = i.Led || (i.Led = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.username = t.readUTFBytes(Core.la)),
                        (this.nickname = t.readUTFBytes(Core.ma)),
                        (this.result = t.readUnsignedInt());
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.Vr = e),
            __reflect(e.prototype, 'VideoGameCore.Led.CutShoeConfirmedResp');
    })((e = t.Led || (t.Led = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.username = t.readUTFBytes(Core.la)),
                        (this.nickname = t.readUTFBytes(Core.ma)),
                        (this.seatNum = t.readByte()),
                        (this.color = t.readByte()),
                        (this.shoeCutFlag = t.readByte()),
                        (this.cutRate = t.readFloat()),
                        (this.timeout = t.readByte());
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.br = e), __reflect(e.prototype, 'VideoGameCore.Led.CutShoeInfoResp');
    })((e = t.Led || (t.Led = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.username = t.readUTFBytes(Core.la)),
                        (this.nickname = t.readUTFBytes(Core.ma)),
                        (this.color = t.readByte()),
                        (this.timeout = t.readByte());
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t._r = e),
            __reflect(e.prototype, 'VideoGameCore.Led.CutShoeStartResp');
    })((e = t.Led || (t.Led = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(r) {
        var t = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.dealerName = t.readUTFBytes(Core.la)),
                        (this.beginTime = t.readUTFBytes(8)),
                        (this.endTime = t.readUTFBytes(8)),
                        (this.count = t.readByte()),
                        (this.data = []);
                    for (var e, i = 0; i < this.count; i++)
                        (e = new r.DealerTipsRecord()),
                            (e.userName = t.readUTFBytes(Core.la)),
                            (e.nickName = t.readUTFBytes(Core.ma)),
                            (e.num = t.readDouble()),
                            (e.billTime = t.readUTFBytes(19)),
                            (e.currency = t.readUTFBytes(Core.Fa)),
                            this.data.push(e);
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (r.Bi = t),
            __reflect(t.prototype, 'VideoGameCore.Led.DealerTipsHistResp');
    })((e = t.Led || (t.Led = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function() {
            function t() {}
            return t;
        })();
        (t.DealerTipsRecord = e),
            __reflect(e.prototype, 'VideoGameCore.Led.DealerTipsRecord');
    })((e = t.Led || (t.Led = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.userName = t.readUTFBytes(Core.la)),
                        (this.nickName = t.readUTFBytes(Core.ma)),
                        (this.amount = t.readDouble()),
                        (this.seatNum = t.readByte()),
                        (this.currency = t.readUTFBytes(Core.Fa)),
                        (this.currencyRate = t.readFloat());
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.Li = e), __reflect(e.prototype, 'VideoGameCore.Led.DealerTipsResp');
    })((e = t.Led || (t.Led = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.code = t.readInt()),
                        (this.leftJetton = t.readDouble());
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.Ii = e),
            __reflect(e.prototype, 'VideoGameCore.Led.FeeForDealerResp');
    })((e = t.Led || (t.Led = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.userName = t.readUTFBytes(Core.la)),
                        (this.seatNum = t.readByte()),
                        (this.btnStatus = t.readByte());
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.mi = e),
            __reflect(e.prototype, 'VideoGameCore.Led.FuncButtonStatusResp');
    })((e = t.Led || (t.Led = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.gmtype = t.readUTFBytes(Core.bn)),
                        (this.status = t.readByte()),
                        (this.gmcode = t.readUTFBytes(Core.Pn)),
                        13 != this.gmcode.length && (this.gmcode = ''),
                        (this.vipStatus = t.readByte()),
                        (this.subscribeType = t.readByte()),
                        (this.bcards = []);
                    for (var e = 0; 3 > e; e++)
                        this.bcards.push(t.readUnsignedByte());
                    this.bShowCards = [];
                    for (var e = 0; 3 > e; e++)
                        this.bShowCards.push(t.readUnsignedByte());
                    this.pcards = [];
                    for (var e = 0; 3 > e; e++)
                        this.pcards.push(t.readUnsignedByte());
                    this.pShowCards = [];
                    for (var e = 0; 3 > e; e++)
                        this.pShowCards.push(t.readUnsignedByte());
                    (this.whoMiCard = t.readByte()),
                        (this.miTimeout = t.readShort()),
                        (this.miCardTimeout = t.readShort()),
                        (this.shoeCode = t.readInt()),
                        (this.isShared = t.readBoolean()),
                        (this.isPasswd = t.readBoolean()),
                        (this.bColor = t.readByte()),
                        (this.timeout = t.readShort()),
                        (this.max_timeout = t.readShort()),
                        Core.ExternalData.showSocketLog &&
                            dclib(egret.getQualifiedClassName(this), this);
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.dt = e),
            __reflect(e.prototype, 'VideoGameCore.Led.GameCurrentStatusResp');
    })((e = t.Led || (t.Led = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.timeout = t.readByte()),
                        (this.code = t.readInt()),
                        (this.playerNum = t.readByte()),
                        (this.seatInfoList = new Array());
                    for (var e, i = 0; i < this.playerNum; i++)
                        (e = new r()),
                            (e.playerName = t.readUTFBytes(Core.la)),
                            (e.seat = t.readByte()),
                            this.seatInfoList.push(e);
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.vr = e), __reflect(e.prototype, 'VideoGameCore.Led.LastCallResp');
        var r = (function() {
            function t() {}
            return t;
        })();
        (t.SeatLiteInfo = r),
            __reflect(r.prototype, 'VideoGameCore.Led.SeatLiteInfo');
    })((e = t.Led || (t.Led = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.name = t.readUTFBytes(Core.la)),
                        (this.nick = t.readUTFBytes(Core.ma)),
                        (this.sex = t.readByte()),
                        (this.isReconnect = 0 != t[t.position]),
                        (this.table = t.readUTFBytes(Core.va)),
                        (this.seat = t.readByte()),
                        (this.isReconnect = this.isReconnect && 0 != this.seat),
                        (this.currency = t.readUTFBytes(Core.Fa)),
                        (this.left = t.readDouble()),
                        (this.action = 2),
                        (this.tableCode = this.table),
                        (this.loginname = this.name),
                        (this.nickname = this.nick),
                        (this.credit = this.left);
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.lr = e),
            __reflect(e.prototype, 'VideoGameCore.Led.LastSeatInfoResp');
    })((e = t.Led || (t.Led = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function() {
            function t() {}
            return t;
        })();
        (t.LiteSeatInfo = e),
            __reflect(e.prototype, 'VideoGameCore.Led.LiteSeatInfo');
    })((e = t.Led || (t.Led = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.playerName = t.readUTFBytes(Core.la)),
                        (this.bankerName = t.readUTFBytes(Core.la)),
                        (this.pJetton = t.readUnsignedInt()),
                        (this.bJetton = t.readUnsignedInt()),
                        (this.pSeatNum = t.readByte()),
                        (this.bSeatNum = t.readByte()),
                        (this.pCurrency = t.readUTFBytes(Core.Fa)),
                        (this.pFrate = t.readFloat()),
                        (this.bCurrency = t.readUTFBytes(Core.Fa)),
                        (this.bFrate = t.readFloat());
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.hi = e),
            __reflect(e.prototype, 'VideoGameCore.Led.NotifyTurnCardResp');
    })((e = t.Led || (t.Led = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(s) {
        var t = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.playerNum = 0),
                        (this.seat1 = t.readByte()),
                        (this.playerNum += this.seat1),
                        (this.seat2 = t.readByte()),
                        (this.playerNum += this.seat2),
                        (this.seat3 = t.readByte()),
                        (this.playerNum += this.seat3),
                        (this.seat4 = t.readByte()),
                        (this.playerNum += this.seat4),
                        (this.seat5 = t.readByte()),
                        (this.playerNum += this.seat5),
                        (this.seat6 = t.readByte()),
                        (this.playerNum += this.seat6),
                        (this.seat7 = t.readByte()),
                        (this.playerNum += this.seat7);
                    var e = t.readByte();
                    this.liteSeatInfoList = new Array();
                    for (var i, r = 0; e > r; r++)
                        (i = new s.LiteSeatInfo()),
                            (i.nickName = t.readUTFBytes(Core.ma)),
                            (i.seat = t.readByte()),
                            this.liteSeatInfoList.push(i);
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (s.Mf = t), __reflect(t.prototype, 'VideoGameCore.Led.SeatStatusResp');
    })((e = t.Led || (t.Led = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.playerName = t.readUTFBytes(Core.la)),
                        (this.code = t.readInt()),
                        (this.seatNum = t.readByte()),
                        (this.stopBet = t.readByte()),
                        (this.seat1 = t.readByte()),
                        (this.seat2 = t.readByte()),
                        (this.seat3 = t.readByte()),
                        (this.seat4 = t.readByte()),
                        (this.seat5 = t.readByte()),
                        (this.seat6 = t.readByte()),
                        (this.seat7 = t.readByte());
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.Gr = e),
            __reflect(e.prototype, 'VideoGameCore.Led.TurnCardCommandResp');
    })((e = t.Led || (t.Led = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.playerName = t.readUTFBytes(Core.la)),
                        (this.bankerName = t.readUTFBytes(Core.la)),
                        (this.seatNum = t.readByte()),
                        (this.which = t.readByte()),
                        (this.timeout = t.readByte());
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.ui = e),
            __reflect(e.prototype, 'VideoGameCore.Led.TurnCardPersonResp');
    })((e = t.Led || (t.Led = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    this.vidLimitSet = t.readUTFBytes(Core._n + 1);
                    var e = t.readUnsignedByte();
                    this.limitList = new Core.HashMap();
                    for (var i, r = 0; e > r; r++)
                        (i = new s.BetLimit()),
                            (i.playtype = t.readUnsignedByte()),
                            (i.min = t.readInt()),
                            0 == i.min && (i.min = 0.5),
                            (i.max = t.readInt()),
                            this.limitList.set(i.playtype, i);
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.VipVideoLimitSet = e),
            __reflect(e.prototype, 'VideoGameCore.Led.VipVideoLimitSet');
    })((t = s.Led || (s.Led = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.retCode = t.readInt());
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Sr = e), __reflect(e.prototype, 'VideoGameCore.MultiBacGameBetResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.gmcode = t.readUTFBytes(Core.Pn)),
                    (this.payout = t.readDouble()),
                    (this.balance = t.readDouble()),
                    (this.ptNum = t.readByte()),
                    (this.ptPayouts = []);
                for (var e, i = 0; i < this.ptNum; i++)
                    (e = new r.PlaytypePayout()),
                        (e.playtype = t.readByte()),
                        (e.value = t.readDouble()),
                        this.ptPayouts.push(e);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (r.xr = t), __reflect(t.prototype, 'VideoGameCore.MultiGamePayoutResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(o) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.gmcode = t.readUTFBytes(Core.Pn)),
                    (this.currency = t.readUTFBytes(Core.Fa)),
                    (this.payout = t.readDouble()),
                    (this.balance = t.readDouble()),
                    (this.ptNum = t.readByte()),
                    (this.ptPayouts = []);
                for (var e, i = 0; i < this.ptNum; i++) {
                    var r,
                        s = [];
                    (e = new o.PlaytypePayout()), (e.playtype = t.readByte());
                    for (var n = 0; 12 > n; n++) (r = t.readByte()), s.push(r);
                    (e.value = t.readDouble()), this.ptPayouts.push(e);
                }
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (o.Tr = t), __reflect(t.prototype, 'VideoGameCore.MultiGameRouPayoutResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.gmcode = t.readUTFBytes(Core.Pn)),
                    (this.span = t.readShort());
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.zr = e), __reflect(e.prototype, 'VideoGameCore.MultiGameStartResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.retCode = t.readInt());
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.yr = e), __reflect(e.prototype, 'VideoGameCore.MultiRouGameBetResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vidCount = t.readInt()), (this.vids = []);
                for (var e = 0; e < this.vidCount; e++) {
                    var i = t.readUTFBytes(Core._n);
                    this.vids.push(i);
                }
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Lr = e), __reflect(e.prototype, 'VideoGameCore.RoadSelectVideosResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vidCount = t.readInt()), (this.vidStatusInfos = []);
                for (var e = 0; e < this.vidCount; e++) {
                    var i = new r();
                    (i.vid = t.readUTFBytes(Core._n)),
                        (i.status = t.readByte()),
                        (i.timeout = t.readShort()),
                        (i.max_timeout = t.readShort()),
                        (i.last_res = t.readByte()),
                        this.vidStatusInfos.push(i);
                }
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Br = e),
        __reflect(e.prototype, 'VideoGameCore.VideoStatusInfoBundleResp');
    var r = (function() {
        function t() {}
        return t;
    })();
    (t.VideoStatusInfo = r),
        __reflect(r.prototype, 'VideoGameCore.VideoStatusInfo');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.anchorID = t.readUTFBytes(Core.Vu)),
                    (this.vid = t.readUTFBytes(Core._n)),
                    (this.gmCode = t.readUTFBytes(Core.Pn)),
                    (this.balance = t.readDouble());
                var e = {};
                (e.playType = t.readUnsignedByte()),
                    (e.jetton = t.readUnsignedInt()),
                    (e.jettonCNY = t.readDouble()),
                    (this.betInfo = e),
                    (this.currency = t.readUTFBytes(Core.Fa)),
                    Core.ExternalData.showSocketLog &&
                        dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.hs = e), __reflect(e.prototype, 'VideoGameCore.AnchorBetInfoResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.roomId = t.readUTFBytes(Core.gu)),
                    (this.anchid = t.readUTFBytes(Core.Vu));
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Jr = e), __reflect(e.prototype, 'VideoGameCore.AnchorChangeNotifyResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.anchid = t.readUTFBytes(Core.Vu)),
                    (this.vidCount = t.readInt()),
                    (this.vids = []);
                for (var e = 0; e < this.vidCount; e++) {
                    var i = t.readUTFBytes(4);
                    this.vids.push(i);
                }
                Core.ExternalData.showSocketLog &&
                    dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Yr = e),
        __reflect(e.prototype, 'VideoGameCore.AnchorChangeVideoNotifyResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                var e = t.readUTFBytes(t.length - 12);
                (this.retObj = JSON.parse(e)),
                    Core.ExternalData.showSocketLog &&
                        dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Fr = e), __reflect(e.prototype, 'VideoGameCore.AnchorChatLoginResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.num = t.readUnsignedInt()),
                    (this.chipSetMap = new Core.HashMap());
                for (var e, i = 0; i < this.num; i++)
                    (e = new r.ChipSet()),
                        (e.gametype = t.readUTFBytes(5)),
                        e.formatChipSet(t.readUTFBytes(100)),
                        this.chipSetMap.set(e.gametype, e);
                Core.ExternalData.showSocketLog &&
                    dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (r.$f = t), __reflect(t.prototype, 'VideoGameCore.AnchorChipSetListResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                var e;
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.gmCode = t.readUTFBytes(Core.Pn)),
                    (this.currency = t.readUTFBytes(Core.Fa)),
                    (e = t.readUnsignedShort()),
                    (this.betInfo = Array(e));
                for (var i = 0; e > i; i++) {
                    var r = {};
                    (r.playType = t.readUnsignedByte()),
                        (r.jetton = t.readDouble()),
                        (this.betInfo[i] = r);
                }
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.vs = e),
        __reflect(e.prototype, 'VideoGameCore.AnchorExistingBetInfoResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.gmcode = t.readUTFBytes(Core.Pn)),
                    (this.currency = t.readUTFBytes(Core.Fa));
                var e = t.readUnsignedShort();
                this.betInfo = [];
                for (var i = 0; e > i; i++) {
                    var r = {};
                    (r.playType = t.readByte()), (r.nums = []);
                    for (var s = 0; s < Core.Pu; s++) {
                        var n = t.readByte();
                        n >= 0 && r.nums.push(n);
                    }
                    (r.jetton = t.readDouble()), this.betInfo.push(r);
                }
                Core.ExternalData.showSocketLog &&
                    dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.ks = e),
        __reflect(e.prototype, 'VideoGameCore.AnchorExistingValbetInfoResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.username = t.readUTFBytes(Core.la)),
                    (this.vid = t.readUTFBytes(Core._n)),
                    (this.gmcode = t.readUTFBytes(Core.Pn)),
                    (this.left = t.readDouble()),
                    (this.play_type = t.readUnsignedShort()),
                    (this.jetton = t.readDouble()),
                    (this.jettonCNY = t.readDouble()),
                    (this.currency = t.readUTFBytes(Core.Fa));
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.rs = e),
        __reflect(e.prototype, 'VideoGameCore.AnchorGameBetInfoExtResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.gmcode = t.readUTFBytes(Core.Pn)),
                    (this.currency = t.readUTFBytes(Core.Fa)),
                    (this.payout = t.readDouble()),
                    (this.payoutCNY = t.readDouble()),
                    (this.balance = t.readDouble()),
                    (this.ptNum = t.readByte()),
                    (this.ptPayouts = []),
                    (this.payoutsMap = new Core.HashMap());
                for (var e, i = 0; i < this.ptNum; i++)
                    (e = new r.PlaytypePayout()),
                        (e.playtype = t.readUnsignedByte()),
                        (e.value = t.readDouble()),
                        (e.valueCNY = t.readDouble()),
                        this.ptPayouts.push(e),
                        this.payoutsMap.set(e.playtype, e);
                Core.ExternalData.showSocketLog &&
                    dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (r.us = t), __reflect(t.prototype, 'VideoGameCore.AnchorGamePayoutResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                var e = t.readUTFBytes(t.length - Core._u);
                (this.jsonObj = JSON.parse(e)),
                    (this.anchorList = []),
                    (this.anchorRoomMap = new Core.HashMap());
                for (var i = 0; i < this.jsonObj.list.length; i++)
                    for (
                        var r = this.jsonObj.list[i],
                            s = r.hosts,
                            n = r.roomId,
                            o = 0;
                        o < s.length;
                        o++
                    ) {
                        var a = s[o];
                        a &&
                            (this.anchorList.push(a),
                            this.anchorRoomMap.set(a, n));
                    }
                Core.ExternalData.showSocketLog &&
                    dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Xf = e), __reflect(e.prototype, 'VideoGameCore.AnchorInfoListResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.anchorID = t.readUTFBytes(Core.Vu)),
                    (this.vid = t.readUTFBytes(Core._n)),
                    (this.gmcode = t.readUTFBytes(Core.Pn)),
                    (this.currency = t.readUTFBytes(Core.Fa)),
                    (this.payout = t.readDouble()),
                    (this.payoutCNY = t.readDouble()),
                    (this.balance = t.readDouble()),
                    (this.ptNum = t.readByte()),
                    (this.ptPayouts = []),
                    (this.payoutsMap = new Core.HashMap());
                for (var e, i = 0; i < this.ptNum; i++)
                    (e = new r.PlaytypePayout()),
                        (e.playtype = t.readUnsignedByte()),
                        (e.value = t.readDouble()),
                        (e.valueCNY = t.readDouble()),
                        this.ptPayouts.push(e),
                        this.payoutsMap.set(e.playtype, e);
                Core.ExternalData.showSocketLog &&
                    dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (r.ms = t), __reflect(t.prototype, 'VideoGameCore.AnchorJettonResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                var e;
                (this.anchid = t.readUTFBytes(Core.Vu)),
                    (this.vid = t.readUTFBytes(Core._n)),
                    (this.gmCode = t.readUTFBytes(Core.Pn)),
                    (this.currency = t.readUTFBytes(Core.Fa)),
                    (e = t.readUnsignedShort()),
                    (this.betInfo = new Array(e));
                for (var i = 0; e > i; i++) {
                    var r = {};
                    (r.playType = t.readUnsignedByte()),
                        (r.jetton = t.readDouble()),
                        (r.jettonCNY = t.readDouble()),
                        (this.betInfo[i] = r);
                }
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Vs = e),
        __reflect(e.prototype, 'VideoGameCore.AnchorListExistingBetResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.count = t.readUnsignedInt()),
                    (this.anchorFollowerList = []);
                for (var e = 0; e < this.count; e++) {
                    var i = {};
                    (i.platformType = t.readUTFBytes(Core.pu)),
                        (i.anchorName = t.readUTFBytes(Core.Vu)),
                        (i.followerCount = t.readUnsignedInt()),
                        this.anchorFollowerList.push(i);
                }
                Core.ExternalData.showSocketLog &&
                    dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Zf = e), __reflect(e.prototype, 'VideoGameCore.AnchorListFollowersResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.count = t.readUnsignedInt()), (this.anchorList = []);
                for (var e = 0; e < this.count; e++) {
                    var i = {};
                    (i.anchorName = t.readUTFBytes(Core.Vu)),
                        (i.followerCount = t.readUnsignedInt()),
                        this.anchorList.push(i);
                }
                Core.ExternalData.showSocketLog &&
                    dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.qf = e),
        __reflect(e.prototype, 'VideoGameCore.AnchorListInGameBundleResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(n) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.anchid = t.readUTFBytes(Core.Vu)),
                    (this.vid = t.readUTFBytes(Core._n)),
                    (this.gmcode = t.readUTFBytes(Core.Pn)),
                    (this.currency = t.readUTFBytes(Core.Fa)),
                    (this.payout = t.readDouble()),
                    (this.payoutCNY = t.readDouble()),
                    (this.balance = t.readDouble()),
                    (this.ptNum = t.readByte()),
                    (this.ptPayouts = []);
                for (var e, i = 0; i < this.ptNum; i++) {
                    (e = new n.PlaytypePayout()),
                        (e.playtype = t.readByte()),
                        (e.nums = []);
                    for (var r = 0; r < Core.Pu; r++) {
                        var s = t.readByte();
                        s >= 0 && e.nums.push(s);
                    }
                    (e.value = t.readDouble()),
                        (e.valueCNY = t.readDouble()),
                        this.ptPayouts.push(e);
                }
                Core.ExternalData.showSocketLog &&
                    dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (n.Os = t), __reflect(t.prototype, 'VideoGameCore.AnchorListRouJettonResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.anchorName = t.readUTFBytes(Core.Vu)),
                    (this.liveVid = t.readUTFBytes(Core._n)),
                    (this.ingameFlag = t.readByte()),
                    (this.vidCount = t.readUnsignedInt()),
                    (this.vidList = []);
                for (var e = 0; e < this.vidCount; e++) {
                    var i = t.readUTFBytes(Core._n);
                    this.vidList.push(i);
                }
                Core.ExternalData.showSocketLog &&
                    dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Yf = e), __reflect(e.prototype, 'VideoGameCore.AnchorListStatusResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                this.anchorID = t.readUTFBytes(Core.Vu);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Wr = e),
        __reflect(e.prototype, 'VideoGameCore.AnchorLoseConnNotifyResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                var e;
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.gmCode = t.readUTFBytes(Core.Pn));
                var e = t.readUnsignedShort();
                this.betInfo = Array(e);
                for (var i = 0; e > i; i++) {
                    var r = {};
                    (r.playType = t.readUnsignedByte()),
                        (r.jettonCNY = t.readDouble()),
                        (r.jetton =
                            r.jettonCNY *
                            s.VideoPlazaStore.instance.currencyRate),
                        (this.betInfo[i] = r);
                }
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (s._s = t),
        __reflect(t.prototype, 'VideoGameCore.AnchorOtherFollowersBetsResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.anchorID = t.readUTFBytes(Core.Vu)),
                    (this.vid = t.readUTFBytes(Core._n)),
                    (this.totalAmount = t.readDouble()),
                    (this.totalPlayer = t.readUnsignedShort()),
                    (this.totalBetPlayer = t.readUnsignedShort()),
                    (this.playInfoCount = t.readUnsignedInt()),
                    (this.playInfos = []),
                    (this.playInfoMap = new Core.HashMap());
                for (var e = 0; e < this.playInfoCount; e++) {
                    var i = {};
                    (i.playType = t.readUnsignedByte()),
                        (i.playerNum = t.readUnsignedShort()),
                        (i.betCredit = t.readDouble()),
                        this.playInfos.push(i),
                        this.playInfoMap.set(i.playType, i);
                }
                Core.ExternalData.showSocketLog &&
                    dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.ns = e), __reflect(e.prototype, 'VideoGameCore.AnchorRealtimeInfoResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.retCode = t.readUnsignedInt());
            }),
            e
        );
    })(t.Oe);
    (t.Es = e), __reflect(e.prototype, 'VideoGameCore.AnchorRouGameBetResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(n) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.gmcode = t.readUTFBytes(Core.Pn)),
                    (this.currency = t.readUTFBytes(Core.Fa)),
                    (this.payout = t.readDouble()),
                    (this.payoutCNY = t.readDouble()),
                    (this.balance = t.readDouble()),
                    (this.ptNum = t.readByte()),
                    (this.ptPayouts = []);
                for (var e, i = 0; i < this.ptNum; i++) {
                    (e = new n.PlaytypePayout()),
                        (e.playtype = t.readByte()),
                        (e.nums = []);
                    for (var r = 0; r < Core.Pu; r++) {
                        var s = t.readByte();
                        s >= 0 && e.nums.push(s);
                    }
                    (e.value = t.readDouble()),
                        (e.valueCNY = t.readDouble()),
                        this.ptPayouts.push(e);
                }
                Core.ExternalData.showSocketLog &&
                    dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (n.Ts = t), __reflect(t.prototype, 'VideoGameCore.AnchorRouGameJettonResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.anchorID = t.readUTFBytes(Core.Vu)),
                    (this.vid = t.readUTFBytes(Core._n)),
                    (this.gmcode = t.readUTFBytes(Core.Pn)),
                    (this.resCNY = t.readDouble()),
                    (this.num = t.readByte()),
                    (this.payoutInfoList = []),
                    (this.payoutsMap = new Core.HashMap());
                for (var e = 0; e < this.num; e++) {
                    var i = t.readUnsignedByte(),
                        r = t.readDouble(),
                        s = { playtype: i, valueCNY: r, value: r };
                    this.payoutInfoList.push(s),
                        this.payoutsMap.set(s.playtype, s);
                }
                Core.ExternalData.showSocketLog &&
                    dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Cs = e),
        __reflect(e.prototype, 'VideoGameCore.AnchorTotalFollowerJettonResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(n) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.anchid = t.readUTFBytes(Core.Vu)),
                    (this.vid = t.readUTFBytes(Core._n)),
                    (this.gmcode = t.readUTFBytes(Core.Pn)),
                    (this.currency = t.readUTFBytes(Core.Fa)),
                    (this.payoutCNY = t.readDouble()),
                    (this.ptNum = t.readByte()),
                    (this.ptPayouts = []);
                for (var e, i = 0; i < this.ptNum; i++) {
                    (e = new n.PlaytypePayout()),
                        (e.playtype = t.readByte()),
                        (e.nums = []);
                    for (var r = 0; r < Core.Pu; r++) {
                        var s = t.readByte();
                        s >= 0 && e.nums.push(s);
                    }
                    (e.valueCNY = t.readDouble()), this.ptPayouts.push(e);
                }
                Core.ExternalData.showSocketLog &&
                    dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (n.Rs = t),
        __reflect(
            t.prototype,
            'VideoGameCore.AnchorTotalFollowerRouJettonResp'
        );
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.username = t.readUTFBytes(Core.la)),
                    (this.vid = t.readUTFBytes(Core._n)),
                    (this.gmcode = t.readUTFBytes(Core.Pn)),
                    (this.balance = t.readDouble()),
                    (this.currency = t.readUTFBytes(Core.Fa));
                var e = t.readUnsignedShort();
                this.betInfos = new Array(e);
                for (var i = 0; e > i; i++) {
                    var r = {};
                    (r.playType = t.readUnsignedShort()), (r.nums = []);
                    for (var s = 0; s < Core.Pu; s++) {
                        var n = t.readByte();
                        n >= 0 && r.nums.push(n);
                    }
                    (r.jetton = t.readDouble()),
                        (r.jettonCNY = t.readDouble()),
                        (this.betInfos[i] = r);
                }
                Core.ExternalData.showSocketLog &&
                    dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Ss = e), __reflect(e.prototype, 'VideoGameCore.AnchorValbetInfoExtResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var a = 15,
        h = 30,
        e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.dealerStr = t.readUTFBytes(a * h)),
                        (this.anchorStr = t.readUTFBytes(a * h));
                    var e = this.dealerStr.split(';'),
                        i = this.anchorStr.split(';');
                    (i = i.concat(e)), (this.anchorList = []);
                    for (var r = 0; r < i.length; r++) {
                        var s = i[r];
                        if (s && s.length > 0) {
                            var n = s.split(':'),
                                o = {};
                            (o.platformType = n[0]),
                                (o.anchorName = n[1]),
                                this.anchorList.push(o);
                        }
                    }
                    Core.ExternalData.showSocketLog &&
                        dclib(egret.getQualifiedClassName(this), this);
                }),
                e
            );
        })(Core.Network.ResponseBase);
    (t.Jf = e),
        __reflect(e.prototype, 'VideoGameCore.ClientFavouriteAnchorResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.retCode = t.readUnsignedInt()),
                    (this.followerCount = t.readUnsignedInt()),
                    Core.ExternalData.showSocketLog &&
                        dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Wf = e), __reflect(e.prototype, 'VideoGameCore.ClientFollowAnchorResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.retCode = t.readUnsignedInt()),
                    (this.roomId = t.readUTFBytes(Core.gu)),
                    (this.ingameFlag = t.readUnsignedInt()),
                    (this.vidCount = t.readUnsignedInt()),
                    (this.vids = []);
                for (var e = 0; e < this.vidCount; e++) {
                    var i = t.readUTFBytes(Core._n);
                    this.vids.push(i);
                }
                Core.ExternalData.showSocketLog &&
                    dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Kr = e), __reflect(e.prototype, 'VideoGameCore.ClientFollowResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.retCode = t.readUnsignedInt()),
                    Core.ExternalData.showSocketLog &&
                        dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.bs = e), __reflect(e.prototype, 'VideoGameCore.ClientUnfollowResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.platformType = t.readUTFBytes(Core.pu)),
                    (this.anchorName = t.readUTFBytes(Core.Vu)),
                    (this.followCount = t.readUnsignedInt()),
                    (this.anchorFollower = {
                        platformType: this.platformType,
                        anchorName: this.anchorName,
                        followerCount: this.followCount
                    }),
                    Core.ExternalData.showSocketLog &&
                        dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Qf = e), __reflect(e.prototype, 'VideoGameCore.DealerFollowersResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.retCode = t.readUnsignedInt()),
                    (this.prevAnchId = t.readUTFBytes(Core.Vu)),
                    (this.ingameFlag = t.readUnsignedInt()),
                    (this.vidCount = t.readUnsignedInt()),
                    (this.vids = []);
                for (var e = 0; e < this.vidCount; e++) {
                    var i = t.readUTFBytes(Core._n);
                    this.vids.push(i);
                }
                Core.ExternalData.showSocketLog &&
                    dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Hr = e), __reflect(e.prototype, 'VideoGameCore.FollowerConnectResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.retCode = t.readUnsignedInt()),
                        Core.ExternalData.showSocketLog &&
                            dclib(egret.getQualifiedClassName(this), this);
                }),
                e
            );
        })(i.Oe);
        (t.Oe = e), __reflect(e.prototype, 'VideoGameCore.Live.GameBetResp');
    })((t = i.Live || (i.Live = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.gmcode = t.readUTFBytes(Core.Pn)),
                        (this.span = t.readShort()),
                        Core.ExternalData.showSocketLog &&
                            dclib(egret.getQualifiedClassName(this), this);
                }),
                e
            );
        })(i.Le);
        (t.Le = e), __reflect(e.prototype, 'VideoGameCore.Live.GameStartResp');
    })((t = i.Live || (i.Live = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                t.readUnsignedInt();
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.uC = e), __reflect(e.prototype, 'VideoGameCore.LeaveVideoResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vidCount = t.readInt()), (this.vids = []);
                for (var e = 0; e < this.vidCount; e++) {
                    var i = t.readUTFBytes(Core._n);
                    this.vids.push(i);
                }
                Core.ExternalData.showSocketLog &&
                    dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Zr = e), __reflect(e.prototype, 'VideoGameCore.SelectVideoResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function() {
        function t() {}
        return t;
    })();
    (t.AllPlatformBetRecord = e),
        __reflect(e.prototype, 'VideoGameCore.AllPlatformBetRecord');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function() {
        function t() {}
        return (
            (t.prototype.check = function(t) {
                return t < this.min ? 2 : t > this.max ? 1 : 0;
            }),
            t
        );
    })();
    (t.BetLimit = e), __reflect(e.prototype, 'VideoGameCore.BetLimit');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function() {
        function t() {}
        return t;
    })();
    (t.BetRecord = e), __reflect(e.prototype, 'VideoGameCore.BetRecord');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function() {
        function t() {}
        return t;
    })();
    (t.BH_PlatformType = e),
        __reflect(e.prototype, 'VideoGameCore.BH_PlatformType');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function() {
        function t() {}
        return t;
    })();
    (t.BH_PlayType = e), __reflect(e.prototype, 'VideoGameCore.BH_PlayType');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function() {
        function t() {}
        return t;
    })();
    (t.BH_TransType = e), __reflect(e.prototype, 'VideoGameCore.BH_TransType');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function() {
        function t() {}
        return (
            (t.prototype.formatChipSet = function(t) {
                var e = t.split(',');
                (this.chips = []),
                    e.forEach(function(t) {
                        var e = parseInt(t);
                        0 == e && (e = 0.5), this.chips.push(e);
                    }, this);
            }),
            t
        );
    })();
    (t.ChipSet = e), __reflect(e.prototype, 'VideoGameCore.ChipSet');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function() {
        function t() {}
        return t;
    })();
    (t.CreditRecord = e), __reflect(e.prototype, 'VideoGameCore.CreditRecord');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function() {
        function t() {}
        return t;
    })();
    (t.HunterBetRecord = e),
        __reflect(e.prototype, 'VideoGameCore.HunterBetRecord');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function() {
        function t() {}
        return t;
    })();
    (t.PlazaMtStatus = e),
        __reflect(e.prototype, 'VideoGameCore.PlazaMtStatus');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function() {
        function t() {}
        return (
            Object.defineProperty(t.prototype, 'maintaining', {
                get: function() {
                    return 1 != this.status;
                },
                enumerable: !0,
                configurable: !0
            }),
            t
        );
    })();
    (t.RoomStatus = e), __reflect(e.prototype, 'VideoGameCore.RoomStatus');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function() {
        function t() {}
        return t;
    })();
    (t.TainRecord = e), __reflect(e.prototype, 'VideoGameCore.TainRecord');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function() {
        function t() {}
        return t;
    })();
    (t.UserPointRecord = e),
        __reflect(e.prototype, 'VideoGameCore.UserPointRecord');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function() {
        function t() {}
        return t;
    })();
    (t.VIPVideoInfo = e), __reflect(e.prototype, 'VideoGameCore.VIPVideoInfo');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                this.currencyInfo = new Core.HashMap();
                for (var e = t.readByte(), i = 0; e > i; i++) {
                    var r = t.readUTFBytes(Core.Fa),
                        s = t.readFloat();
                    this.currencyInfo.set(r, s);
                }
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.AllCurrencyInfo = e),
        __reflect(e.prototype, 'VideoGameCore.AllCurrencyInfo');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.retCode = t.readInt()),
                    (this.num = t.readInt()),
                    (this.chipSetMap = new Core.HashMap());
                for (var e, i = Core.bn + 1, r = 0; r < this.num; r++)
                    (e = new s.ChipSet()),
                        (e.gametype = t.readUTFBytes(i)),
                        e.formatChipSet(t.readUTFBytes(100)),
                        this.chipSetMap.set(e.gametype, e);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (s.Hf = t), __reflect(t.prototype, 'VideoGameCore.ChipSetResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                this.retCode = t.readInt();
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Uf = e), __reflect(e.prototype, 'VideoGameCore.ChipSetSetResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.tableCode = t.readUTFBytes(Core.va)),
                    (this.seat = t.readByte()),
                    (this.isLink = 1 === t.readByte());
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.gf = e), __reflect(e.prototype, 'VideoGameCore.ClientLastPosResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.cnyCode = t.readUTFBytes(Core.Fa)),
                    (this.cnyRate = t.readFloat());
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Df = e), __reflect(e.prototype, 'VideoGameCore.CNYRateInfoResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.getPhotoUrl = function(t, e) {
                return '' !== this.name
                    ? i.DealerConfig.instance.getFullPath(this.name, t, e)
                    : '';
            }),
            (e.prototype.$ = function(t) {
                (this.name = t.readUTFBytes(8)),
                    (this.vid = t.readUTFBytes(Core._n)),
                    (this.weight = t.readFloat()),
                    (this.height = t.readShort());
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (i.Ga = t), __reflect(t.prototype, 'VideoGameCore.DealerInfoResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                this.nReason = t.readByte();
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.pf = e), __reflect(e.prototype, 'VideoGameCore.ExceptionExitResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.ret = t.readUnsignedInt());
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.$i = e), __reflect(e.prototype, 'VideoGameCore.GameBetCancelResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.playType = t.readUnsignedByte()),
                    (this.total = t.readShort()),
                    (this.index = t.readShort()),
                    (this.count = t.readShort());
                for (var e = {}, i = 0; i < this.count; i++)
                    (e.loginname = t.readUTFBytes(Core.la)),
                        (e.nickname = t.readUTFBytes(Core.ma)),
                        (e.tableCode = t.readUTFBytes(Core.va)),
                        (e.currency = t.readUTFBytes(Core.Fa)),
                        (e.seat = t.readUnsignedByte()),
                        (e.betAmount = t.readUnsignedInt()),
                        (e.playType = this.playType);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Xe = e), __reflect(e.prototype, 'VideoGameCore.GamePoolResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                var e = t.readUTFBytes(t.length - 12);
                Core.ExternalData.showSocketLog &&
                    dclib('GetAllPlatformRecordsResp\n' + e);
                var i = Core.XMLReader.read(Core.parseXML(e));
                (this.recordsTotal = parseInt(
                    i.find('addition')[0].find('total')[0].text
                )),
                    (this.pageNum = parseInt(
                        i.find('addition')[0].find('num_per_page')[0].text
                    )),
                    (this.ttl_account = Number(
                        i.find('addition')[0].find('account')[0].text
                    )),
                    (this.ttl_cus_account = Number(
                        i.find('addition')[0].find('cus_account')[0].text
                    )),
                    (this.ttl_valid_account = Number(
                        i.find('addition')[0].find('valid_account')[0].text
                    )),
                    (this.records = []);
                var r;
                i.find('row').forEach(function(t) {
                    (r = new s.AllPlatformBetRecord()),
                        (r.otype = t.attr('otype')),
                        (r.billno = t.attr('billno')),
                        (r.gmcode = t.attr('gmcode')),
                        (r.cus_account = t.attr('cus_account')),
                        (r.billtime = t.attr('billtime')),
                        (r.currency = t.attr('currency')),
                        (r.round = t.attr('round')),
                        (r.account = t.attr('account')),
                        (r.tablecode = t.attr('gmcode').substr(1, 4)),
                        (r.flag = parseInt(t.attr('flag'))),
                        (r.platformtype = t.attr('platformtype')),
                        (r.gametype = t.attr('gametype')),
                        (r.valid_account = parseFloat(t.attr('valid_account'))),
                        (r.result = t.attr('result')),
                        (r.playtype = parseInt(t.attr('playtype'))),
                        (r.bankerpoint = parseInt(t.attr('bankerpoint'))),
                        (r.playerpoint = parseInt(t.attr('playerpoint'))),
                        (r.playerpoint2 = parseInt(t.attr('playerpoint2'))),
                        (r.playerpoint3 = parseInt(t.attr('playerpoint3'))),
                        (r.cardnum = parseInt(t.attr('cardnum'))),
                        (r.dragonpoint = parseInt(t.attr('dragonpoint'))),
                        (r.tigerpoint = parseInt(t.attr('tigerpoint'))),
                        (r.cardlist = t.attr('cardlist')),
                        (r.slottype = parseInt(t.attr('slottype'))),
                        this.records.push(r);
                }, this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (s.Af = t),
        __reflect(t.prototype, 'VideoGameCore.GetAllPlatformRecordsResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                var e = t.readUTFBytes(t.length - 12);
                Core.ExternalData.showSocketLog &&
                    dclib('GetBetRecordsResp\n' + e);
                var i = Core.XMLReader.read(Core.parseXML(e));
                (this.recordsTotal = parseInt(
                    i.find('addition')[0].find('total')[0].text
                )),
                    (this.pageNum = parseInt(
                        i.find('addition')[0].find('num_per_page')[0].text
                    )),
                    (this.ttl_account = Number(
                        i.find('addition')[0].find('account')[0].text
                    )),
                    (this.ttl_cus_account = Number(
                        i.find('addition')[0].find('cus_account')[0].text
                    )),
                    (this.ttl_valid_account = Number(
                        i.find('addition')[0].find('valid_account')[0].text
                    )),
                    (this.records = []);
                var r;
                i.find('row').forEach(function(t) {
                    (r = new s.BetRecord()),
                        (r.gmcode = t.attr('gmcode')),
                        (r.billtime = t.attr('billtime')),
                        (r.billno = t.attr('billno')),
                        (r.playtype = parseInt(t.attr('playtype'))),
                        (r.account = t.attr('account')),
                        (r.cus_account = t.attr('cus_account')),
                        (r.valid_account = parseFloat(t.attr('valid_account'))),
                        (r.tablecode = t.attr('gmcode').substr(1, 4)),
                        (r.bankerpoint = parseInt(t.attr('bankerpoint'))),
                        (r.playerpoint = parseInt(
                            t.attr('playerpoint').split(' ')[0]
                        )),
                        (r.playerpoint2 = parseInt(
                            t.attr('playerpoint2').split(' ')[0]
                        )),
                        (r.playerpoint3 = parseInt(
                            t.attr('playerpoint3').split(' ')[0]
                        )),
                        (r.cardnum = parseInt(t.attr('cardnum'))),
                        (r.dragonpoint = parseInt(t.attr('dragonpoint'))),
                        (r.tigerpoint = parseInt(t.attr('tigerpoint'))),
                        (r.cardlist = t.attr('cardlist')),
                        (r.userip = t.attr('userip')),
                        (r.flag = parseInt(t.attr('flag'))),
                        (r.platformtype = t.attr('platformtype')),
                        (r.gametype = t.attr('gametype')),
                        (r.remark = t.attr('remark')),
                        (r.bj_bet_seatnum = t.attr('bj_bet_seatnum')),
                        (r.bj_banker_result = t.attr('bj_banker_result')),
                        (r.bj_player_result = t.attr('bj_player_result')),
                        (r.bj_cardlist = t.attr('bj_cardlist')),
                        (r.round = t.attr('round')),
                        (r.zjh_dragon_result = parseInt(
                            t.attr('zjh_dragon_result')
                        )),
                        (r.zjh_phoenix_result = parseInt(
                            t.attr('zjh_phoenix_result')
                        )),
                        (r.zjh_result = parseInt(t.attr('zjh_result'))),
                        this.records.push(r);
                }, this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (s.If = t), __reflect(t.prototype, 'VideoGameCore.GetBetRecordsResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                var e = t.readUTFBytes(t.length - 12),
                    i = Core.XMLReader.read(Core.parseXML(e));
                (this.income = parseInt(
                    i.find('addition')[0].find('income')[0].text
                )),
                    (this.expend = parseInt(
                        i.find('addition')[0].find('expend')[0].text
                    )),
                    (this.recordsTotal = parseInt(
                        i.find('addition')[0].find('total')[0].text
                    )),
                    (this.pageNum = parseInt(
                        i.find('addition')[0].find('num_per_page')[0].text
                    )),
                    this.page_index &&
                        (this.page_index = parseInt(
                            i.find('addition')[0].find('page_index')[0].text
                        )),
                    (this.subIncome = 0),
                    (this.subExpend = 0),
                    (this.records = []);
                var r;
                i.find('row').forEach(function(t) {
                    (r = new s.CreditRecord()),
                        (r.tradeno = t.attr('tradeno')),
                        (r.jointime = t.attr('jointime')),
                        (r.code = t.attr('code')),
                        (r.trans_amount = t.attr('trans_amount')),
                        (r.src_amount = t.attr('src_amount')),
                        (r.dst_amount = t.attr('dst_amount')),
                        (r.remark = t.attr('remark'));
                    var e = Number(r.trans_amount);
                    0 > e ? (this.subExpend += e) : (this.subIncome += e),
                        this.records.push(r);
                }, this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (s.xf = t), __reflect(t.prototype, 'VideoGameCore.GetCreditRecordsResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                var e = t.readUTFBytes(t.length - 12),
                    i = Core.XMLReader.read(Core.parseXML(e));
                this.records = [];
                var r;
                i.find('row').forEach(function(t) {
                    (r = new s.BH_PlatformType()),
                        (r.platformtype = t.attr('platformtype')),
                        (r.platformname = t.attr('platformname')),
                        this.records.push(r);
                }, this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (s.Rf = t), __reflect(t.prototype, 'VideoGameCore.GetPlatformTypeResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                var e = t.readUTFBytes(t.length - 12),
                    i = Core.XMLReader.read(Core.parseXML(e));
                this.records = [];
                var r;
                i.find('row').forEach(function(t) {
                    (r = new s.BH_PlayType()),
                        (r.playtype = t.attr('playtype')),
                        (r.gametype = t.attr('gametype')),
                        (r.description = t.attr('description')),
                        this.records.push(r);
                }, this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (s.Lf = t), __reflect(t.prototype, 'VideoGameCore.GetPlayTypeResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.roomCount = t.readInt()),
                    (this.roomStatusMap = new Core.HashMap());
                for (var e, i = 0; i < this.roomCount; i++)
                    (e = new r.RoomStatus()),
                        (e.vid = t.readUTFBytes(Core._n)),
                        (e.status = t.readInt()),
                        (e.startTime = t.readInt() << (4 + t.readInt())),
                        this.roomStatusMap.set(e.vid, e);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (r.Sf = t), __reflect(t.prototype, 'VideoGameCore.GetPlazaRoomStatusResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                var e = t.readUTFBytes(t.length - 12),
                    i = Core.XMLReader.read(Core.parseXML(e));
                (this.recordsTotal = parseInt(
                    i.find('addition')[0].find('total')[0].text
                )),
                    (this.pageNum = parseInt(
                        i.find('addition')[0].find('num_per_page')[0].text
                    )),
                    (this.ttl_account = Number(
                        i.find('addition')[0].find('account')[0].text
                    )),
                    (this.ttl_cus_account = Number(
                        i.find('addition')[0].find('cus_account')[0].text
                    )),
                    (this.ttl_valid_account = Number(
                        i.find('addition')[0].find('valid_account')[0].text
                    )),
                    (this.records = []);
                var r;
                i.find('row').forEach(function(t) {
                    (r = new s.BetRecord()),
                        (r.billtime = t.attr('billtime')),
                        (r.billno = t.attr('billno')),
                        (r.account = t.attr('account')),
                        (r.cus_account = t.attr('cus_account')),
                        (r.valid_account = parseFloat(t.attr('valid_account'))),
                        (r.tablecode = t.attr('tablecode')),
                        (r.flag = parseInt(t.attr('flag'))),
                        (r.platformtype = t.attr('platformtype')),
                        (r.gametype = t.attr('gametype')),
                        (r.remark = t.attr('remark')),
                        (r.slottype = parseInt(t.attr('slottype'))),
                        (r.result = t.attr('result')),
                        (r.betreelcount = parseInt(t.attr('betreelcount'))),
                        (r.bonus_base = parseFloat(t.attr('bonus_base'))),
                        (r.pokerset = parseInt(t.attr('pokerset'))),
                        (r.cutoff = parseInt(t.attr('cutoff'))),
                        (r.brand = t.attr('brand')),
                        (r.mainbillno = t.attr('mainbillno')),
                        this.records.push(r);
                }, this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (s.Tf = t), __reflect(t.prototype, 'VideoGameCore.GetSlotGameRecordsResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                var e = t.readUTFBytes(t.length - 12);
                Core.ExternalData.showSocketLog &&
                    dclib('GetTainRecordsResp\n' + e);
                var i = Core.XMLReader.read(Core.parseXML(e));
                (this.recordsTotal = parseInt(
                    i.find('addition')[0].find('total')[0].text
                )),
                    (this.pageNum = parseInt(
                        i.find('addition')[0].find('num_per_page')[0].text
                    )),
                    (this.ttl_account = Number(
                        i.find('addition')[0].find('account')[0].text
                    )),
                    (this.ttl_cus_account = Number(
                        i.find('addition')[0].find('cus_account')[0].text
                    )),
                    (this.ttl_valid_account = Number(
                        i.find('addition')[0].find('valid_account')[0].text
                    )),
                    (this.records = []);
                var r;
                i.find('row').forEach(function(t) {
                    (r = new s.TainRecord()),
                        (r.billno = t.attr('billno')),
                        (r.billtime = t.attr('billtime')),
                        (r.settletime = t.attr('settletime')),
                        (r.flag = parseInt(t.attr('flag'))),
                        (r.valid_account = parseFloat(t.attr('valid_account'))),
                        (r.cus_account = t.attr('cus_account')),
                        (r.gametype = t.attr('gametype')),
                        (r.account = parseFloat(t.attr('account'))),
                        (r.currentpoint = parseFloat(t.attr('currentpoint'))),
                        (r.competition = t.attr('competition')),
                        (r.odds = t.attr('odds')),
                        (r.market = t.attr('market')),
                        (r.selection = t.attr('selection')),
                        (r.result = t.attr('result')),
                        this.records.push(r);
                }, this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (s.Bf = t), __reflect(t.prototype, 'VideoGameCore.GetTainRecordsResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                var e = t.readUTFBytes(t.length - 12),
                    i = Core.XMLReader.read(Core.parseXML(e));
                this.records = [];
                var r;
                i.find('row').forEach(function(t) {
                    (r = new s.BH_TransType()),
                        (r.transtypename = t.attr('transtypename')),
                        (r.description = t.attr('descripion')),
                        this.records.push(r);
                }, this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (s.jf = t), __reflect(t.prototype, 'VideoGameCore.GetTransTypeResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                var e = t.readUTFBytes(t.length - 12),
                    i = Core.XMLReader.read(Core.parseXML(e));
                (this.recordsTotal = parseInt(
                    i.find('addition')[0].find('total')[0].text
                )),
                    (this.income = parseInt(
                        i.find('addition')[0].find('income')[0].text
                    )),
                    (this.expend = parseInt(
                        i.find('addition')[0].find('expend')[0].text
                    )),
                    (this.pageNum = parseInt(
                        i.find('addition')[0].find('num_per_page')[0].text
                    )),
                    (this.records = []);
                var r;
                i.find('row').forEach(function(t) {
                    (r = new s.UserPointRecord()),
                        (r.tradeno = t.attr('tradeno')),
                        (r.jointime = t.attr('jointime')),
                        (r.code = t.attr('code')),
                        (r.trans_amount = parseFloat(t.attr('trans_amount'))),
                        (r.src_amount = parseFloat(t.attr('src_amount'))),
                        (r.dst_amount = parseFloat(t.attr('dst_amount'))),
                        (r.remark = t.attr('remark')),
                        this.records.push(r);
                }, this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (s.Of = t), __reflect(t.prototype, 'VideoGameCore.GetUserPointRecordsResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.getPhotoUrl = function(t, e) {
                return '' !== this.name
                    ? i.DealerConfig.instance.getFullPath(this.name, t, e)
                    : '';
            }),
            (e.prototype.$ = function(t) {
                (this.offWork = 1 === this.seqNo),
                    (this.name = t.readUTFBytes(Core.la)),
                    (this.vid = t.readUTFBytes(Core._n)),
                    (this.weight = t.readFloat()),
                    (this.height = t.readShort());
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (i.kf = t), __reflect(t.prototype, 'VideoGameCore.LedDealerInfoResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.platform = t.readUTFBytes(Core.pu)),
                    (this.param = t.readUTFBytes(Core.wu)),
                    (this.token = t.readUTFBytes(Core.zu));
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Vf = e), __reflect(e.prototype, 'VideoGameCore.LiveStreamInfoResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.retCode = t.readInt()),
                    (this.displayGuild = 1 == t.readUnsignedByte());
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Pf = e), __reflect(e.prototype, 'VideoGameCore.LoginPlazaResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                this.qrCodeString = t.readUTFBytes(6);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.tC = e), __reflect(e.prototype, 'VideoGameCore.MobileQRCodeResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.sum_amount = t.readDouble()),
                    (this.num = t.readUnsignedShort()),
                    (this.bet = t.readUnsignedInt()),
                    (this.realtimeInfoByTypeList = []);
                for (var e = 0; e < this.bet; e++) {
                    var i = {};
                    (i.playtype = t.readUnsignedShort()),
                        (i.playernum = t.readUnsignedShort()),
                        (i.credit = t.readDouble()),
                        this.realtimeInfoByTypeList.push(i);
                }
                Core.ExternalData.showSocketLog &&
                    dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Ir = e),
        __reflect(e.prototype, 'VideoGameCore.MultiTableRealtimeInfoResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(o) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.curCurrencyRate =
                    o.VideoPlazaStore.instance.currencyRate),
                    (this.vid = t.readUTFBytes(Core._n)),
                    (this.gmtype = t.readUTFBytes(4)),
                    (this.total_join_player = t.readUnsignedShort()),
                    (this.total_bet_player = t.readUnsignedShort()),
                    (this.total_sit_player = t.readUnsignedShort()),
                    (this.n_reserve_1 = t.readUnsignedShort()),
                    (this.n_reserve_2 = t.readUnsignedShort()),
                    (this.total_balance =
                        t.readDouble() * this.curCurrencyRate),
                    (this.u_count = t.readByte()),
                    (this.betInfos = new Core.HashMap());
                for (var e = 0; e < this.u_count; e++) {
                    var i = t.readUnsignedShort(),
                        r = t.readUnsignedShort(),
                        s = t.readDouble(),
                        n = {
                            playType: i,
                            count: r,
                            amount: s * this.curCurrencyRate
                        };
                    this.betInfos.set(i, n);
                }
                (this.sum_amount = this.total_balance),
                    (this.num = this.total_join_player),
                    Core.ExternalData.showSocketLog &&
                        dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(o.Mi);
    (o.Nf = t), __reflect(t.prototype, 'VideoGameCore.NNVideoRealtimeInfoResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                this.vid = t.readUTFBytes(Core._n);
                for (
                    var e, i, r = t.readInt(), s = (t.readInt(), []), n = 1;
                    r >= n;
                    n++
                )
                    (e = n % 2 == 0 ? 2 : 1),
                        1 == e && (i = {}),
                        (i.serverID = t.readFloat()),
                        (i['tablecode' + e] = t.readUTFBytes(Core.va)),
                        (i['seatNum' + e] = t.readByte()),
                        (i.loginname = t.readUTFBytes(Core.la)),
                        (i.nickname = t.readUTFBytes(Core.ma)),
                        (i['name' + e] = Core.getAnonymousName(
                            i.loginname,
                            i.nickname
                        )),
                        s.push(i);
                this.playerList = s;
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Kf = e), __reflect(e.prototype, 'VideoGameCore.OnlinePlayerListResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.num = t.readUnsignedByte()),
                    (this.limitList = new Core.HashMap());
                for (var e, i = 0; i < this.num; i++)
                    (e = new r.BetLimit()),
                        (e.playtype = t.readUnsignedShort()),
                        (e.min = t.readDouble()),
                        (e.max = t.readDouble()),
                        this.limitList.set(e.playtype, e);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (r.Ys = t), __reflect(t.prototype, 'VideoGameCore.PersonalLimitExtResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.num = t.readUnsignedByte()),
                    (this.limitList = new Core.HashMap());
                for (var e, i = 0; i < this.num; i++)
                    (e = new r.BetLimit()),
                        (e.playtype = t.readUnsignedByte()),
                        (e.min = t.readInt()),
                        0 == e.min && (e.min = 0.5),
                        (e.max = t.readInt()),
                        this.limitList.set(e.playtype, e);
                dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (r.Fe = t), __reflect(t.prototype, 'VideoGameCore.PersonalLimitResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.num = t.readInt()),
                    (this.mtStatusMap = new Core.HashMap());
                for (var e, i = 0; i < this.num; i++)
                    (e = new r.PlazaMtStatus()),
                        (e.platform = t.readUTFBytes(10)),
                        (e.status = t.readInt()),
                        (e.beginTime = Core.readInt64FromBytes(t)),
                        (e.endTime = Core.readInt64FromBytes(t)),
                        (e.cmtLen = t.readInt()),
                        e.cmtLen > 0
                            ? (e.cmtText = t.readUTFBytes(e.cmtLen))
                            : t.position++,
                        this.mtStatusMap.set(e.platform, e);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (r.yf = t), __reflect(t.prototype, 'VideoGameCore.PlazaMtStatusResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                this.count_int = t.readInt();
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Ef = e), __reflect(e.prototype, 'VideoGameCore.PlazaPlayerCountResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                this.tablecode = t.readUTFBytes(Core.va);
                var e,
                    i = t.readShort();
                this.limitList = new Core.HashMap();
                for (var r = 0; i > r; r++)
                    (e = new s.BetLimit()),
                        (e.playtype = t.readUnsignedByte()),
                        (e.min = t.readInt()),
                        0 == e.min && (e.min = 0.5),
                        (e.max = t.readInt()),
                        (e.min = s.convertToMyCurrency(e.min)),
                        (e.max = s.convertToMyCurrency(e.max)),
                        this.limitList.set(e.playtype, e);
                dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (s.Ze = t), __reflect(t.prototype, 'VideoGameCore.TableLimitResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(s) {
        var t = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.whoMiCard = t.readByte()),
                        (this.cardIndex = t.readByte());
                    var e = t.readByte();
                    this.mouseInfos = new Array();
                    for (var i, r = 0; e > r; r++)
                        (i = new s.MouseInfo()),
                            (i.x = t.readFloat()),
                            (i.y = t.readFloat()),
                            (i.baseX = t.readFloat()),
                            (i.baseY = t.readFloat()),
                            (i.rot1 = t.readByte()),
                            (i.rot2 = t.readByte()),
                            this.mouseInfos.push(i);
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (s.ci = t),
            __reflect(t.prototype, 'VideoGameCore.MiPai.TurnCardMiCardResp');
    })((e = t.MiPai || (t.MiPai = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.val = t.readDouble()), (this.seq = t.readInt());
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.ze = e), __reflect(e.prototype, 'VideoGameCore.UpdateBalanceResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.retCodeInt = t.readInt()),
                    (this.graphIndex = t.readInt()),
                    (this.levelInt = t.readInt()),
                    (this.scoreInt = t.readInt()),
                    (this.dayPayoffNum = t.readFloat()),
                    (this.dayValidBetNum = t.readFloat()),
                    (this.totalBetNum = t.readFloat()),
                    (this.loginLongNum = t.readFloat());
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Ff = e), __reflect(e.prototype, 'VideoGameCore.UserPointResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(o) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.gmtype = t.readUTFBytes(4)),
                    (this.total_join_player = t.readUnsignedShort()),
                    (this.total_bet_player = t.readUnsignedShort()),
                    (this.total_sit_player = t.readUnsignedShort()),
                    (this.n_reserve_1 = t.readUnsignedShort()),
                    (this.n_reserve_2 = t.readUnsignedShort()),
                    (this.total_balance = t.readDouble()),
                    (this.u_count = t.readByte()),
                    (this.betInfos = []),
                    (this.betInfoMap = new Core.HashMap());
                for (var e = 0; e < this.u_count; e++) {
                    var i = t.readUnsignedShort(),
                        r = t.readUnsignedShort(),
                        s = t.readDouble(),
                        n = {
                            playtype: i,
                            total_player: r,
                            total_jetton_cny: o.convertToMyCurrency(s)
                        };
                    this.betInfos.push(n), this.betInfoMap.set(i, n);
                }
                Core.ExternalData.showSocketLog &&
                    dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (o.xi = t),
        __reflect(t.prototype, 'VideoGameCore.VideoRealtimeInfoExtResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                this.vid = t.readUTFBytes(Core._n);
                var e = i.RoomConfig.instance.getRoomInfoByVid(this.vid);
                e &&
                    ((this.status = t.readByte()),
                    (this.timeout = t.readShort()),
                    (this.max_timeout = t.readShort()),
                    (this.last_res = t.readByte()),
                    [i.GAME_BJ].indexOf(e.gmtype) > -1 &&
                        (this.curHandIndex = t.readByte()));
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (i.He = t), __reflect(t.prototype, 'VideoGameCore.VideoStatusInfoResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                this.vipVideoInfoMap = new Core.HashMap();
                var e = t.readInt();
                if (e > 0)
                    for (var i, r = 0; e > r; r++)
                        (i = new s.VIPVideoInfo()),
                            (i.vid = t.readUTFBytes(Core._n)),
                            (i.canSubscribe = t.readBoolean()),
                            (i.canEnter = t.readBoolean()),
                            (i.canVisit = t.readBoolean()),
                            (i.reason = t.readInt()),
                            (i.minLimit = t.readInt()),
                            (i.maxLimit = t.readInt()),
                            (i.minCredit = t.readInt()),
                            i.vid &&
                                i.vid.length > 0 &&
                                this.vipVideoInfoMap.set(i.vid, i);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (s.wf = t), __reflect(t.prototype, 'VideoGameCore.VIPVideoListResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.status = t.readByte());
                var e = t.readByte();
                (this.vipTableStatus = e),
                    (this.isOtherReserved = 3 == this.vipTableStatus),
                    (this.isExculsive = e > 1),
                    (this.isSubscribe = 1 == e || this.isExculsive),
                    (this.isShared = 0 == t.readByte()),
                    (this.isPwd = 1 == t.readByte()),
                    (this.vipStatus = t.readByte()),
                    (this.timeout = t.readShort());
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.vi = e), __reflect(e.prototype, 'VideoGameCore.VipVideoStatusInfoResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.retCode = t.readInt()),
                    (this.devicetype = t.readUnsignedByte()),
                    (this.loginname = t.readUTFBytes(30)),
                    (this.gameType = t.readUTFBytes(4)),
                    (this.currency = t.readUTFBytes(6)),
                    (this.accountType = t.readUnsignedByte()),
                    (this.gameToken = t.readUTFBytes(36));
                var e = t.readUnsignedShort(),
                    i = t.readUnsignedShort();
                (this.gameId = t.readUTFBytes(e)),
                    (this.url = t.readUTFBytes(i));
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.zf = e), __reflect(e.prototype, 'VideoGameCore.WalletSessionResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.code = t.readUTFBytes(Core.Pn)),
                        (this.result = t.readInt());
                }),
                Object.defineProperty(e.prototype, 'winPlayTypes', {
                    get: function() {
                        var t = [this.result];
                        return t;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.Bs = e),
            __reflect(e.prototype, 'VideoGameCore.Rou.CurrentResultResp');
    })((e = t.Rou || (t.Rou = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(n) {
    var t;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.name = t.readUTFBytes(Core.la)),
                        (this.nick = t.readUTFBytes(Core.ma)),
                        (this.tableCode = t.readUTFBytes(Core.va)),
                        (this.seatNum = t.readByte()),
                        (this.left = t.readDouble()),
                        (this.currency = t.readUTFBytes(Core.Fa)),
                        (this.betNum = t.readShort()),
                        (this.stakeInfos = []);
                    for (var e, i, r = 0; r < this.betNum; r++) {
                        (e = new n.StakeDataRou()),
                            (e.playType = t.readUnsignedByte()),
                            (e.amount = t.readUnsignedInt()),
                            (e.nums = []);
                        for (var s = 0; s < Core.Pu; s++)
                            (i = t.readByte()), i >= 0 && e.nums.push(i);
                        Core.arraySort(e.nums), this.stakeInfos.push(e);
                    }
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.Re = e),
            __reflect(e.prototype, 'VideoGameCore.Rou.GameJettonExtResp');
    })((t = n.Rou || (n.Rou = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(n) {
    var t;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.name = t.readUTFBytes(Core.la)),
                        (this.nick = t.readUTFBytes(Core.ma)),
                        (this.tableCode = t.readUTFBytes(Core.va)),
                        (this.seatNum = t.readByte()),
                        (this.left = t.readDouble()),
                        (this.currency = t.readUTFBytes(Core.Fa)),
                        (this.betNum = t.readShort()),
                        (this.stakeInfos = []);
                    for (var e, i, r = 0; r < this.betNum; r++) {
                        (e = new n.StakeDataRou()),
                            (e.playType = t.readUnsignedByte()),
                            (e.amount = t.readUnsignedInt()),
                            (e.nums = []);
                        for (var s = 0; s < Core.Pu; s++)
                            (i = t.readByte()), i >= 0 && e.nums.push(i);
                        Core.arraySort(e.nums), this.stakeInfos.push(e);
                    }
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.Ie = e), __reflect(e.prototype, 'VideoGameCore.Rou.GameJettonResp');
    })((t = n.Rou || (n.Rou = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(n) {
    var t;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.gmcode = t.readUTFBytes(Core.Pn)),
                        (this.payout = t.readDouble()),
                        (this.balance = t.readDouble()),
                        (this.ptNum = t.readByte()),
                        (this.ptPayouts = []);
                    for (var e, i = 0; i < this.ptNum; i++) {
                        (e = new n.PlaytypePayout()),
                            (e.playtype = t.readByte()),
                            (e.value = t.readDouble()),
                            (e.nums = []);
                        for (var r = 0; 12 > r; r++) {
                            var s = t.readByte();
                            s >= 0 && e.nums.push(s);
                        }
                        this.ptPayouts.push(e);
                    }
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.je = e),
            __reflect(e.prototype, 'VideoGameCore.Rou.GamePayoutMeResp');
    })((t = n.Rou || (n.Rou = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var i = 37,
            e = (function(t) {
                function e() {
                    return (null !== t && t.apply(this, arguments)) || this;
                }
                return (
                    __extends(e, t),
                    (e.prototype.$ = function(t) {
                        (this.vid = t.readUTFBytes(Core._n)),
                            (this.totalRound = t.readUnsignedInt()),
                            (this.stat = new Array(i));
                        for (var e = 0; i > e; e++)
                            this.stat[e] = t.readUnsignedShort();
                    }),
                    e
                );
            })(Core.Network.ResponseBase);
        (t.As = e),
            __reflect(e.prototype, 'VideoGameCore.Rou.GameResultStatResp');
    })((e = t.Rou || (t.Rou = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(n) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.betSeq = t.readUnsignedInt()),
                    (this.ratio = t.readUnsignedInt()),
                    (this.retCode = t.readUnsignedInt()),
                    (this.betNum = t.readUnsignedInt()),
                    (this.stakeInfos = []);
                for (var e, i, r = 0; r < this.betNum; r++) {
                    e = new n.StakeDataRou();
                    t.readUnsignedInt();
                    (e.playType = t.readUnsignedShort()), (e.nums = []);
                    for (var s = 0; s < Core.Pu; s++)
                        (i = t.readByte()), i >= 0 && e.nums.push(i);
                    e.amount = t.readUnsignedInt();
                    t.readUnsignedInt();
                    Core.arraySort(e.nums), this.stakeInfos.push(e);
                }
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (n.Ms = t), __reflect(t.prototype, 'VideoGameCore.GameRouEvBetResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(n) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.gmcode = t.readUTFBytes(Core.Pn)),
                    (this.retCode = t.readUnsignedInt()),
                    (this.betSeq = t.readUnsignedInt()),
                    (this.ratio = t.readUnsignedInt()),
                    (this.betNum = t.readUnsignedInt()),
                    (this.stakeInfos = []);
                for (var e, i, r = 0; r < this.betNum; r++) {
                    e = new n.StakeDataRou();
                    t.readUnsignedInt();
                    (e.playType = t.readUnsignedShort()), (e.nums = []);
                    for (var s = 0; s < Core.Pu; s++)
                        (i = t.readByte()), i >= 0 && e.nums.push(i);
                    e.amount = t.readUnsignedInt();
                    t.readUnsignedInt();
                    Core.arraySort(e.nums), this.stakeInfos.push(e);
                }
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (n.Hs = t), __reflect(t.prototype, 'VideoGameCore.GameRouEvUndoBetResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(o) {
    var t;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    for (
                        var e = t.readUnsignedByte(), i = [], r = 0;
                        r < Core.Pu;
                        r++
                    )
                        i.push(t.readUnsignedByte());
                    var s = t.readShort();
                    this.betPoolInfos = [];
                    for (var r = 0; s > r; r++) {
                        var n = new o.BetPoolInfo();
                        (n.playType = e),
                            (n.nums = i),
                            (n.loginname = t.readUTFBytes(Core.la)),
                            (n.nickname = t.readUTFBytes(Core.ma)),
                            (n.tableCode = t.readUTFBytes(Core.va)),
                            (n.currency = t.readUTFBytes(Core.Fa)),
                            (n.seatNum = t.readByte()),
                            this.respId === o.fe
                                ? (n.amount = t.readDouble())
                                : (n.amount = t.readInt()),
                            this.betPoolInfos.push(n);
                    }
                    Core.ExternalData.showSocketLog &&
                        dclib(egret.getQualifiedClassName(this), this);
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.xe = e),
            __reflect(e.prototype, 'VideoGameCore.Rou.GameTablePoolResp');
    })((t = o.Rou || (o.Rou = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                if (((this.infos = new Array()), !(t.length <= 12))) {
                    this.vid = t.readUTFBytes(Core._n);
                    for (var e, i = t.readInt(), r = 0; i > r; r++)
                        (e = new s.RoadPaper.RoadRouData()),
                            (e.code = t.readUTFBytes(Core.Pn)),
                            (e.res = t.readInt()),
                            (e.resbit = t.readInt()),
                            this.infos.push(e);
                }
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (s.Nr = t), __reflect(t.prototype, 'VideoGameCore.RouBeadListResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.code = t.readUTFBytes(Core.Pn)),
                    (this.result = t.readInt()),
                    (this.resultBit = t.readInt());
            }),
            Object.defineProperty(e.prototype, 'winPlayTypes', {
                get: function() {
                    var t = [];
                    if (0 == this.result) t.push(s.PLAYTYPE_ROU_DIRECT);
                    else {
                        var e = s.RoadPaper.rouResultIsSmall(this.result),
                            i = s.RoadPaper.rouResultIsOdd(this.result),
                            r = s.RoadPaper.rouResultIsRed(this.result);
                        t.push(e ? s.PLAYTYPE_ROU_SMALL : s.PLAYTYPE_ROU_BIG),
                            t.push(
                                i ? s.PLAYTYPE_ROU_ODD : s.PLAYTYPE_ROU_EVEN
                            ),
                            t.push(
                                r ? s.PLAYTYPE_ROU_RED : s.PLAYTYPE_ROU_BLACK
                            );
                    }
                    return t;
                },
                enumerable: !0,
                configurable: !0
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (s.Dr = t), __reflect(t.prototype, 'VideoGameCore.RouGameResultResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    if (
                        ((this.vid = t.readUTFBytes(Core._n)),
                        (this.gmtype = t.readUTFBytes(Core.bn)),
                        (this.status = t.readByte()),
                        (this.gmcode = t.readUTFBytes(Core.Pn)),
                        13 != this.gmcode.length && (this.gmcode = ''),
                        0 != t.bytesAvailable)
                    ) {
                        this.bcards = [];
                        for (var e = 0; 3 > e; e++)
                            this.bcards.push(t.readUnsignedByte());
                        this.pcards = [];
                        for (var e = 0; 3 > e; e++)
                            this.pcards.push(t.readUnsignedByte());
                        (this.timeout = t.readShort()),
                            (this.max_timeout = t.readShort()),
                            (this.insPlayType = t.readShort());
                    }
                }),
                e
            );
        })(i.dt);
        (t.dt = e),
            __reflect(e.prototype, 'VideoGameCore.Sbac.GameCurrentStatusResp');
    })((t = i.Sbac || (i.Sbac = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.gmCode = t.readUTFBytes(Core.Pn)),
                        (this.timeOut = t.readUnsignedByte()),
                        (this.odds = t.readFloat()),
                        (this.playType = t.readUnsignedShort()),
                        (this.min = t.readDouble()),
                        (this.max = t.readDouble()),
                        (this.totalBet = t.readDouble());
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.ti = e),
            __reflect(e.prototype, 'VideoGameCore.Sbac.SbacBetHintsExtResp');
    })((e = t.Sbac || (t.Sbac = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.gmCode = t.readUTFBytes(Core.Pn)),
                        (this.timeOut = t.readUnsignedByte()),
                        (this.odds = t.readFloat()),
                        (this.playType = t.readUnsignedByte()),
                        (this.min = t.readUnsignedInt()),
                        (this.max = t.readUnsignedInt()),
                        (this.totalBet = t.readUnsignedInt());
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.$e = e),
            __reflect(e.prototype, 'VideoGameCore.Sbac.SbacBetHintsResp');
    })((e = t.Sbac || (t.Sbac = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    if (
                        ((this.vid = t.readUTFBytes(Core._n)),
                        (this.gameType = t.readUTFBytes(Core.bn)),
                        (this.state = t.readByte()),
                        (this.gmCode = t.readUTFBytes(Core.Pn)),
                        0 != t.bytesAvailable)
                    ) {
                        this.bcards = [];
                        for (var e = 0; 3 > e; e++)
                            this.bcards.push(t.readUnsignedByte());
                        this.pcards = [];
                        for (var e = 0; 3 > e; e++)
                            this.pcards.push(t.readUnsignedByte());
                        (this.timeout = t.readShort()),
                            (this.maxTimeout = t.readShort()),
                            (this.insurancePlayType = t.readShort());
                    }
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.cC = e),
            __reflect(e.prototype, 'VideoGameCore.Sbac.SbacGameStatusResp');
    })((e = t.Sbac || (t.Sbac = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.infos = new Array()),
                    (this.vid = t.readUTFBytes(Core._n));
                for (var e, i = t.readInt(), r = 0; i > r; r++) {
                    (e = new s.RoadPaper.RoadShbData()),
                        (e.code = t.readUTFBytes(Core.Pn)),
                        (e.dice1 = t.readByte()),
                        (e.dice2 = t.readByte()),
                        (e.dice3 = t.readByte());
                    t.readByte(), t.readByte();
                    this.infos.push(e);
                }
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (s.$r = t), __reflect(t.prototype, 'VideoGameCore.ShbBeadListResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t = (function(e) {
        function t() {
            var t = (null !== e && e.apply(this, arguments)) || this;
            return (t.diceValue = []), t;
        }
        return (
            __extends(t, e),
            (t.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.code = t.readUTFBytes(Core.Pn)),
                    (this.info = new s.RoadPaper.RoadShbData()),
                    (this.info.code = this.code),
                    (this.info.dice1 = t.readByte()),
                    (this.info.dice2 = t.readByte()),
                    (this.info.dice3 = t.readByte());
            }),
            Object.defineProperty(t.prototype, 'winPlayTypes', {
                get: function() {
                    var t = [],
                        e = s.RoadPaper.shbResultSumIsSmall(
                            this.info.dice1,
                            this.info.dice2,
                            this.info.dice3
                        ),
                        i = s.RoadPaper.shbResultIsTriple(
                            this.info.dice1,
                            this.info.dice2,
                            this.info.dice3
                        ),
                        r = s.RoadPaper.shbResultSumIsOdd(
                            this.info.dice1,
                            this.info.dice2,
                            this.info.dice3
                        );
                    return (
                        e
                            ? t.push(s.PLAYTYPE_SHB_SMALL)
                            : t.push(s.PLAYTYPE_SHB_BIG),
                        r
                            ? t.push(s.PLAYTYPE_SHB_ODD)
                            : t.push(s.PLAYTYPE_SHB_EVEN),
                        i && t.push(s.PLAYTYPE_SHB_TRIPLE_ANY),
                        (this.diceValue = [
                            this.info.dice1,
                            this.info.dice2,
                            this.info.dice3
                        ]),
                        this.containsDiceValue(1) &&
                            t.push(s.PLAYTYPE_SHB_SINGLE_1),
                        this.containsDiceValue(2) &&
                            t.push(s.PLAYTYPE_SHB_SINGLE_2),
                        this.containsDiceValue(3) &&
                            t.push(s.PLAYTYPE_SHB_SINGLE_3),
                        this.containsDiceValue(4) &&
                            t.push(s.PLAYTYPE_SHB_SINGLE_4),
                        this.containsDiceValue(5) &&
                            t.push(s.PLAYTYPE_SHB_SINGLE_5),
                        this.containsDiceValue(6) &&
                            t.push(s.PLAYTYPE_SHB_SINGLE_6),
                        t
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.containsDiceValue = function(t) {
                return this.diceValue.indexOf(t) >= 0;
            }),
            t
        );
    })(Core.Network.ResponseBase);
    (s.Mr = t), __reflect(t.prototype, 'VideoGameCore.ShbGameResultResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.code = t.readUnsignedInt()),
                        (this.table = t.readUTFBytes(Core.va)),
                        (this.seat = t.readByte());
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.ai = e),
            __reflect(e.prototype, 'VideoGameCore.Vip.VipAutoEnterTableResp');
    })((e = t.Vip || (t.Vip = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.isMiCard = t.readBoolean()),
                        (this.isMiCardSound = t.readBoolean()),
                        (this.isMiCardHorizontal = t.readBoolean()),
                        (this.shareType = t.readByte()),
                        (this.isPassword = t.readBoolean());
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.bi = e),
            __reflect(e.prototype, 'VideoGameCore.Vip.VipBacSetInfoResp');
    })((e = t.Vip || (t.Vip = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.code = t.readUnsignedInt());
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.fC = e),
            __reflect(e.prototype, 'VideoGameCore.Vip.VipChangeDealerResp');
    })((e = t.Vip || (t.Vip = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.code = t.readUnsignedInt());
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.CC = e),
            __reflect(e.prototype, 'VideoGameCore.Vip.VipChangeShoeResp');
    })((e = t.Vip || (t.Vip = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.gameStatus = t.readByte()),
                        (this.vipStatus = t.readByte());
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.li = e),
            __reflect(e.prototype, 'VideoGameCore.Vip.VipEndMiCardResp');
    })((e = t.Vip || (t.Vip = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.cardIndex = t.readByte());
                    var e = t.readByte();
                    this.mouseInfos = new Array();
                    for (var i, r = 0; e > r; r++)
                        (i = new s.MiPai.MouseInfo()),
                            (i.x = t.readFloat()),
                            (i.y = t.readFloat()),
                            (i.baseX = t.readFloat()),
                            (i.baseY = t.readFloat()),
                            (i.rot1 = t.readByte()),
                            (i.rot2 = t.readByte()),
                            this.mouseInfos.push(i);
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.ar = e),
            __reflect(e.prototype, 'VideoGameCore.Vip.VipMouseMiCardExResp');
    })((t = s.Vip || (s.Vip = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.cardColor = t.readByte());
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t._i = e), __reflect(e.prototype, 'VideoGameCore.Vip.VipNewShoeResp');
    })((e = t.Vip || (t.Vip = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.repCode = t.readInt());
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.Vi = e),
            __reflect(e.prototype, 'VideoGameCore.Vip.VipSetPasswordResp');
    })((e = t.Vip || (t.Vip = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.gameStatus = t.readByte()),
                        (this.vipStatus = t.readByte()),
                        (this.miSide = t.readByte()),
                        (this.timeout = t.readShort());
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.Ci = e),
            __reflect(e.prototype, 'VideoGameCore.Vip.VipStartMiCardResp');
    })((e = t.Vip || (t.Vip = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    this.vidLimitSet = t.readUTFBytes(Core._n + 1);
                    var e = t.readUnsignedByte();
                    this.limitList = new Core.HashMap();
                    for (var i, r = 0; e > r; r++)
                        (i = new s.BetLimit()),
                            (i.playtype = t.readUnsignedByte()),
                            (i.min = t.readInt()),
                            0 == i.min && (i.min = 0.5),
                            (i.max = t.readInt()),
                            this.limitList.set(i.playtype, i);
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.VipVideoLimitSet = e),
            __reflect(e.prototype, 'VideoGameCore.Vip.VipVideoLimitSet');
    })((t = s.Vip || (s.Vip = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.$ = function(t) {
                    (this.vid = t.readUTFBytes(Core._n)),
                        (this.gmcode = t.readUTFBytes(Core.Pn)),
                        (this.who = t.readByte());
                }),
                e
            );
        })(Core.Network.ResponseBase);
        (t.fi = e),
            __reflect(e.prototype, 'VideoGameCore.Vip.VipWhoMiCardResp');
    })((e = t.Vip || (t.Vip = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(o) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.num = t.readByte()),
                    (this.beadList = []),
                    (this.roadZjhDataList = []);
                for (var e, i, r = 0; r < this.num; r++) {
                    (e = new o.RoadPaper.RoadZjhData()),
                        (e.gmcode = t.readUTFBytes(Core.Pn)),
                        (e.dragonResult = t.readByte()),
                        (e.phoenixResult = t.readByte()),
                        (e.result = t.readByte()),
                        (e.dCardList = []);
                    for (var s = 0; s < o.RoadPaper.ZJH_MAX_CARDS; s++) {
                        var n = t.readByte();
                        e.dCardList.push(n);
                    }
                    e.pCardList = [];
                    for (var s = 0; s < o.RoadPaper.ZJH_MAX_CARDS; s++) {
                        var n = t.readByte();
                        e.pCardList.push(n);
                    }
                    switch (((i = new o.RoadPaper.BeadData()), e.result)) {
                        case o.RoadPaper.ZjhWinType.NONE:
                            i.winType = o.RoadPaper.WinType.NONE;
                            break;
                        case o.RoadPaper.ZjhWinType.BLUE_WIN:
                            i.winType = o.RoadPaper.WinType.BLUE_WIN;
                            break;
                        case o.RoadPaper.ZjhWinType.RED_WIN:
                            i.winType = o.RoadPaper.WinType.RED_WIN;
                            break;
                        case o.RoadPaper.ZjhWinType.TIE:
                            i.winType = o.RoadPaper.WinType.TIE;
                    }
                    this.roadZjhDataList.push(e), this.beadList.push(i);
                }
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (o.$s = t), __reflect(t.prototype, 'VideoGameCore.ZjhBeadListResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.gmcode = t.readUTFBytes(Core.Pn)),
                    (this.status = t.readByte());
                var e;
                for (this.dragonCardlist = [], e = 0; 3 > e; e++)
                    this.dragonCardlist.push(t.readByte());
                for (this.phoenixCardlist = [], e = 0; 3 > e; e++)
                    this.phoenixCardlist.push(t.readByte());
                (this.timeout = t.readUnsignedShort()),
                    (this.max_timeout = t.readUnsignedShort()),
                    (this.result = new i.ZjhResultData(t.readUnsignedShort()));
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (i.Qs = t), __reflect(t.prototype, 'VideoGameCore.ZjhCurrentStatusResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.code = t.readUTFBytes(Core.Pn)),
                    (this.dragonCardList = []);
                for (var e, i = 0; 3 > i; i++)
                    (e = t.readUnsignedByte()), this.dragonCardList.push(e);
                this.phoenixCardList = [];
                for (var i = 0; 3 > i; i++)
                    (e = t.readUnsignedByte()), this.phoenixCardList.push(e);
                this.index = t.readByte();
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.dn = e), __reflect(e.prototype, 'VideoGameCore.ZjhDealCardListResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(n) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.payoutHashMap = new Core.ArrayMap()),
                    (this.gmcode = t.readUTFBytes(Core.Pn)),
                    (this.payout = t.readDouble()),
                    (this.payout = parseFloat(
                        Core.getStringFixed2(this.payout)
                    )),
                    (this.balance = t.readDouble()),
                    (this.ptNum = t.readUnsignedByte());
                for (var e = 0; e < this.ptNum; e++) {
                    var i,
                        r = t.readUnsignedShort(),
                        s = t.readDouble();
                    this.payoutHashMap.has(r)
                        ? ((i = this.payoutHashMap.get(r)), (i.value += s))
                        : ((i = new n.PlaytypePayout()),
                          (i.playtype = r),
                          (i.value = s)),
                        (i.value = parseFloat(Core.getStringFixed2(i.value))),
                        this.payoutHashMap.set(r, i);
                }
                Core.ExternalData.showSocketLog &&
                    dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (n.fn = t), __reflect(t.prototype, 'VideoGameCore.ZjhGamePayoutMeResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.gmcode = t.readUTFBytes(Core.Pn)),
                    (this.credit = t.readDouble()),
                    (this.ptPayouts = []);
                var e;
                this.betNum = t.readByte();
                for (var i = 0; i < this.betNum; i++)
                    (e = new r.PlaytypePayout()),
                        (e.playtype = t.readUnsignedShort()),
                        (e.value = t.readDouble()),
                        (e.value = parseFloat(Core.getStringFixed2(e.value))),
                        this.ptPayouts.push(e);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (r.ln = t), __reflect(t.prototype, 'VideoGameCore.ZjhGamePayoutOtherResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                this.vid = t.readUTFBytes(Core._n);
                var e = new s.RoadPaper.RoadZjhData();
                (e.gmcode = t.readUTFBytes(Core.Pn)),
                    (e.dragonResult = t.readByte()),
                    (e.phoenixResult = t.readByte()),
                    (e.result = t.readByte()),
                    (e.dCardList = []);
                for (var i = 0; i < s.RoadPaper.ZJH_MAX_CARDS; i++) {
                    var r = t.readByte();
                    e.dCardList.push(r);
                }
                e.pCardList = [];
                for (var i = 0; i < s.RoadPaper.ZJH_MAX_CARDS; i++) {
                    var r = t.readByte();
                    e.pCardList.push(r);
                }
                (this.info = e),
                    (this.code = e.gmcode),
                    (this.result = new s.ZjhResultData(t.readUnsignedShort()));
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (s.in = t), __reflect(t.prototype, 'VideoGameCore.ZjhGameResultResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.retCode = t.readUnsignedInt()),
                    (this.vid = t.readUTFBytes(Core._n)),
                    (this.deviceType = t.readByte());
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Js = e), __reflect(e.prototype, 'VideoGameCore.ZjhLoginGameResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                (this.vid = t.readUTFBytes(Core._n)),
                    (this.gmCode = t.readUTFBytes(Core.Pn));
                var e = t.readUnsignedByte(),
                    i = 0;
                this.betPoolInfos = new Core.HashMap();
                for (var r = 0; e > r; r++) {
                    i = t.readUnsignedShort();
                    var s = (t.readUnsignedInt(), t.readDouble());
                    this.betPoolInfos.set(i, s);
                }
                Core.ExternalData.showSocketLog &&
                    dclib(egret.getQualifiedClassName(this), this);
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (t.Gn = e), __reflect(e.prototype, 'VideoGameCore.ZjhPoolResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(a) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                this.vid = t.readUTFBytes(Core._n);
                var e = a.RoomConfig.instance.getRoomInfoByVid(this.vid);
                if (e) {
                    (this.num = t.readUnsignedInt()),
                        (this.bet = t.readUnsignedInt());
                    var i, r, s, n, o;
                    for (
                        this.betInfos = [],
                            this.credit_sum_amount =
                                t.readDouble() *
                                a.VideoPlazaStore.instance.currencyRate,
                            this.bet_sum_amount =
                                t.readDouble() *
                                a.VideoPlazaStore.instance.currencyRate,
                            r = a.ZJH_BET_PLAYTYPES.length,
                            i = 0;
                        r > i;
                        i++
                    )
                        (s = t.readUnsignedShort()),
                            (n = t.readUnsignedShort()),
                            (o =
                                t.readDouble() *
                                a.VideoPlazaStore.instance.currencyRate),
                            this.betInfos.push({
                                playType: s,
                                count: n,
                                amount: o
                            });
                    Core.ExternalData.showSocketLog &&
                        dclib(egret.getQualifiedClassName(this), this);
                }
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (a.hn = t),
        __reflect(t.prototype, 'VideoGameCore.ZjhVideoRealtimeInfoResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(t) {
        function e() {
            return (null !== t && t.apply(this, arguments)) || this;
        }
        return (
            __extends(e, t),
            (e.prototype.$ = function(t) {
                this.vid = t.readUTFBytes(Core._n);
                var e = i.RoomConfig.instance.getRoomInfoByVid(this.vid);
                e &&
                    ((this.gmcode = t.readUTFBytes(Core.Pn)),
                    (this.status = t.readByte()),
                    (this.timeout = t.readUnsignedShort()),
                    (this.max_timeout = t.readUnsignedShort()));
            }),
            e
        );
    })(Core.Network.ResponseBase);
    (i.sn = t), __reflect(t.prototype, 'VideoGameCore.ZjhVideoStatusInfoResp');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        function e(t) {
            var e;
            switch (t) {
                case i.RED_WIN:
                    e = 13769240;
                    break;
                case i.BLUE_WIN:
                    e = 3618291;
                    break;
                case i.TIE:
                    e = 3773753;
                    break;
                default:
                    e = 9265422;
            }
            return e;
        }
        (t.MAX_MAP_X = 200), (t.MAX_MAP_Y = 6);
        var i;
        !(function(t) {
            (t[(t.NONE = 0)] = 'NONE'),
                (t[(t.RED_WIN = 1)] = 'RED_WIN'),
                (t[(t.BLUE_WIN = 2)] = 'BLUE_WIN'),
                (t[(t.TIE = 3)] = 'TIE');
        })((i = t.WinType || (t.WinType = {}))),
            (t.getColorByWinType = e);
        var r = (function() {
            function t(t) {
                void 0 === t && (t = i.NONE),
                    (this.winType = i.NONE),
                    (this.tieNum = 0),
                    (this.winNum = 0),
                    (this.redPair = !1),
                    (this.bluePair = !1),
                    (this.winType = t);
            }
            return t;
        })();
        (t.BeadData = r),
            __reflect(r.prototype, 'VideoGameCore.RoadPaper.BeadData');
    })((e = t.RoadPaper || (t.RoadPaper = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(a) {
        var t = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.drawMap = function(t) {
                    void 0 === t && (t = -1), (this.colOffset = 0 > t ? 0 : t);
                    var e = Math.ceil(this.listData.length / this.rowNum);
                    (this.maxOffset = e),
                        e > this.colNum &&
                            0 > t &&
                            (this.colOffset = e - this.colNum);
                    for (
                        var i = Math.min(
                                this.listData.length -
                                    this.colOffset * this.rowNum,
                                this.colNum * this.rowNum
                            ),
                            r = 0;
                        i > r;
                        r++
                    ) {
                        var s = r % this.rowNum,
                            n = Math.floor((i - (r + 1)) / this.rowNum);
                        (this.isNewestResult = r + 1 == i),
                            this.drawBead(
                                this.listData[r + this.colOffset * this.rowNum],
                                n,
                                s
                            );
                    }
                    this.cacheAsBitmap = !0;
                }),
                (e.prototype.drawBead = function(t, e, i) {
                    var r = this.getBitmapByBead(t);
                    (r.width = this.gridSize),
                        (r.height = this.height),
                        (r.x = e * this.gridSize),
                        (r.y = i * this.height),
                        this.addChildAt(r, 0);
                }),
                (e.prototype.getBitmapByBead = function(t) {
                    var e = (this.numChildren, t.toString()),
                        i =
                            0 == t
                                ? 1805115
                                : a.rouResultIsRed(t) && !this.isNewestResult
                                    ? 16199472
                                    : 16777215,
                        r = new egret.Sprite();
                    if (this.isNewestResult) {
                        var s = a.rouResultIsRed(t) ? 8000016 : 0;
                        r.graphics.beginFill(s),
                            r.graphics.drawRect(
                                0,
                                0,
                                this.gridSize,
                                this.height
                            ),
                            r.graphics.endFill();
                    }
                    var n = 0.5 * this.height,
                        o = new eui.Label();
                    return (
                        r.addChildAt(o, 1),
                        (o.size = 1.2 * n),
                        (o.text = e),
                        (o.textColor = i),
                        (o.x = 0),
                        (o.y = 0),
                        (o.width = this.gridSize),
                        (o.height = this.height),
                        (o.textAlign = 'center'),
                        (o.verticalAlign = 'middle'),
                        r
                    );
                }),
                (e.prototype.drawGridPaper = function() {
                    this.graphics.lineStyle(
                        2 * this.gridLineWidth,
                        this.edgeGridColor,
                        this.edgeGridAlpha
                    ),
                        this.graphics.drawRect(0, 0, this.width, this.height),
                        this.graphics.lineStyle(
                            this.gridLineWidth,
                            this.gridColor,
                            this.gridAlpha
                        );
                    for (var t = 1; t < this.rowNum; t++)
                        t % this.bundleSize == 0 &&
                            (this.graphics.moveTo(0, t * this.height),
                            this.graphics.lineTo(this.width, t * this.height));
                    for (var t = 1; t < this.colNum; t++)
                        t % this.bundleSize == 0 &&
                            (this.graphics.moveTo(t * this.gridSize, 0),
                            this.graphics.lineTo(
                                t * this.gridSize,
                                this.height
                            ));
                }),
                e
            );
        })(a.RoadRouMainPaper);
        (a.EuRoadRouMainPaper = t),
            __reflect(
                t.prototype,
                'VideoGameCore.RoadPaper.EuRoadRouMainPaper'
            );
    })((e = t.RoadPaper || (t.RoadPaper = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function() {
            function t(t, e, i, r, s, n) {
                (this.imageHeight = 41),
                    (this.paper = t),
                    (this.container = t.parent),
                    (this.gridSize = r),
                    (this.width = e),
                    (this.height = i),
                    (this.offset = s),
                    (this.offset2 = n + 1),
                    (this.offsetWidth = s * e),
                    (this.offsetHeight = s * i),
                    (this.btnUp = new eui.Image('nav_asset_json.road_arrow')),
                    (this.btnUp.y = (i - this.imageHeight) / 2),
                    (this.btnDown = new eui.Image('nav_asset_json.road_arrow')),
                    (this.btnDown.y = (i - this.imageHeight) / 2),
                    (this.btnDown.x = e - this.btnDown.width),
                    (this.btnDown.scaleX = -1),
                    this.container.addChild(this.btnUp),
                    this.container.addChild(this.btnDown),
                    (this.container.mask = new egret.Rectangle(0, 0, e, i)),
                    this.btnUp.addEventListener(
                        egret.TouchEvent.TOUCH_TAP,
                        this.onTapUp,
                        this
                    ),
                    this.btnDown.addEventListener(
                        egret.TouchEvent.TOUCH_TAP,
                        this.onTapDown,
                        this
                    ),
                    this.paper.addEventListener(
                        egret.Event.CHANGE,
                        this.onDataChange,
                        this
                    );
            }
            return (
                (t.prototype.onTapUp = function() {
                    this.paper.setColOffset(this.paper.colOffset - 1),
                        this.checkShowBtn();
                }),
                (t.prototype.onTapDown = function() {
                    this.paper.setColOffset(this.paper.colOffset + 1),
                        this.checkShowBtn();
                }),
                (t.prototype.onDataChange = function() {
                    this.checkShowBtn();
                }),
                (t.prototype.checkShowBtn = function() {
                    (this.btnUp.visible = this.paper.colOffset > 0),
                        (this.btnDown.visible =
                            this.paper.colOffset <
                            this.paper.maxOffset - this.paper.colNum);
                }),
                (t.prototype.update = function() {
                    this.onDataChange();
                }),
                t
            );
        })();
        (t.PaperNavigatorAttacher = e),
            __reflect(
                e.prototype,
                'VideoGameCore.RoadPaper.PaperNavigatorAttacher'
            );
    })((e = t.RoadPaper || (t.RoadPaper = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function() {
            function t() {}
            return t;
        })();
        (t.RoadBjData = e),
            __reflect(e.prototype, 'VideoGameCore.RoadPaper.RoadBjData');
    })((e = t.RoadPaper || (t.RoadPaper = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        var e = (function() {
            function t() {}
            return (
                Object.defineProperty(t.prototype, 'player_3_win', {
                    get: function() {
                        return (4 & this.res) >> 2;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, 'player_2_win', {
                    get: function() {
                        return (2 & this.res) >> 1;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, 'player_1_win', {
                    get: function() {
                        return 1 & this.res;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                t
            );
        })();
        (t.RoadBullData = e),
            __reflect(e.prototype, 'VideoGameCore.RoadPaper.RoadBullData');
    })((e = t.RoadPaper || (t.RoadPaper = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(n) {
        var t = (function(s) {
            function t(t, e, i) {
                void 0 === i && (i = 1.5);
                var r = s.call(this, t, e) || this;
                return (
                    (r.circleWidth = i),
                    (r.radius =
                        (r.gridSize - r.gridLineWidth - r.circleWidth) / 2 -
                        0.5),
                    r
                );
            }
            return (
                __extends(t, s),
                (t.prototype.drawBead = function(t, e, i) {
                    if (t.winType != n.WinType.NONE) {
                        switch (t.winType) {
                            case n.WinType.RED_WIN:
                                this.graphics.lineStyle(
                                    this.circleWidth,
                                    this.redWinColor
                                );
                                break;
                            case n.WinType.BLUE_WIN:
                                this.graphics.lineStyle(
                                    this.circleWidth,
                                    this.blueWinColor
                                );
                        }
                        if (
                            (t.winType != n.WinType.TIE &&
                                this.graphics.drawCircle(
                                    (0.5 + e) * this.gridSize,
                                    (0.5 + i) * this.gridSize,
                                    this.radius
                                ),
                            t.tieNum > 1)
                        ) {
                            var r = new egret.TextField();
                            (r.text = '' + t.tieNum),
                                (r.size = this.gridSize - 2),
                                (r.textColor = 0),
                                (r.anchorOffsetX = r.width / 2),
                                (r.anchorOffsetY = r.height / 2),
                                (r.x = (0.5 + e) * this.gridSize),
                                (r.y = (0.5 + i) * this.gridSize),
                                this.addChild(r);
                        }
                        (t.tieNum > 0 || t.winType == n.WinType.TIE) &&
                            (this.graphics.lineStyle(this.circleWidth, 3578627),
                            this.graphics.moveTo(
                                (e + 1) * this.gridSize - this.circleWidth,
                                i * this.gridSize + this.circleWidth
                            ),
                            this.graphics.lineTo(
                                e * this.gridSize + this.circleWidth,
                                (i + 1) * this.gridSize - this.circleWidth
                            )),
                            this.graphics.endFill();
                    }
                }),
                t
            );
        })(n.RoadPaperBase);
        (n.RoadDaLuPaper = t),
            __reflect(t.prototype, 'VideoGameCore.RoadPaper.RoadDaLuPaper');
    })((e = t.RoadPaper || (t.RoadPaper = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(h) {
        var t = (function() {
            function t(t) {
                (this.redCount = 0),
                    (this.redPairCount = 0),
                    (this.blueCount = 0),
                    (this.bluePairCount = 0),
                    (this.tieCount = 0),
                    (this.totalCount = 0),
                    (this.tieNumLastGmCode = '');
                for (var e, i = 0; i < t.length; i++) {
                    switch (((e = t[i]), e.winType)) {
                        case h.WinType.RED_WIN:
                            this.redCount++;
                            break;
                        case h.WinType.BLUE_WIN:
                            this.blueCount++;
                            break;
                        case h.WinType.TIE:
                            this.tieCount++;
                    }
                    e.redPair && this.redPairCount++,
                        e.bluePair && this.bluePairCount++;
                }
                (this.totalCount = t.length),
                    (this.zhuZaiLuData = t.slice()),
                    (this.daLuProto = this.calculateDaLuProto(t)),
                    (this.daLuData = this.bendColumn(this.daLuProto)),
                    (this.daYanLuData = this.calculateDaYanLu()),
                    (this.xiaoLuData = this.calculateXiaoLu()),
                    (this.xiaoQiangLuData = this.calculateXiaoQiangLu());
            }
            return (
                Object.defineProperty(t.prototype, 'lastGmCode', {
                    get: function() {
                        return this.zhuZaiLuData.length > 0
                            ? this.zhuZaiLuData[this.zhuZaiLuData.length - 1]
                                  .gmcode
                            : '';
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.reset = function() {
                    (this.daLuProto = []),
                        (this.zhuZaiLuData = []),
                        (this.daLuData = this.bendColumn(this.daLuProto)),
                        (this.daYanLuData = this.calculateDaYanLu()),
                        (this.xiaoLuData = this.calculateXiaoLu()),
                        (this.xiaoQiangLuData = this.calculateXiaoQiangLu()),
                        (this.redCount = 0),
                        (this.blueCount = 0),
                        (this.tieCount = 0),
                        (this.totalCount = 0);
                }),
                (t.prototype.calculateDaLuProto = function(t) {
                    var e = new h.BeadData(h.WinType.TIE);
                    this.tieNumLastGmCode = '';
                    for (
                        var i = 0;
                        i < t.length && t[i].winType == h.WinType.TIE;
                        i++
                    )
                        e.tieNum++, (this.tieNumLastGmCode = e.gmcode);
                    for (var r = [], s = e.tieNum; s < t.length; )
                        s = this.extractColumn(t, r, s);
                    return e.tieNum > 0 && (r = [[e]].concat(r)), r;
                }),
                (t.prototype.appendDaLuProto = function(t) {
                    if (0 == this.daLuProto.length)
                        t.winType == h.WinType.TIE && (t.tieNum = 1),
                            (this.daLuProto = [[t]]);
                    else {
                        var e = this.daLuProto[this.daLuProto.length - 1],
                            i = e[e.length - 1];
                        t.winType == h.WinType.TIE &&
                        this.tieNumLastGmCode != t.gmcode
                            ? (i.tieNum++, (this.tieNumLastGmCode = t.gmcode))
                            : t.winType == i.winType
                                ? e.push(t)
                                : t.winType != i.winType &&
                                  this.daLuProto.push([t]);
                    }
                    switch (
                        (this.zhuZaiLuData.push(t),
                        (this.daLuData = this.bendColumn(this.daLuProto)),
                        (this.daYanLuData = this.calculateDaYanLu()),
                        (this.xiaoLuData = this.calculateXiaoLu()),
                        (this.xiaoQiangLuData = this.calculateXiaoQiangLu()),
                        t.winType)
                    ) {
                        case h.WinType.RED_WIN:
                            this.redCount++;
                            break;
                        case h.WinType.BLUE_WIN:
                            this.blueCount++;
                            break;
                        case h.WinType.TIE:
                            this.tieCount++;
                    }
                    t.redPair && this.redPairCount++,
                        t.bluePair && this.bluePairCount++,
                        this.totalCount++;
                }),
                (t.prototype.extractColumn = function(t, e, i) {
                    var r = t[i];
                    r.tieNum = 0;
                    var s,
                        n = [r];
                    this.tieNumLastGmCode = '';
                    for (var o = i + 1; o < t.length; o++)
                        if (
                            ((s = t[o]), (s.tieNum = 0), s.winType == r.winType)
                        )
                            n.push(s);
                        else {
                            if (s.winType != h.WinType.TIE) return e.push(n), o;
                            n[n.length - 1].tieNum++,
                                (this.tieNumLastGmCode = s.gmcode);
                        }
                    return e.push(n), o;
                }),
                (t.prototype.bendColumn = function(t) {
                    for (var e = [], i = 0; i < t.length; i++) {
                        e[i] || (e[i] = this.createEmptyCol());
                        for (var r = 1, s = -1, n = 0; n < t[i].length; n++)
                            if (
                                n < h.MAX_MAP_Y &&
                                e[i][n].winType == h.WinType.NONE &&
                                -1 == s
                            )
                                e[i][n] = t[i][n];
                            else {
                                0 > s && (s = n - 1);
                                var o = i + r;
                                e[o] || (e[o] = this.createEmptyCol()),
                                    (e[o][s] = t[i][n]),
                                    r++;
                            }
                    }
                    return e;
                }),
                (t.prototype.createEmptyCol = function() {
                    for (var t = [], e = 0; e < h.MAX_MAP_Y; e++)
                        t.push(new h.BeadData());
                    return t;
                }),
                (t.prototype.calculateDaYanLu = function() {
                    if (this.daLuProto.length < 2) return [];
                    var t = 1,
                        e = 1;
                    if (this.daLuProto[1].length < 2) {
                        if (
                            this.daLuProto.length < 3 ||
                            this.daLuProto[2].length < 1
                        )
                            return [];
                        (t = 2), (e = 0);
                    }
                    for (var i = [], r = t; r < this.daLuProto.length; r++)
                        for (var s = 0; s < this.daLuProto[r].length; s++)
                            if (!(r == t && e > s)) {
                                var n = new h.BeadData();
                                (n.winType = this.calculateWinType(s, r, 1)),
                                    i.push(n);
                            }
                    for (var o = [], a = 0; a < i.length; )
                        a = this.extractColumn(i, o, a);
                    return this.bendColumn(o);
                }),
                (t.prototype.calculateXiaoLu = function() {
                    if (this.daLuProto.length < 3) return [];
                    var t = 2,
                        e = 1;
                    if (this.daLuProto[2].length < 2) {
                        if (
                            this.daLuProto.length < 4 ||
                            this.daLuProto[3].length < 1
                        )
                            return [];
                        (t = 3), (e = 0);
                    }
                    for (var i = [], r = t; r < this.daLuProto.length; r++)
                        for (var s = 0; s < this.daLuProto[r].length; s++)
                            if (!(r == t && e > s)) {
                                var n = new h.BeadData();
                                (n.winType = this.calculateWinType(s, r, 2)),
                                    i.push(n);
                            }
                    for (var o = [], a = 0; a < i.length; )
                        a = this.extractColumn(i, o, a);
                    return this.bendColumn(o);
                }),
                (t.prototype.calculateXiaoQiangLu = function() {
                    if (this.daLuProto.length < 4) return [];
                    var t = 3,
                        e = 1;
                    if (this.daLuProto[3].length < 2) {
                        if (
                            this.daLuProto.length < 5 ||
                            this.daLuProto[4].length < 1
                        )
                            return [];
                        (t = 4), (e = 0);
                    }
                    for (var i = [], r = t; r < this.daLuProto.length; r++)
                        for (var s = 0; s < this.daLuProto[r].length; s++)
                            if (!(r == t && e > s)) {
                                var n = new h.BeadData();
                                (n.winType = this.calculateWinType(s, r, 3)),
                                    i.push(n);
                            }
                    for (var o = [], a = 0; a < i.length; )
                        a = this.extractColumn(i, o, a);
                    return this.bendColumn(o);
                }),
                (t.prototype.calculateWinType = function(t, e, i) {
                    return 0 == t
                        ? this.ZhengQi(e, i)
                            ? h.WinType.RED_WIN
                            : h.WinType.BLUE_WIN
                        : this.ZhiLuo(t, e, i)
                            ? h.WinType.RED_WIN
                            : this.YouWu(t, e, i)
                                ? h.WinType.RED_WIN
                                : h.WinType.BLUE_WIN;
                }),
                (t.prototype.ZhengQi = function(t, e) {
                    return (
                        t - 1 - e >= 0 &&
                        this.daLuProto[t - 1].length ==
                            this.daLuProto[t - 1 - e].length
                    );
                }),
                (t.prototype.YouWu = function(t, e, i) {
                    return e - i >= 0 && this.daLuProto[e - i].length > t;
                }),
                (t.prototype.ZhiLuo = function(t, e, i) {
                    return (
                        e - i >= 0 &&
                        !this.YouWu(t, e, i) &&
                        !this.YouWu(t - 1, e, i)
                    );
                }),
                (t.prototype.getLastDaLuStr = function(t) {
                    void 0 === t && (t = 8);
                    for (
                        var e = '',
                            i =
                                t > this.daLuProto.length
                                    ? 0
                                    : this.daLuProto.length - t,
                            r = i;
                        r < this.daLuProto.length;
                        r++
                    ) {
                        e += '-';
                        for (
                            var s = this.daLuProto[r], n = 0;
                            n < s.length;
                            n++
                        ) {
                            var o = s[n];
                            e += o.winType;
                        }
                    }
                    return e;
                }),
                t
            );
        })();
        (h.RoadData = t),
            __reflect(t.prototype, 'VideoGameCore.RoadPaper.RoadData');
    })((e = t.RoadPaper || (t.RoadPaper = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(r) {
        var t = (function(s) {
            function t(t, e, i) {
                void 0 === i && (i = 1);
                var r = s.call(this, t, e, 2) || this;
                return (
                    (r.circleWidth = i),
                    (r.radius =
                        (r.gridSize - r.gridLineWidth - r.circleWidth) / 2),
                    r
                );
            }
            return (
                __extends(t, s),
                (t.prototype.drawBead = function(t, e, i) {
                    if (0 != t.winType) {
                        switch (t.winType) {
                            case r.WinType.RED_WIN:
                                this.graphics.lineStyle(
                                    this.circleWidth,
                                    this.redWinColor
                                );
                                break;
                            case r.WinType.BLUE_WIN:
                                this.graphics.lineStyle(
                                    this.circleWidth,
                                    this.blueWinColor
                                );
                        }
                        this.graphics.drawCircle(
                            (0.5 + e) * this.gridSize,
                            (0.5 + i) * this.gridSize,
                            this.radius
                        ),
                            this.graphics.endFill();
                    }
                }),
                t
            );
        })(r.RoadPaperBase);
        (r.RoadDaYanLuPaper = t),
            __reflect(t.prototype, 'VideoGameCore.RoadPaper.RoadDaYanLuPaper');
    })((e = t.RoadPaper || (t.RoadPaper = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(i) {
        function t(t) {
            var e = i.ROU_RED_LIST;
            return e.lastIndexOf(t) > -1;
        }
        function e(t) {
            return t % 2 == 1;
        }
        function r(t) {
            return 19 > t;
        }
        function s(t) {
            return t >= 1 && 12 >= t
                ? 1
                : t >= 13 && 24 >= t
                    ? 2
                    : t >= 25 && 36 >= t
                        ? 3
                        : 0;
        }
        function n(t) {
            if (t > 0) {
                var e = t % 3;
                return 0 == e ? 3 : e;
            }
            return 0;
        }
        i.ROU_RED_LIST = [
            1,
            3,
            5,
            7,
            9,
            12,
            14,
            16,
            18,
            19,
            21,
            23,
            25,
            27,
            30,
            32,
            34,
            36
        ];
        var o = (function() {
            function t(t) {
                (this.resultList = []),
                    (this.bigCount = 0),
                    (this.smallCount = 0),
                    (this.zeroCount = 0),
                    (this.oddCount = 0),
                    (this.evenCount = 0),
                    (this.roadData = []),
                    (this.roadData = t);
                for (var e = 0; e < t.length; e++) this.countData(t[e]);
            }
            return (
                (t.prototype.countData = function(t) {
                    var e = t.res;
                    this.resultList.push(e),
                        0 == e
                            ? this.zeroCount++
                            : 19 > e
                                ? this.smallCount++
                                : this.bigCount++,
                        e > 0 &&
                            (e % 2 == 0 ? this.evenCount++ : this.oddCount++);
                }),
                (t.prototype.addData = function(t) {
                    var e = new a();
                    (e.code = t.code),
                        (e.res = t.result),
                        (e.resbit = t.resultBit),
                        this.roadData.push(e),
                        this.countData(e),
                        this.cleanUpData();
                }),
                (t.prototype.cleanUpData = function() {
                    this.roadData.length >= 150 &&
                        ((this.roadData = this.roadData.slice(5)),
                        (this.resultList = this.resultList.slice(5)));
                }),
                t
            );
        })();
        (i.RoadRouDataChart = o),
            __reflect(o.prototype, 'VideoGameCore.RoadPaper.RoadRouDataChart');
        var a = (function() {
            function t() {}
            return t;
        })();
        (i.RoadRouData = a),
            __reflect(a.prototype, 'VideoGameCore.RoadPaper.RoadRouData'),
            (i.rouResultIsRed = t),
            (i.rouResultIsOdd = e),
            (i.rouResultIsSmall = r),
            (i.rouResultRow = s),
            (i.rouResultColumn = n);
    })((e = t.RoadPaper || (t.RoadPaper = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(n) {
        var t = (function(s) {
            function t(t, e, i) {
                void 0 === i && (i = 6);
                var r = s.call(this, t, e, 1, i) || this;
                return (
                    (r.listData = []),
                    (r.drawList = [[]]),
                    (r.defaultColNum = r.colNum),
                    r
                );
            }
            return (
                __extends(t, s),
                (t.prototype.setListData = function(t, e) {
                    void 0 === e && (e = -1),
                        (this.listData = t),
                        this.removeChildren(),
                        this.drawMap(e),
                        this.dispatchEventWith(egret.Event.CHANGE);
                }),
                (t.prototype.drawMap = function(t) {
                    void 0 === t && (t = -1), this.genDrawList(t);
                    for (var e = 0; e < this.drawList.length; e++)
                        for (
                            var i = this.drawList[e], r = 0;
                            r < i.length;
                            r++
                        ) {
                            var s = i[r];
                            s > -1 && this.drawBead(s, e, r);
                        }
                    this.cacheAsBitmap = !0;
                }),
                (t.prototype.genDrawList = function(t) {
                    void 0 === t && (t = -1), (this.colOffset = 0 > t ? 0 : t);
                    var e = this.listData.length;
                    (this.maxOffset = e),
                        e > this.colNum &&
                            (0 > t
                                ? ((this.colNum = this.defaultColNum - 1),
                                  (this.colOffset = e - this.colNum))
                                : (this.colNum = this.defaultColNum)),
                        (this.drawList = []);
                    for (
                        var i, r = 0;
                        r <
                        Math.min(
                            this.listData.length - this.colOffset,
                            this.colNum
                        );
                        r++
                    ) {
                        i = [-1, -1, -1, -1, -1, -1, -1];
                        var s = this.listData[r + this.colOffset];
                        0 == s
                            ? (i[3] = 0)
                            : ((i[n.rouResultRow(s) - 1] = 1),
                              (i[n.rouResultColumn(s) + 3] = 2)),
                            this.drawList.push(i);
                    }
                }),
                (t.prototype.drawBead = function(t, e, i) {
                    var r = this.getBitmapByBead(t);
                    (r.width = this.gridSize),
                        (r.height = this.gridSize),
                        (r.x = e * this.gridSize),
                        (r.y = i * this.gridSize),
                        this.addChildAt(r, 0);
                }),
                (t.prototype.getBitmapByBead = function(t) {
                    var e = 0 == t ? 3578627 : 1 == t ? 14619414 : 263117,
                        i = this.gridSize,
                        r = new egret.Sprite();
                    r.graphics.beginFill(e, 1);
                    var s = 0.5 * i;
                    return (
                        r.graphics.drawCircle(s, s, s - 2),
                        r.graphics.endFill(),
                        r
                    );
                }),
                (t.prototype.refresh = function() {
                    this.removeChildren(), this.drawMap();
                }),
                (t.prototype.setColOffset = function(t) {
                    0 > t && (t = 0), this.removeChildren(), this.drawMap(t);
                }),
                t
            );
        })(n.GridPaper);
        (n.RoadRouRowPaper = t),
            __reflect(t.prototype, 'VideoGameCore.RoadPaper.RoadRouRowPaper');
    })((e = t.RoadPaper || (t.RoadPaper = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(o) {
        var t = (function(n) {
            function t(t, e, i, r) {
                void 0 === r && (r = 6);
                var s = n.call(this, t, e, 1, r) || this;
                return (
                    (s.listData = []),
                    (s.drawList = [[]]),
                    (s.mapType = 0),
                    (s.displayKey = i),
                    (s.defaultColNum = s.colNum),
                    s
                );
            }
            return (
                __extends(t, n),
                (t.prototype.setListData = function(t, e) {
                    void 0 === e && (e = -1),
                        (this.listData = t),
                        this.removeChildren(),
                        this.drawMap(e),
                        this.dispatchEventWith(egret.Event.CHANGE);
                }),
                (t.prototype.setMapType = function(t) {
                    (this.mapType = t), this.refresh();
                }),
                (t.prototype.drawMap = function(t) {
                    void 0 === t && (t = -1), this.genDrawList();
                    var e = 0,
                        i = this.rowNum,
                        r = [];
                    this.colOffset = 0 > t ? 0 : t;
                    var s = this.drawList.length;
                    (this.maxOffset = s),
                        s > this.colNum &&
                            (0 > t
                                ? ((this.colNum = this.defaultColNum - 1),
                                  (this.colOffset = s - this.colNum))
                                : (this.colNum = this.defaultColNum));
                    for (
                        var n = 0;
                        n < Math.min(this.drawList.length, this.colNum);
                        n++
                    ) {
                        for (
                            var o = this.drawList[n + this.colOffset], a = 0;
                            a < o.length;
                            a++
                        ) {
                            var h = n + e,
                                u = 0;
                            for (
                                i > a
                                    ? ((u = a),
                                      -1 != r.lastIndexOf(h + ':' + u) &&
                                          (e++, u--, (i = u + 1)))
                                    : ((u = i - 1), e++);
                                -1 != r.lastIndexOf(n + e + ':' + u);

                            )
                                u--, (i = u + 1);
                            (h = n + e),
                                r.push(h + ':' + u),
                                this.drawBead(o[a], h, u);
                        }
                        (e = 0), (i = this.rowNum);
                    }
                    this.cacheAsBitmap = !0;
                }),
                (t.prototype.genDrawList = function() {
                    this.drawList = [];
                    for (
                        var t = [], e = 0, i = 0;
                        i < this.listData.length;
                        i++
                    ) {
                        var r = this.listData[i],
                            s = void 0;
                        switch (this.mapType) {
                            case 1:
                                s = 0 == r ? 0 : o.rouResultIsSmall(r) ? 2 : 1;
                                break;
                            case 2:
                                s = 0 == r ? 0 : o.rouResultIsOdd(r) ? 1 : 2;
                                break;
                            default:
                                s = 0 == r ? 0 : o.rouResultIsRed(r) ? 1 : 2;
                        }
                        e == s
                            ? t.push(s)
                            : (t.length > 0 && this.drawList.push(t),
                              (t = []),
                              t.push(s)),
                            (e = s);
                    }
                    t.length > 0 && this.drawList.push(t);
                }),
                (t.prototype.drawBead = function(t, e, i) {
                    var r = this.getBitmapByBead(t);
                    (r.width = this.gridSize),
                        (r.height = this.gridSize),
                        (r.x = e * this.gridSize),
                        (r.y = i * this.gridSize),
                        this.addChildAt(r, 0);
                }),
                (t.prototype.getBitmapByBead = function(t) {
                    var e = this.gridSize,
                        i = 0.5 * e,
                        r = new egret.Sprite(),
                        s = new eui.Label();
                    return (
                        r.addChildAt(s, 1),
                        (s.size = 1.3 * i),
                        this.setMsg(s, t),
                        (s.x = 0),
                        (s.y = 0),
                        (s.width = e),
                        (s.height = e),
                        (s.textAlign = 'center'),
                        (s.verticalAlign = 'middle'),
                        (s.bold = !0),
                        r
                    );
                }),
                (t.prototype.setMsg = function(t, e) {
                    0 == this.mapType &&
                        ((t.text =
                            0 == e
                                ? Core.translate(this.displayKey[0])
                                : 1 == e
                                    ? Core.translate(this.displayKey[1])
                                    : Core.translate(this.displayKey[2])),
                        (t.textColor =
                            0 == e ? 3578627 : 1 == e ? 14619414 : 0)),
                        1 == this.mapType &&
                            ((t.text =
                                0 == e
                                    ? Core.translate(this.displayKey[0])
                                    : 1 == e
                                        ? Core.translate(this.displayKey[3])
                                        : Core.translate(this.displayKey[4])),
                            (t.textColor =
                                0 == e ? 3578627 : 1 == e ? 14619414 : 263117)),
                        2 == this.mapType &&
                            ((t.text =
                                0 == e
                                    ? Core.translate(this.displayKey[0])
                                    : 1 == e
                                        ? Core.translate(this.displayKey[5])
                                        : Core.translate(this.displayKey[6])),
                            (t.textColor =
                                0 == e ? 3578627 : 1 == e ? 263117 : 14619414));
                }),
                (t.prototype.refresh = function() {
                    this.removeChildren(), this.drawMap();
                }),
                (t.prototype.setColOffset = function(t) {
                    0 > t && (t = 0), this.removeChildren(), this.drawMap(t);
                }),
                t
            );
        })(o.GridPaper);
        (o.RoadRouSubPaper = t),
            __reflect(t.prototype, 'VideoGameCore.RoadPaper.RoadRouSubPaper');
    })((e = t.RoadPaper || (t.RoadPaper = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        function r(t, e, i) {
            return t + e + i;
        }
        function i(t, e, i) {
            return r(t, e, i) % 2 == 1;
        }
        function s(t, e, i) {
            return r(t, e, i) <= 10;
        }
        function n(t, e, i) {
            return t == e && t == i && e == i;
        }
        var e = (function() {
            function t(t) {
                (this.roadData = []),
                    (this.resultList = []),
                    (this.bigCount = 0),
                    (this.smallCount = 0),
                    (this.zeroCount = 0),
                    (this.oddCount = 0),
                    (this.evenCount = 0),
                    (this.roadData = t);
                for (var e = 0; e < t.length; e++) this.countData(t[e]);
            }
            return (
                (t.prototype.countData = function(t) {
                    var e = n(t.dice1, t.dice2, t.dice3);
                    this.resultList.push({
                        num1: t.dice1,
                        num2: t.dice2,
                        num3: t.dice3
                    }),
                        this.resultList.length > 12 &&
                            (this.resultList = this.resultList.slice(4)),
                        e
                            ? this.zeroCount++
                            : s(t.dice1, t.dice2, t.dice3)
                                ? this.smallCount++
                                : this.bigCount++,
                        e ||
                            (i(t.dice1, t.dice2, t.dice3)
                                ? this.oddCount++
                                : this.evenCount++);
                }),
                (t.prototype.addData = function(t) {
                    var e = new o();
                    (e.code = t.code),
                        (e.dice1 = t.info.dice1),
                        (e.dice2 = t.info.dice2),
                        (e.dice3 = t.info.dice3),
                        this.roadData.push(e),
                        this.countData(e),
                        this.cleanUpData();
                }),
                (t.prototype.cleanUpData = function() {
                    this.roadData.length >= 150 &&
                        (this.roadData = this.roadData.slice(5));
                }),
                t
            );
        })();
        (t.RoadShbDataChart = e),
            __reflect(e.prototype, 'VideoGameCore.RoadPaper.RoadShbDataChart');
        var o = (function() {
            function t() {}
            return t;
        })();
        (t.RoadShbData = o),
            __reflect(o.prototype, 'VideoGameCore.RoadPaper.RoadShbData'),
            (t.shbGetResultSum = r),
            (t.shbResultSumIsOdd = i),
            (t.shbResultSumIsSmall = s),
            (t.shbResultIsTriple = n);
    })((e = t.RoadPaper || (t.RoadPaper = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(n) {
        var t = (function(s) {
            function t(t, e, i) {
                void 0 === i && (i = 6);
                var r = s.call(this, t, e, 1, i) || this;
                return (
                    (r.mapType = 0),
                    (r.totalTextSize = 0),
                    (r.diceTextSize = 0),
                    r
                );
            }
            return (
                __extends(t, s),
                (t.prototype.setListData = function(t, e) {
                    void 0 === e && (e = -1),
                        (this.listData = t),
                        this.removeChildren(),
                        this.drawMap(e),
                        this.dispatchEventWith(egret.Event.CHANGE);
                }),
                (t.prototype.setMapType = function(t) {
                    (this.mapType = t), this.refresh();
                }),
                (t.prototype.drawMap = function(t) {
                    void 0 === t && (t = -1), (this.colOffset = 0 > t ? 0 : t);
                    var e = Math.ceil(this.listData.length / this.rowNum);
                    (this.maxOffset = e),
                        e > this.colNum &&
                            0 > t &&
                            (this.colOffset = e - this.colNum);
                    for (
                        var i = 0;
                        i <
                        Math.min(
                            this.listData.length - this.colOffset * this.rowNum,
                            this.colNum * this.rowNum
                        );
                        i++
                    ) {
                        var r = i % this.rowNum,
                            s = Math.floor(i / this.rowNum);
                        this.drawBead(
                            this.listData[i + this.colOffset * this.rowNum],
                            s,
                            r
                        );
                    }
                    this.cacheAsBitmap = !0;
                }),
                (t.prototype.drawBead = function(t, e, i) {
                    var r = this.getBitmapByBead(t);
                    (r.width = this.gridSize),
                        (r.height = this.gridSize),
                        (r.x = e * this.gridSize),
                        (r.y = i * this.gridSize),
                        this.addChildAt(r, 0);
                }),
                (t.prototype.getBitmapByBead = function(t) {
                    var e = this.gridSize,
                        i = new egret.Sprite(),
                        r = new eui.Label();
                    return (
                        i.addChildAt(r, 1),
                        (r.bold = !0),
                        this.setMsg(r, t),
                        (r.x = 0),
                        (r.y = 0),
                        (r.width = e),
                        (r.height = e),
                        (r.textAlign = 'center'),
                        (r.verticalAlign = 'middle'),
                        i
                    );
                }),
                (t.prototype.setMsg = function(t, e) {
                    if (0 == this.totalTextSize || 0 == this.diceTextSize) {
                        var i = this.gridSize - 2;
                        (t.size = i), (t.text = '22');
                        var r = t.textWidth;
                        t.size = i - 1;
                        var s = t.textWidth;
                        (this.totalTextSize = Math.floor(
                            i - (r - i) / (r - s)
                        )),
                            (t.size = i),
                            (t.text = '222'),
                            (r = t.textWidth),
                            (t.size = i - 1),
                            (s = t.textWidth),
                            (this.diceTextSize = Math.floor(
                                i - (r - i) / (r - s)
                            ));
                    }
                    0 == this.mapType &&
                        ((t.size = this.totalTextSize),
                        (t.text = n
                            .shbGetResultSum(e.dice1, e.dice2, e.dice3)
                            .toString()),
                        (t.textColor = 263117)),
                        1 == this.mapType &&
                            ((t.size = this.diceTextSize),
                            (t.text =
                                e.dice1.toString() +
                                e.dice2.toString() +
                                e.dice3.toString()),
                            (t.textColor = 263117));
                }),
                (t.prototype.refresh = function() {
                    this.listData && (this.removeChildren(), this.drawMap());
                }),
                (t.prototype.setColOffset = function(t) {
                    0 > t && (t = 0), this.removeChildren(), this.drawMap(t);
                }),
                t
            );
        })(n.GridPaper);
        (n.RoadShbMainPaper = t),
            __reflect(t.prototype, 'VideoGameCore.RoadPaper.RoadShbMainPaper');
    })((e = t.RoadPaper || (t.RoadPaper = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(o) {
        var t = (function(n) {
            function t(t, e, i, r) {
                void 0 === r && (r = 6);
                var s = n.call(this, t, e, 1, r) || this;
                return (
                    (s.listData = []),
                    (s.drawList = [[]]),
                    (s.mapType = 0),
                    (s.displayKey = i),
                    s
                );
            }
            return (
                __extends(t, n),
                (t.prototype.setListData = function(t, e) {
                    void 0 === e && (e = -1),
                        (this.listData = t),
                        this.removeChildren(),
                        this.drawMap(e),
                        this.dispatchEventWith(egret.Event.CHANGE);
                }),
                (t.prototype.setMapType = function(t) {
                    (this.mapType = t), this.refresh();
                }),
                (t.prototype.drawMap = function(t) {
                    void 0 === t && (t = -1), this.genDrawList();
                    var e = 0,
                        i = this.rowNum,
                        r = [];
                    this.colOffset = 0 > t ? 0 : t;
                    var s = this.drawList.length;
                    (this.maxOffset = s),
                        s > this.colNum &&
                            0 > t &&
                            (this.colOffset = s - this.colNum);
                    for (
                        var n = 0;
                        n < Math.min(this.drawList.length, this.colNum);
                        n++
                    ) {
                        var o = this.drawList[n + this.colOffset];
                        e = 0;
                        for (var a = 0; a < o.length; a++) {
                            var h = n + e,
                                u = 0;
                            for (
                                i > a
                                    ? ((u = a),
                                      -1 != r.lastIndexOf(h + ':' + u) &&
                                          (e++, u--, (i = u + 1)))
                                    : ((u = i - 1), e++);
                                -1 != r.lastIndexOf(n + e + ':' + u);

                            )
                                u--, (i = u + 1);
                            (h = n + e),
                                r.push(h + ':' + u),
                                this.drawBead(o[a], h, u);
                        }
                        i = this.rowNum;
                    }
                    this.cacheAsBitmap = !0;
                }),
                (t.prototype.genDrawList = function() {
                    this.drawList = [];
                    for (
                        var t = [], e = 0, i = 0;
                        i < this.listData.length;
                        i++
                    ) {
                        var r = this.listData[i],
                            s = void 0;
                        switch (this.mapType) {
                            case 1:
                                s = o.shbResultIsTriple(
                                    r.dice1,
                                    r.dice2,
                                    r.dice3
                                )
                                    ? 0
                                    : o.shbResultSumIsSmall(
                                          r.dice1,
                                          r.dice2,
                                          r.dice3
                                      )
                                        ? 2
                                        : 1;
                                break;
                            default:
                                s = o.shbResultIsTriple(
                                    r.dice1,
                                    r.dice2,
                                    r.dice3
                                )
                                    ? 0
                                    : o.shbResultSumIsOdd(
                                          r.dice1,
                                          r.dice2,
                                          r.dice3
                                      )
                                        ? 1
                                        : 2;
                        }
                        e == s
                            ? t.push(s)
                            : (t.length > 0 && this.drawList.push(t),
                              (t = []),
                              t.push(s)),
                            (e = s);
                    }
                    t.length > 0 && this.drawList.push(t);
                }),
                (t.prototype.drawBead = function(t, e, i) {
                    var r = this.getBitmapByBead(t);
                    (r.width = this.gridSize),
                        (r.height = this.gridSize),
                        (r.x = e * this.gridSize),
                        (r.y = i * this.gridSize),
                        this.addChildAt(r, 0);
                }),
                (t.prototype.getBitmapByBead = function(t) {
                    var e = this.gridSize,
                        i = 0.5 * e,
                        r = new egret.Sprite(),
                        s = new eui.Label();
                    return (
                        r.addChildAt(s, 1),
                        (s.size = 1.5 * i),
                        this.setMsg(s, t),
                        (s.x = 0),
                        (s.y = 0),
                        (s.width = e),
                        (s.height = e),
                        (s.textAlign = 'center'),
                        (s.verticalAlign = 'middle'),
                        (s.bold = !0),
                        r
                    );
                }),
                (t.prototype.setMsg = function(t, e) {
                    0 == this.mapType &&
                        ((t.text =
                            0 == e
                                ? Core.translate(this.displayKey[0])
                                : 1 == e
                                    ? Core.translate(this.displayKey[1])
                                    : Core.translate(this.displayKey[2])),
                        (t.textColor =
                            0 == e ? 3578627 : 2 == e ? 14619414 : 263117)),
                        1 == this.mapType &&
                            ((t.text =
                                0 == e
                                    ? Core.translate(this.displayKey[0])
                                    : 1 == e
                                        ? Core.translate(this.displayKey[3])
                                        : Core.translate(this.displayKey[4])),
                            (t.textColor =
                                0 == e ? 3578627 : 1 == e ? 14619414 : 263117));
                }),
                (t.prototype.refresh = function() {
                    this.removeChildren(), this.drawMap();
                }),
                (t.prototype.setColOffset = function(t) {
                    0 > t && (t = 0), this.removeChildren(), this.drawMap(t);
                }),
                t
            );
        })(o.GridPaper);
        (o.RoadShbSubPaper = t),
            __reflect(t.prototype, 'VideoGameCore.RoadPaper.RoadShbSubPaper');
    })((e = t.RoadPaper || (t.RoadPaper = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(s) {
        var t = (function(r) {
            function t(t, e) {
                var i = r.call(this, t, e, 2) || this;
                return (i.radius = (i.gridSize - 3 * i.gridLineWidth) / 2), i;
            }
            return (
                __extends(t, r),
                (t.prototype.drawBead = function(t, e, i) {
                    if (0 != t.winType) {
                        switch (t.winType) {
                            case s.WinType.RED_WIN:
                                this.graphics.lineStyle(0, this.redWinColor),
                                    this.graphics.beginFill(this.redWinColor);
                                break;
                            case s.WinType.BLUE_WIN:
                                this.graphics.lineStyle(0, this.blueWinColor),
                                    this.graphics.beginFill(this.blueWinColor);
                        }
                        this.graphics.drawCircle(
                            (0.5 + e) * this.gridSize,
                            (0.5 + i) * this.gridSize,
                            this.radius
                        ),
                            this.graphics.endFill();
                    }
                }),
                t
            );
        })(s.RoadPaperBase);
        (s.RoadXiaoLuPaper = t),
            __reflect(t.prototype, 'VideoGameCore.RoadPaper.RoadXiaoLuPaper');
    })((e = t.RoadPaper || (t.RoadPaper = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(r) {
        var t = (function(s) {
            function t(t, e, i) {
                void 0 === i && (i = 2);
                var r = s.call(this, t, e, 2) || this;
                return (r.markWidth = i), r;
            }
            return (
                __extends(t, s),
                (t.prototype.drawBead = function(t, e, i) {
                    if (0 != t.winType) {
                        switch (t.winType) {
                            case r.WinType.RED_WIN:
                                this.graphics.lineStyle(
                                    this.markWidth,
                                    this.redWinColor
                                );
                                break;
                            case r.WinType.BLUE_WIN:
                                this.graphics.lineStyle(
                                    this.markWidth,
                                    this.blueWinColor
                                );
                        }
                        this.graphics.moveTo(
                            (e + 1) * this.gridSize - 1 * this.markWidth,
                            i * this.gridSize + 1 * this.markWidth
                        ),
                            this.graphics.lineTo(
                                e * this.gridSize + 1 * this.markWidth,
                                (i + 1) * this.gridSize - 1 * this.markWidth
                            ),
                            this.graphics.endFill();
                    }
                }),
                t
            );
        })(r.RoadPaperBase);
        (r.RoadXiaoQiangLuPaper = t),
            __reflect(
                t.prototype,
                'VideoGameCore.RoadPaper.RoadXiaoQiangLuPaper'
            );
    })((e = t.RoadPaper || (t.RoadPaper = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(h) {
        var t = (function(a) {
            function t(t, e, i, r, s, n) {
                void 0 === r && (r = 4),
                    void 0 === s && (s = 1),
                    void 0 === n && (n = 6);
                var o = a.call(this, t, e, 1, n) || this;
                return (
                    (o.isAsking = !1),
                    (o.redWinColor = 12856618),
                    (o.blueWinColor = 472563),
                    (o.tieColor = 3578627),
                    (o.beadType = 0),
                    (o.buffLabelSize = 0),
                    (o.buffLang = ''),
                    (o.pairRadius = r),
                    (o.whiteThickness = s),
                    (o.displayKey = i),
                    o
                );
            }
            return (
                __extends(t, a),
                (t.prototype.setListData = function(t, e, i) {
                    void 0 === e && (e = !1),
                        void 0 === i && (i = -1),
                        (this.isAsking = e),
                        (this.listData = t),
                        this.removeChildren(),
                        this.drawMap(i),
                        e || this.dispatchEventWith(egret.Event.CHANGE);
                }),
                (t.prototype.drawMap = function(t) {
                    void 0 === t && (t = -1),
                        (0 == this.buffLabelSize ||
                            this.buffLang !=
                                Core.LocalizeStore.instance.lang) &&
                            this.checkLabelFontSize();
                    var e = 0,
                        i =
                            Math.floor(
                                (this.listData.length +
                                    (this.isAsking ? 0 : 1)) /
                                    this.rowNum
                            ) + (1 != this.rowNum ? 1 : 0);
                    this.colOffset = 0 > t ? 0 : t;
                    var r = this.colNum;
                    (this.maxOffset = i),
                        i > r && 0 > t && (this.colOffset = i - r),
                        (e = this.colOffset * this.rowNum),
                        (this.pairShape = new egret.Shape());
                    for (var s = 0; s < this.listData.length - e; s++) {
                        var n = s % this.rowNum,
                            o = Math.floor(s / this.rowNum);
                        this.drawBead(this.listData[s + e], o, n);
                    }
                    this.addChild(this.pairShape), (this.cacheAsBitmap = !0);
                }),
                (t.prototype.drawBead = function(t, e, i) {
                    if (t.winType != h.WinType.NONE) {
                        var r =
                            0 == this.beadType
                                ? this.getBitmapByBead(t)
                                : this.getBitmapByBead2(t);
                        (r.width = this.gridSize - this.gridLineWidth),
                            (r.height = this.gridSize - this.gridLineWidth),
                            (r.x = this.gridLineWidth + e * this.gridSize),
                            (r.y = this.gridLineWidth + i * this.gridSize),
                            this.addChildAt(r, 0),
                            (t.redPair || t.bluePair) &&
                                (this.pairShape.graphics.lineStyle(
                                    this.whiteThickness,
                                    16777215
                                ),
                                t.redPair &&
                                    (this.pairShape.graphics.beginFill(
                                        this.redWinColor
                                    ),
                                    this.pairShape.graphics.drawCircle(
                                        this.gridLineWidth +
                                            this.pairRadius +
                                            e * this.gridSize,
                                        this.gridLineWidth +
                                            this.pairRadius +
                                            i * this.gridSize,
                                        this.pairRadius
                                    ),
                                    this.pairShape.graphics.endFill()),
                                this.pairShape.graphics.lineStyle(
                                    this.whiteThickness,
                                    16777215
                                ),
                                t.bluePair &&
                                    (this.pairShape.graphics.beginFill(
                                        this.blueWinColor
                                    ),
                                    this.pairShape.graphics.drawCircle(
                                        (e + 1) * this.gridSize -
                                            this.pairRadius,
                                        (i + 1) * this.gridSize -
                                            this.pairRadius,
                                        this.pairRadius
                                    ),
                                    this.pairShape.graphics.endFill()));
                    }
                }),
                (t.prototype.checkLabelFontSize = function() {
                    var s = Math.floor(
                            0.5 * (this.gridSize - this.gridLineWidth) * 1.4
                        ),
                        n = s;
                    this.buffLang = Core.LocalizeStore.instance.lang;
                    var o = new eui.Label(),
                        a = 0,
                        h = 0,
                        u = 0,
                        c = 0;
                    this.displayKey.forEach(function(t) {
                        var e = Core.LocalizeStore.instance.translate(t);
                        if (
                            ((o.size = n),
                            (o.text = e),
                            (a = o.textWidth),
                            (u = o.textHeight),
                            a > s || u > s)
                        ) {
                            (o.size = n - 0.5),
                                (h = o.textWidth),
                                (c = o.textHeight);
                            var i = (a - s) / (a - h),
                                r = (u - s) / (u - c);
                            n -= 0.5 * Math.max(i, r);
                        }
                    }, this),
                        (o = null),
                        (this.buffLabelSize = n);
                }),
                (t.prototype.getBitmapByBead = function(t) {
                    var e,
                        i = Core.LocalizeStore.instance.translate(
                            this.displayKey[t.winType - 1]
                        );
                    switch (t.winType) {
                        case h.WinType.RED_WIN:
                            e = this.redWinColor;
                            break;
                        case h.WinType.BLUE_WIN:
                            e = this.blueWinColor;
                            break;
                        case h.WinType.TIE:
                            e = this.tieColor;
                            break;
                        default:
                            return null;
                    }
                    var r = this.gridSize - this.gridLineWidth,
                        s = new egret.Sprite();
                    s.graphics.beginFill(e, 1);
                    var n = 0.5 * r;
                    s.graphics.drawCircle(n, n, n), s.graphics.endFill();
                    var o = new eui.Label();
                    return (
                        s.addChildAt(o, 1),
                        (o.size = this.buffLabelSize),
                        (o.text = i),
                        (o.x = 0),
                        (o.y = 0),
                        (o.width = Math.floor(r)),
                        (o.height = Math.floor(r)),
                        (o.textAlign = 'center'),
                        (o.verticalAlign = 'middle'),
                        s
                    );
                }),
                (t.prototype.getBitmapByBead2 = function(t) {
                    var e;
                    switch (t.winType) {
                        case h.WinType.RED_WIN:
                            e = this.redWinColor;
                            break;
                        case h.WinType.BLUE_WIN:
                            e = this.blueWinColor;
                            break;
                        case h.WinType.TIE:
                            e = this.tieColor;
                            break;
                        default:
                            return null;
                    }
                    var i = this.gridSize - this.gridLineWidth,
                        r = new egret.Sprite(),
                        s = 0.5 * i;
                    r.graphics.lineStyle(1.5, e),
                        r.graphics.drawCircle(s, s, s);
                    var n = new eui.Label();
                    return (
                        r.addChildAt(n, 1),
                        (n.size = this.buffLabelSize),
                        (n.text = this.getWinTextFromNum(t.winNum)),
                        (n.x = 0),
                        (n.y = 0),
                        (n.width = Math.floor(i)),
                        (n.height = Math.floor(i)),
                        (n.textAlign = 'center'),
                        (n.verticalAlign = 'middle'),
                        (n.textColor = e),
                        r
                    );
                }),
                (t.prototype.getWinTextFromNum = function(t) {
                    switch (t) {
                        case 13:
                            return 'K';
                        case 12:
                            return 'Q';
                        case 11:
                            return 'J';
                        default:
                            return t.toString();
                    }
                }),
                (t.prototype.refresh = function() {
                    this.removeChildren(), this.drawMap();
                }),
                (t.prototype.setColOffset = function(t) {
                    0 > t && (t = 0), this.removeChildren(), this.drawMap(t);
                }),
                (t.prototype.setRedWinColor = function(t) {
                    void 0 === t && (t = 14619414), (this.redWinColor = t);
                }),
                (t.prototype.setBlueWinColor = function(t) {
                    void 0 === t && (t = 3618291), (this.blueWinColor = t);
                }),
                (t.prototype.setTieColor = function(t) {
                    void 0 === t && (t = 3578627), (this.tieColor = t);
                }),
                t
            );
        })(h.GridPaper);
        (h.RoadZhuZaiPaper = t),
            __reflect(t.prototype, 'VideoGameCore.RoadPaper.RoadZhuZaiPaper');
    })((e = t.RoadPaper || (t.RoadPaper = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(t) {
        t.ZJH_MAX_CARDS = 3;
        var e;
        !(function(t) {
            (t[(t.NONE = 0)] = 'NONE'),
                (t[(t.BLUE_WIN = 1)] = 'BLUE_WIN'),
                (t[(t.RED_WIN = 2)] = 'RED_WIN'),
                (t[(t.TIE = 3)] = 'TIE');
        })((e = t.ZjhWinType || (t.ZjhWinType = {})));
        var i = (function() {
            function t() {}
            return t;
        })();
        (t.RoadZjhData = i),
            __reflect(i.prototype, 'VideoGameCore.RoadPaper.RoadZjhData');
    })((e = t.RoadPaper || (t.RoadPaper = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(Z) {
    var t = (function(e) {
        function t() {
            var t = e.call(this) || this;
            return (
                (t.socketList = [
                    Z.PlazaSocket.instance
                        ? Z.PlazaSocket.instance
                        : Z.PlazaSocket.init()
                ]),
                (t.realtimeInfoMap = new Core.HashMap()),
                (t.realtimeInfoExtMap = new Core.HashMap()),
                (t.videoStatusInfoMap = new Core.HashMap()),
                (t.vipVideoStatusInfoMap = new Core.HashMap()),
                (t.zjhRealtimeInfoMap = new Core.HashMap()),
                (t.roadDataMap = new Core.HashMap()),
                (t.bullRoadDataMap = new Core.HashMap()),
                (t.rouRoadDataMap = new Core.HashMap()),
                (t.shbRoadDataMap = new Core.HashMap()),
                (t.bjRoadDataMap = new Core.HashMap()),
                (t.zjhRoadDataMap = new Core.HashMap()),
                (t.lastGmcodeMap = new Core.HashMap()),
                (t.timerIdMap = new Core.HashMap()),
                t
            );
        }
        return (
            __extends(t, e),
            Object.defineProperty(t, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.init = function() {
                return this.initInstance(this);
            }),
            (t.prototype.onSocketConnected = function(t) {
                t === Z.PlazaSocket.instance;
            }),
            (t.prototype.onSocketData = function(t, e) {
                var i, r, s, n;
                switch (t.respId) {
                    case Z.hr:
                        var o = t;
                        (s = o.beadList),
                            (r = o.vid),
                            this.roadDataMap.set(
                                r,
                                new Z.RoadPaper.RoadData(s)
                            ),
                            s.length > 0 &&
                                this.lastGmcodeMap.set(
                                    r,
                                    s[s.length - 1].gmcode
                                ),
                            this.dispatchAction(Z.rt, r);
                        break;
                    case Z.Mt:
                        var a = t;
                        this.lastGmcodeMap.set(a.vid, a.code),
                            (n = this.roadDataMap.get(a.vid)),
                            (i = Core.NonstopTimer.instance.setTimeout(
                                function() {
                                    n &&
                                        (n.appendDaLuProto(a.bead),
                                        this.dispatchAction(Z.rt, a.vid)),
                                        this.clearTimer(a.vid);
                                },
                                this,
                                Z.StreamConfig.instance.getAverageDelay()
                            )),
                            this.timerIdMap.set(a.vid, i);
                        break;
                    case Z.Gt:
                        var h = t;
                        (s = h.beadList),
                            (r = h.vid),
                            this.roadDataMap.set(
                                r,
                                new Z.RoadPaper.RoadData(s)
                            ),
                            s.length > 0 &&
                                this.lastGmcodeMap.set(
                                    r,
                                    s[s.length - 1].gmcode
                                ),
                            this.dispatchAction(Z.rt, r);
                        break;
                    case Z.Nt:
                        var u = t;
                        if (
                            this.lastGmcodeMap.has(u.vid) &&
                            this.lastGmcodeMap.get(u.vid) === u.code
                        )
                            break;
                        !this.lastGmcodeMap.has(u.vid) ||
                        this.checkGmcodeValid(
                            this.lastGmcodeMap.get(u.vid),
                            u.code
                        )
                            ? (this.lastGmcodeMap.set(u.vid, u.code),
                              (n = this.roadDataMap.get(u.vid)),
                              Core.NonstopTimer.instance.setTimeout(
                                  function() {
                                      n &&
                                          (n.appendDaLuProto(u.bead),
                                          this.dispatchAction(Z.rt, u.vid)),
                                          this.clearTimer(u.vid);
                                  },
                                  this,
                                  Z.StreamConfig.instance.getAverageDelay()
                              ),
                              this.timerIdMap.set(u.vid, i))
                            : this.requestBeadListAgain(e, u.vid);
                        break;
                    case Z.ki:
                        var c = t;
                        if (
                            this.lastGmcodeMap.has(c.vid) &&
                            this.lastGmcodeMap.get(c.vid) === c.code
                        )
                            break;
                        !this.lastGmcodeMap.has(c.vid) ||
                        this.checkGmcodeValid(
                            this.lastGmcodeMap.get(c.vid),
                            c.code
                        )
                            ? (this.lastGmcodeMap.set(c.vid, c.code),
                              (n = this.roadDataMap.get(c.vid)),
                              Core.NonstopTimer.instance.setTimeout(
                                  function() {
                                      n &&
                                          (n.appendDaLuProto(c.bead),
                                          this.dispatchAction(Z.rt, c.vid)),
                                          this.clearTimer(c.vid);
                                  },
                                  this,
                                  Z.StreamConfig.instance.getAverageDelay()
                              ),
                              this.timerIdMap.set(c.vid, i))
                            : this.requestBeadListAgain(e, c.vid);
                        break;
                    case Z.er:
                        var f = t,
                            C = f.beadList;
                        (r = f.vid),
                            this.bullRoadDataMap.set(r, C),
                            this.dispatchAction(Z.rt, r);
                        break;
                    case Z.rr:
                        var l = t,
                            m = l.beadData;
                        if (((r = l.vid), this.bullRoadDataMap.has(r))) {
                            var d = this.bullRoadDataMap.get(r);
                            (0 == d.length ||
                                d[d.length - 1].gm_code != m.gm_code) &&
                                (d.push(m),
                                d.length >= 60 && (d = d.slice(12)),
                                this.bullRoadDataMap.set(r, d),
                                this.dispatchAction(Z.rt, r));
                        } else
                            this.bullRoadDataMap.set(r, [m]),
                                this.dispatchAction(Z.rt, r);
                        break;
                    case Z.Hc:
                        var v = t;
                        1 != v.cnyRate && this.updateCurrencyRate(v.cnyRate);
                        break;
                    case Z.qa:
                    case Z.Vn:
                    case Z.SHB_GAME_INFO:
                    case Z.BJ_USER_BET_INFO:
                        var G = t;
                        if (!(G instanceof Z.Mi)) break;
                        this.realtimeInfoMap.set(G.vid, G);
                        var _ = this.getVideoStatusInfo(G.vid),
                            b = this.getVipVideoStatusInfo(G.vid);
                        ((_ && 11 == _.status) || (b && 11 == b.status)) &&
                            this.resetRealTimeInfo(G.vid),
                            this.dispatchAction(Z.st, G.vid);
                        break;
                    case Z.Ti:
                        var P = t;
                        this.realtimeInfoExtMap.set(P.vid, P);
                        var _ = this.getVideoStatusInfo(P.vid),
                            b = this.getVipVideoStatusInfo(P.vid);
                        ((_ && 11 == _.status) || (b && 11 == b.status)) &&
                            this.resetRealTimeInfo(P.vid),
                            this.dispatchAction(Z.st, P.vid);
                        break;
                    case Z.Ct:
                        var V,
                            g = t,
                            p = Z.RoomConfig.instance.getRoomInfoByVid(g.vid);
                        if (null == p) return;
                        p.platformtype === Z.PLATFORM_VIP
                            ? ((V = this.getVipVideoStatusInfo(g.vid)),
                              null != V &&
                                  ((V.status = 11),
                                  this.vipVideoStatusInfoMap.set(g.vid, V)))
                            : ((V = this.getVideoStatusInfo(g.vid)),
                              null != V &&
                                  ((V.status = 11),
                                  this.videoStatusInfoMap.set(g.vid, V))),
                            this.resetRealTimeInfo(g.vid),
                            this.dispatchAction(Z.st, g.vid);
                        break;
                    case Z.an:
                        var k = t;
                        this.zjhRealtimeInfoMap.set(k.vid, k);
                        var _ = this.getVideoStatusInfo(k.vid);
                        _ && 11 == _.status && this.resetZjhRealTimeInfo(k.vid),
                            this.dispatchAction(Z.st, k.vid);
                        break;
                    case Z.lt:
                    case Z.xt:
                    case Z.rn:
                        var w = t;
                        this.videoStatusInfoMap.set(w.vid, w),
                            11 == w.status &&
                                (this.resetRoadData(w.vid),
                                this.resetRealTimeInfo(w.vid)),
                            this.dispatchAction(Z.st, w.vid);
                        break;
                    case Z.di:
                        var z = t;
                        this.vipVideoStatusInfoMap.set(z.vid, z),
                            11 == z.status &&
                                (this.resetRoadData(z.vid),
                                this.resetRealTimeInfo(z.vid)),
                            this.dispatchAction(Z.st, z.vid);
                        break;
                    case Z.Ar:
                        var S = t;
                        this.rouRoadDataMap.set(
                            S.vid,
                            new Z.RoadPaper.RoadRouDataChart(S.infos)
                        ),
                            this.dispatchAction(Z.rt, S.vid);
                        break;
                    case Z.Ht:
                        var y = t,
                            E = this.getRouRoadData(y.vid);
                        if (E) {
                            for (
                                var T = E.roadData, x = !1, O = 0;
                                O < T.length;
                                O++
                            )
                                if (T[O].code === y.code) {
                                    x = !0;
                                    break;
                                }
                            x || E.addData(y);
                        } else {
                            var I = new Z.RoadPaper.RoadRouData();
                            (I.code = y.code),
                                (I.res = y.result),
                                (I.resbit = y.resultBit),
                                (E = new Z.RoadPaper.RoadRouDataChart([I])),
                                this.rouRoadDataMap.set(y.vid, E);
                        }
                        this.dispatchAction(Z.rt, y.vid);
                        break;
                    case Z.Xr:
                        var R = t;
                        if (!(R instanceof Z.$r))
                            return void console.warn(
                                'need to add class for SHB_BEAD_LIST_R in socket',
                                e
                            );
                        this.shbRoadDataMap.set(
                            R.vid,
                            new Z.RoadPaper.RoadShbDataChart(R.infos)
                        ),
                            this.dispatchAction(Z.rt, R.vid);
                        break;
                    case Z.X:
                        var L = t,
                            j = this.getShbRoadData(L.vid);
                        if (j) {
                            for (
                                var B = j.roadData, x = !1, O = 0;
                                O < B.length;
                                O++
                            )
                                if (B[O].code === L.code) {
                                    x = !0;
                                    break;
                                }
                            x || j.addData(L);
                        } else {
                            var A;
                            (A = new Z.RoadPaper.RoadShbData()),
                                (A.code = L.code),
                                (A.dice1 = L.info.dice1),
                                (A.dice2 = L.info.dice2),
                                (A.dice3 = L.info.dice3),
                                (j = new Z.RoadPaper.RoadShbDataChart([A])),
                                this.shbRoadDataMap.set(L.vid, j);
                        }
                        this.dispatchAction(Z.rt, L.vid);
                        break;
                    case Z.Hi:
                        var N = t;
                        this.bjRoadDataMap.set(N.vid, N.infos),
                            this.dispatchAction(Z.rt, N.vid);
                        break;
                    case Z.yt:
                        var M = t,
                            D = this.bjRoadDataMap.get(M.vid);
                        D
                            ? (0 == D.length ||
                                  (D.length > 0 &&
                                      D[D.length - 1].code != M.info.code)) &&
                              (D.push(M.info), this.dispatchAction(Z.rt, M.vid))
                            : (this.bjRoadDataMap.set(N.vid, [M.info]),
                              this.dispatchAction(Z.rt, M.vid));
                        break;
                    case Z.Xs:
                        var H = t,
                            U = H.roadZjhDataList;
                        (r = H.vid),
                            (s = H.beadList),
                            this.zjhRoadDataMap.set(r, U),
                            this.roadDataMap.set(
                                r,
                                new Z.RoadPaper.RoadData(s)
                            ),
                            s.length > 0 &&
                                this.lastGmcodeMap.set(
                                    r,
                                    s[s.length - 1].gmcode
                                ),
                            this.dispatchAction(Z.rt, r);
                        break;
                    case Z.tn:
                        var F = t;
                        if (
                            !this.lastGmcodeMap.has(F.vid) ||
                            this.lastGmcodeMap.get(F.vid) != F.code
                        ) {
                            var K = this.zjhRoadDataMap.get(F.vid);
                            K && K.push(F.info),
                                this.lastGmcodeMap.set(F.vid, F.code),
                                (n = this.roadDataMap.get(F.vid)),
                                (i = Core.NonstopTimer.instance.setTimeout(
                                    function() {
                                        n &&
                                            (n.appendDaLuProto(F.result.bead),
                                            this.dispatchAction(Z.rt, F.vid)),
                                            this.clearTimer(F.vid);
                                    },
                                    this,
                                    Z.StreamConfig.instance.getAverageDelay()
                                )),
                                this.timerIdMap.set(F.vid, i);
                        }
                }
            }),
            (t.prototype.updateCurrencyRate = function(i) {
                var r = this;
                this.realtimeInfoMap.forEach(function(t, e) {
                    t.updateCurrencyRate(i), r.dispatchAction(Z.st, e);
                }, this);
            }),
            (t.prototype.getRealtimeInfo = function(t) {
                return this.realtimeInfoMap && this.realtimeInfoMap.has(t)
                    ? this.realtimeInfoMap.get(t)
                    : null;
            }),
            (t.prototype.getRealtimeInfoExt = function(t) {
                return this.realtimeInfoExtMap && this.realtimeInfoExtMap.has(t)
                    ? this.realtimeInfoExtMap.get(t)
                    : null;
            }),
            (t.prototype.getZjhRealtimeInfo = function(t) {
                return this.zjhRealtimeInfoMap && this.zjhRealtimeInfoMap.has(t)
                    ? this.zjhRealtimeInfoMap.get(t)
                    : null;
            }),
            (t.prototype.getVideoStatusInfo = function(t) {
                return this.videoStatusInfoMap && this.videoStatusInfoMap.has(t)
                    ? this.videoStatusInfoMap.get(t)
                    : null;
            }),
            (t.prototype.getVipVideoStatusInfo = function(t) {
                return this.vipVideoStatusInfoMap &&
                    this.vipVideoStatusInfoMap.has(t)
                    ? this.vipVideoStatusInfoMap.get(t)
                    : null;
            }),
            (t.prototype.getRoadData = function(t) {
                return this.roadDataMap && this.roadDataMap.has(t)
                    ? this.roadDataMap.get(t)
                    : null;
            }),
            (t.prototype.getBullRoadData = function(t, e) {
                if (
                    (void 0 === e && (e = -12),
                    this.bullRoadDataMap && this.bullRoadDataMap.has(t))
                ) {
                    var i = this.bullRoadDataMap.get(t);
                    return i.slice(e, i.length);
                }
                return [];
            }),
            (t.prototype.getRouRoadData = function(t) {
                return this.rouRoadDataMap && this.rouRoadDataMap.has(t)
                    ? this.rouRoadDataMap.get(t)
                    : null;
            }),
            (t.prototype.getShbRoadData = function(t) {
                return this.shbRoadDataMap && this.shbRoadDataMap.has(t)
                    ? this.shbRoadDataMap.get(t)
                    : null;
            }),
            (t.prototype.getBjRoadDataMap = function(t) {
                return this.bjRoadDataMap && this.bjRoadDataMap.has(t)
                    ? this.bjRoadDataMap.get(t)
                    : null;
            }),
            (t.prototype.getZjhRoadData = function(t) {
                return this.zjhRoadDataMap && this.zjhRoadDataMap.has(t)
                    ? this.zjhRoadDataMap.get(t)
                    : null;
            }),
            (t.prototype.resetRoadData = function(t) {
                this.roadDataMap.set(t, new Z.RoadPaper.RoadData([])),
                    this.lastGmcodeMap['delete'](t),
                    this.bjRoadDataMap.set(t, []),
                    this.clearTimer(t),
                    this.dispatchAction(Z.rt, t);
            }),
            (t.prototype.resetRealTimeInfo = function(t) {
                var e = this.getRealtimeInfo(t);
                e && e.clear();
            }),
            (t.prototype.resetZjhRealTimeInfo = function(t) {
                this.zjhRealtimeInfoMap &&
                    this.zjhRealtimeInfoMap.has(t) &&
                    this.zjhRealtimeInfoMap['delete'](t);
            }),
            (t.prototype.checkGmcodeValid = function(t, e) {
                if (t.substr(0, 10) != e.substr(0, 10) || t === e) return !0;
                var i = t.charAt(t.length - 1),
                    r = e.charAt(e.length - 1),
                    s = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ',
                    n = s.indexOf(r) - s.indexOf(i);
                return 1 == n || -35 == n;
            }),
            (t.prototype.requestBeadListAgain = function(t, e) {
                Core.NonstopTimer.instance.setTimeout(
                    function() {
                        Z.PlazaSocket.instance.writeBytes(
                            Z.getCMDGetAllBacResults(e)
                        );
                    },
                    this,
                    Z.StreamConfig.instance.getAverageDelay()
                );
            }),
            (t.prototype.clearTimer = function(t) {
                if (this.timerIdMap.has(t)) {
                    var e = this.timerIdMap.get(t);
                    Core.NonstopTimer.instance.clearTimeout(e),
                        this.timerIdMap['delete'](t);
                }
            }),
            t
        );
    })(Core.NetworkStoreBase);
    (Z.PlazaRoadStore = t),
        __reflect(t.prototype, 'VideoGameCore.PlazaRoadStore');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(h) {
    var t = (function(e) {
        function t() {
            var t = e.call(this) || this;
            return (
                (t.itemPerPage = 20),
                (t.firstPage = 1),
                (t._maxPage = 1),
                (t.curLangIndex = -1),
                (t.previousRecords = 0),
                (t.curPage = t.firstPage),
                (t.platformArr = new Core.HashMap()),
                (t.playArr = new Core.HashMap()),
                (t.transArr = new Core.HashMap()),
                (t.socketList = [h.PlazaSocket.instance]),
                (t.hunterRecordsRequest = new h.HunterRecordRequest()),
                t.hunterRecordsRequest.addEventListener(
                    egret.Event.COMPLETE,
                    t.onHunterRecordComplete,
                    t
                ),
                t.hunterRecordsRequest.addEventListener(
                    egret.Event.COMPLETE,
                    t.onHunterRecordComplete,
                    t
                ),
                t
            );
        }
        return (
            __extends(t, e),
            Object.defineProperty(t, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.init = function() {
                return this.initInstance(this);
            }),
            Object.defineProperty(t.prototype, 'maxPage', {
                get: function() {
                    return this._maxPage;
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(t.prototype, 'hunterBetRecords', {
                get: function() {
                    return this.hunterRecordsRequest
                        ? this.hunterRecordsRequest.rC
                        : null;
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(t.prototype, 'hunterCreditRecords', {
                get: function() {
                    return this.hunterRecordsRequest
                        ? this.hunterRecordsRequest.sC
                        : null;
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.requestSlotGameRecord = function(t, e, i, r) {
                void 0 === i && (i = 1),
                    void 0 === r && (r = ''),
                    h.PlazaSocket.instance.writeBytes(
                        h.getCMDGetSlotGameRecords(
                            Core.ExternalData.pid,
                            Core.LoginStore.instance.userName,
                            t,
                            e,
                            i,
                            this.itemPerPage,
                            '',
                            '',
                            '',
                            r
                        )
                    );
            }),
            (t.prototype.requestCreditRecord = function(t, e, i, r, s) {
                void 0 === i && (i = 1),
                    h.PlazaSocket.instance.writeBytes(
                        h.getCMDGetCreditRecords(
                            Core.ExternalData.pid,
                            Core.LoginStore.instance.userName,
                            t,
                            e,
                            i,
                            this.itemPerPage,
                            r,
                            s
                        )
                    );
            }),
            (t.prototype.requestUserPointRecord = function(t, e, i, r, s, n) {
                void 0 === i && (i = 1),
                    void 0 === n && (n = 20),
                    h.PlazaSocket.instance.writeBytes(
                        h.getCMDGetUserPointRecords(
                            t,
                            e,
                            Core.LoginStore.instance.loginName,
                            r,
                            s,
                            n,
                            i
                        )
                    );
            }),
            (t.prototype.requestBetRecord = function(t, e, i, r, s, n) {
                void 0 === i && (i = 1),
                    h.PlazaSocket.instance.writeBytes(
                        h.getCMDGetBetRecords(
                            Core.ExternalData.pid,
                            Core.LoginStore.instance.userName,
                            t,
                            e,
                            i,
                            this.itemPerPage,
                            r,
                            '',
                            s,
                            n
                        )
                    );
            }),
            (t.prototype.requestAllPlatformRecord = function(t, e, i, r, s, n) {
                void 0 === i && (i = 1),
                    h.PlazaSocket.instance.writeBytes(
                        h.getCMDGetAllPlatformRecords(
                            Core.ExternalData.pid,
                            Core.LoginStore.instance.userName,
                            t,
                            e,
                            i,
                            this.itemPerPage,
                            r,
                            '',
                            s,
                            n
                        )
                    );
            }),
            (t.prototype.requestHunterBetRecords = function(t, e, i, r) {
                void 0 === r && (r = 20),
                    this.hunterRecordsRequest.getFishBetRecord(t, e, i, r);
            }),
            (t.prototype.requestHunterCreditRecords = function(t, e, i, r, s) {
                void 0 === s && (s = 20),
                    this.hunterRecordsRequest.getFishCreditRecord(
                        t,
                        e,
                        i,
                        s,
                        r
                    );
            }),
            (t.prototype.requestTainRecord = function(t, e, i, r) {
                void 0 === i && (i = 1),
                    h.PlazaSocket.instance.writeBytes(
                        h.getCMDGetTainRecords(
                            Core.ExternalData.pid,
                            Core.LoginStore.instance.userName,
                            t,
                            e,
                            i,
                            this.itemPerPage,
                            r
                        )
                    );
            }),
            (t.prototype.onSocketConnected = function(t) {
                this.loadLang();
            }),
            (t.prototype.changeXMLLang = function(t) {
                switch (t) {
                    case Core.LANG_HANS:
                        return Core.LANG_CNS_XML;
                    case Core.LANG_HANT:
                        return Core.LANG_CNR_XML;
                    default:
                        return Core.LANG_EN_XML;
                }
            }),
            (t.prototype.calcPage = function(t) {
                (this._maxPage != Math.ceil(t / this.itemPerPage) ||
                    this.previousRecords != t) &&
                    ((this._maxPage =
                        0 == t ? 1 : Math.ceil(t / this.itemPerPage)),
                    (this.curPage = this.firstPage),
                    (this.previousRecords = t));
            }),
            (t.prototype.onSocketData = function(t, e) {
                switch (t.respId) {
                    case h.Wc:
                        (this.betRecords = t),
                            this.calcPage(this.betRecords.recordsTotal),
                            this.dispatchAction(h.nh);
                        break;
                    case h.qc:
                        (this.creditRecords = t),
                            this.calcPage(this.creditRecords.recordsTotal),
                            this.dispatchAction(h.Qu);
                        break;
                    case h.Jc:
                        (this.userPointRecords = t),
                            this.calcPage(this.userPointRecords.recordsTotal),
                            this.dispatchAction(h.Xu);
                        break;
                    case h.$c:
                        var i = t;
                        this.platformArr.set(this.curLang, i.records),
                            this.checkLang();
                        break;
                    case h.tf:
                        var r = t;
                        this.playArr.set(this.curLang, r.records),
                            this.checkLang();
                        break;
                    case h.ef:
                        var s = t;
                        this.transArr.set(this.curLang, s.records),
                            this.checkLang();
                        break;
                    case h.Yc:
                        (this.slotGameRecords = t),
                            this.calcPage(this.slotGameRecords.recordsTotal),
                            this.dispatchAction(h.$u);
                        break;
                    case h.Xc:
                        (this.allPlatformRecords = t),
                            (this._maxPage !=
                                Math.ceil(
                                    this.allPlatformRecords.recordsTotal /
                                        this.itemPerPage
                                ) ||
                                this.previousRecords !=
                                    this.allPlatformRecords.recordsTotal) &&
                                ((this._maxPage =
                                    0 == this.allPlatformRecords.recordsTotal
                                        ? 1
                                        : Math.ceil(
                                              this.allPlatformRecords
                                                  .recordsTotal /
                                                  this.itemPerPage
                                          )),
                                (this.curPage = this.firstPage),
                                (this.previousRecords = this.allPlatformRecords.recordsTotal)),
                            this.dispatchAction(h.Pc);
                        break;
                    case h.Qc:
                        (this.tainRecords = t),
                            this.calcPage(this.tainRecords.recordsTotal),
                            this.dispatchAction(h.ic);
                }
            }),
            (t.prototype.onHunterRecordComplete = function(t) {
                var e = t.data;
                if (e)
                    switch (this.hunterRecordsRequest.currRequestAPI) {
                        case h.FISH_SCENES_API:
                            (this._maxPage !=
                                Math.ceil(
                                    this.hunterBetRecords.recordsTotal /
                                        this.itemPerPage
                                ) ||
                                this.previousRecords !=
                                    this.hunterBetRecords.recordsTotal) &&
                                ((this._maxPage =
                                    0 == this.hunterBetRecords.recordsTotal
                                        ? 1
                                        : Math.ceil(
                                              this.hunterBetRecords
                                                  .recordsTotal /
                                                  this.itemPerPage
                                          )),
                                (this.curPage = this.firstPage),
                                (this.previousRecords = this.hunterBetRecords.recordsTotal)),
                                this.dispatchAction(h.tc);
                            break;
                        case h.FISH_GAMETRANSLISTS_API:
                            (this._maxPage !=
                                Math.ceil(
                                    this.hunterCreditRecords.recordsTotal /
                                        this.itemPerPage
                                ) ||
                                this.previousRecords !=
                                    this.hunterCreditRecords.recordsTotal) &&
                                ((this._maxPage =
                                    0 == this.hunterCreditRecords.recordsTotal
                                        ? 1
                                        : Math.ceil(
                                              this.hunterCreditRecords
                                                  .recordsTotal /
                                                  this.itemPerPage
                                          )),
                                (this.curPage = this.firstPage),
                                (this.previousRecords = this.hunterCreditRecords.recordsTotal)),
                                this.dispatchAction(h.ec);
                    }
                else
                    console.error(
                        'Hunter request ' +
                            this.hunterRecordsRequest.currRequestAPI +
                            ' fail'
                    );
            }),
            Object.defineProperty(t.prototype, 'curLang', {
                get: function() {
                    return this.curLangIndex < 0 ||
                        this.curLangIndex >=
                            h.VideoPlazaStore.instance.langList.length
                        ? Core.LocalizeStore.instance.lang
                        : h.VideoPlazaStore.instance.langList[
                              this.curLangIndex
                          ];
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.checkLang = function() {
                this.transArr.get(this.curLang) &&
                    this.platformArr.get(this.curLang) &&
                    this.playArr.get(this.curLang) &&
                    this.curLangIndex <
                        h.VideoPlazaStore.instance.langList.length - 1 &&
                    (this.curLangIndex++, this.loadLang());
            }),
            (t.prototype.loadLang = function() {
                this.checkLang(),
                    this.getTranslate(h.TRANSTYPE),
                    this.getTranslate(h.PLATFORMTYPE),
                    this.getTranslate(h.PLAYTYPE);
            }),
            (t.prototype.getTranslate = function(t) {
                var e = this.changeXMLLang(this.curLang);
                switch (t) {
                    case h.PLATFORMTYPE:
                        this.platformArr.get(this.curLang) ||
                            h.PlazaSocket.instance.writeBytes(
                                h.getCMDGetPlatformType(e)
                            );
                        break;
                    case h.PLAYTYPE:
                        this.playArr.get(this.curLang) ||
                            h.PlazaSocket.instance.writeBytes(
                                h.getCMDGetPlayType(e)
                            );
                        break;
                    case h.TRANSTYPE:
                        this.transArr.get(this.curLang) ||
                            h.PlazaSocket.instance.writeBytes(
                                h.getCMDGetTransType(e)
                            );
                }
            }),
            (t.prototype.getXMLTranslate = function(t, e) {
                var i;
                switch (t) {
                    case h.TRANSTYPE:
                        if (
                            (i = this.transArr.get(
                                Core.LocalizeStore.instance.lang
                            ))
                        )
                            for (var r = e, s = 0; s < i.length; s++) {
                                var n = i[s];
                                if (n.transtypename == r) return n.description;
                            }
                        break;
                    case h.PLATFORMTYPE:
                        if (
                            (i = this.platformArr.get(
                                Core.LocalizeStore.instance.lang
                            ))
                        )
                            for (var r = e, s = 0; s < i.length; s++) {
                                var o = i[s];
                                if (o.platformtype == r) return o.platformname;
                            }
                        break;
                    case h.PLAYTYPE:
                        if (
                            (i = this.playArr.get(
                                Core.LocalizeStore.instance.lang
                            ))
                        )
                            for (var r = e, s = 0; s < i.length; s++) {
                                var a = i[s];
                                if (a.playtype == r) return a.description;
                            }
                }
            }),
            t
        );
    })(h.PaginationStoreBase);
    (h.QueryStore = t), __reflect(t.prototype, 'VideoGameCore.QueryStore');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(n) {
    var t = (function(i) {
        function t(t) {
            var e = i.call(this) || this;
            return (
                (e.timeout = 0),
                (e.roomInfo = t),
                (e.vid = t.vid),
                (e.platform = t.platformtype),
                (e.gmtype = t.gmtype),
                (e.socketList = [n.PlazaSocket.instance]),
                e
            );
        }
        return (
            __extends(t, i),
            (t.prototype.getRoomName = function() {
                return this.roomInfo.roomname;
            }),
            (t.prototype.onSocketConnected = function(t) {}),
            (t.prototype.onSocketData = function(t, e) {
                if (t.vid && t.vid == this.vid)
                    switch (t.respId) {
                        case n.lt:
                            var i = t;
                            1 === i.status
                                ? (this.timeout = i.timeout)
                                : (this.timeout = 0),
                                this.startCountDown();
                            break;
                        case n.xt:
                            var i = t;
                            10 === i.status
                                ? (this.timeout = i.timeout)
                                : (this.timeout = 0),
                                this.startCountDown();
                            break;
                        case n.rn:
                            var r = t;
                            1 === r.status
                                ? (this.timeout = r.timeout)
                                : (this.timeout = 0),
                                this.startCountDown();
                            break;
                        case n.di:
                            var s = t;
                            1 === s.status
                                ? (this.timeout = s.timeout)
                                : (this.timeout = 0),
                                this.startCountDown();
                    }
            }),
            (t.prototype.startCountDown = function() {
                this.timeout > 0 &&
                    !Core.NonstopTimer.instance.hasInterval(
                        this.countDownInterval
                    ) &&
                    (this.countDown(),
                    (this.countDownInterval = Core.NonstopTimer.instance.setInterval(
                        this.countDown,
                        this,
                        1e3
                    )));
            }),
            (t.prototype.countDown = function() {
                this.timeout > 0
                    ? (this.timeout--, this.dispatchAction())
                    : Core.NonstopTimer.instance.clearInterval(
                          this.countDownInterval
                      );
            }),
            (t.prototype.release = function() {
                i.prototype.release.call(this),
                    Core.NonstopTimer.instance.clearInterval(
                        this.countDownInterval
                    );
            }),
            (t.releaseAll = function() {
                this.storeVidMap &&
                    this.storeVidMap.forEach(function(t) {
                        t.release();
                    }, this),
                    (this.storeVidMap = new Core.ArrayMap());
            }),
            (t.getVidListByPlatform = function(e) {
                return this.storeVidMap.values
                    .filter(function(t) {
                        return t.platform === e;
                    })
                    .map(function(t) {
                        return t.vid;
                    });
            }),
            t
        );
    })(Core.NetworkStoreBase);
    (n.RoomItemStore = t),
        __reflect(t.prototype, 'VideoGameCore.RoomItemStore');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(e) {
        function t() {
            var t = (null !== e && e.apply(this, arguments)) || this;
            return (
                (t.bgmEnable = Core.soundManager.getBGMEnable()),
                (t.bgmVolume = Core.soundManager.getBgmVolume()),
                (t.soundEnable = Core.soundManager.getSoundEnable()),
                (t.soundVolume = Core.soundManager.getVolume()),
                (t.gameSoundEnable = Core.soundManager.getGameSoundEnable()),
                (t.gameVolume = Core.soundManager.getGameVolume()),
                (t.liveSoundEnable = Core.soundManager.getLiveSoundEnable()),
                (t.liveVolume = Core.soundManager.getLiveVolume()),
                (t.videoAutoChange = !0),
                (t.globalBgmEnable = Core.soundManager.getBGMEnable()),
                t
            );
        }
        return (
            __extends(t, e),
            Object.defineProperty(t, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.init = function() {
                return this.initInstance(this);
            }),
            (t.prototype.getGlobalBGMEnable = function() {
                return this.globalBgmEnable;
            }),
            (t.prototype.setGlobalBGMEnable = function(t) {
                this.globalBgmEnable = t;
            }),
            (t.prototype.resetBGMEnable = function() {
                1 != this.bgmEnable && this.setBGMEnable(this.globalBgmEnable);
            }),
            (t.prototype.setBgmLocalStorage = function(t) {
                Core.StorageManager.instance.setItem(
                    Core.LOCALKEY_BGM_SOUND,
                    t
                );
            }),
            (t.prototype.setGameSoundLocalStorage = function(t) {
                Core.StorageManager.instance.setItem(
                    Core.LOCALKEY_EGAME_SOUND,
                    t
                );
            }),
            (t.prototype.setSoundLocalStorage = function(t) {
                Core.StorageManager.instance.setItem(
                    Core.LOCALKEY_LANG_SOUND,
                    t
                );
            }),
            (t.prototype.setLiveSoundLocalStorage = function(t) {
                Core.StorageManager.instance.setItem(
                    Core.LOCALKEY_LIVE_SOUND,
                    t
                );
            }),
            (t.prototype.setVideoAutoChangeLocalStorage = function(t) {
                Core.StorageManager.instance.setItem(
                    Core.LOCALKEY_VIDEO_AUTO_CHANGE,
                    t
                );
            }),
            (t.prototype.setBgmVolumeLocalStorage = function(t) {
                Core.StorageManager.instance.setItem(
                    Core.LOCALKEY_BGM_VOLUME,
                    t
                );
            }),
            (t.prototype.setSoundVolumeLocalStorage = function(t) {
                Core.StorageManager.instance.setItem(
                    Core.LOCALKEY_SOUND_VOLUME,
                    t
                );
            }),
            (t.prototype.setGameVolumeLocalStorage = function(t) {
                Core.StorageManager.instance.setItem(
                    Core.LOCALKEY_GAME_VOLUME,
                    t
                );
            }),
            (t.prototype.setLiveVolumeLocalStorage = function(t) {
                Core.StorageManager.instance.setItem(
                    Core.LOCALKEY_LIVE_VOLUME,
                    t
                );
            }),
            (t.prototype.getBgmLocalStorage = function() {
                return Core.StorageManager.instance.getItem(
                    Core.LOCALKEY_BGM_SOUND
                );
            }),
            (t.prototype.getGameSoundLocalStorage = function() {
                return Core.StorageManager.instance.getItem(
                    Core.LOCALKEY_EGAME_SOUND
                );
            }),
            (t.prototype.getSoundLocalStorage = function() {
                return Core.StorageManager.instance.getItem(
                    Core.LOCALKEY_LANG_SOUND
                );
            }),
            (t.prototype.getLiveSoundLocalStorage = function() {
                return Core.StorageManager.instance.getItem(
                    Core.LOCALKEY_LIVE_SOUND
                );
            }),
            (t.prototype.getVideoAutoChangeLocalStorage = function() {
                return Core.StorageManager.instance.getItem(
                    Core.LOCALKEY_VIDEO_AUTO_CHANGE
                );
            }),
            (t.prototype.getBgmVolumeLocalStorage = function() {
                return Core.StorageManager.instance.getItem(
                    Core.LOCALKEY_BGM_VOLUME
                );
            }),
            (t.prototype.getSoundVolumeLocalStorage = function() {
                return Core.StorageManager.instance.getItem(
                    Core.LOCALKEY_SOUND_VOLUME
                );
            }),
            (t.prototype.getGameVolumeLocalStorage = function() {
                return Core.StorageManager.instance.getItem(
                    Core.LOCALKEY_GAME_VOLUME
                );
            }),
            (t.prototype.getLiveVolumeLocalStorage = function() {
                return Core.StorageManager.instance.getItem(
                    Core.LOCALKEY_LIVE_VOLUME
                );
            }),
            (t.prototype.getBGMEnable = function() {
                return (
                    this.getBgmLocalStorage() ||
                        Core.StorageManager.instance.setItem(
                            Core.LOCALKEY_BGM_SOUND,
                            '1'
                        ),
                    '1' == this.getBgmLocalStorage()
                        ? ((this.bgmEnable = !0),
                          Core.soundManager.setBGMEnable(!0))
                        : '0' == this.getBgmLocalStorage() &&
                          ((this.bgmEnable = !1),
                          Core.soundManager.setBGMEnable(!1)),
                    this.bgmEnable
                );
            }),
            (t.prototype.getSoundEnable = function() {
                return (
                    this.getSoundLocalStorage() ||
                        Core.StorageManager.instance.setItem(
                            Core.LOCALKEY_LANG_SOUND,
                            '1'
                        ),
                    '1' == this.getSoundLocalStorage()
                        ? ((this.soundEnable = !0),
                          Core.soundManager.setSoundEnable(!0))
                        : '0' == this.getSoundLocalStorage() &&
                          ((this.soundEnable = !1),
                          Core.soundManager.setSoundEnable(!1)),
                    this.soundEnable
                );
            }),
            (t.prototype.getGameSoundEnable = function() {
                return (
                    this.getGameSoundLocalStorage() ||
                        Core.StorageManager.instance.setItem(
                            Core.LOCALKEY_EGAME_SOUND,
                            '1'
                        ),
                    '1' == this.getGameSoundLocalStorage()
                        ? ((this.gameSoundEnable = !0),
                          Core.soundManager.setGameSoundEnable(!0))
                        : '0' == this.getGameSoundLocalStorage() &&
                          ((this.gameSoundEnable = !1),
                          Core.soundManager.setGameSoundEnable(!1)),
                    this.gameSoundEnable
                );
            }),
            (t.prototype.getLiveSoundEnable = function() {
                return (
                    this.getLiveSoundLocalStorage() ||
                        Core.StorageManager.instance.setItem(
                            Core.LOCALKEY_LIVE_SOUND,
                            '1'
                        ),
                    '1' == this.getLiveSoundLocalStorage()
                        ? ((this.liveSoundEnable = !0),
                          Core.soundManager.setLiveSoundEnable(!0))
                        : '0' == this.getLiveSoundLocalStorage() &&
                          ((this.liveSoundEnable = !1),
                          Core.soundManager.setLiveSoundEnable(!1)),
                    this.liveSoundEnable
                );
            }),
            (t.prototype.getVideoAutoChange = function() {
                return (
                    this.getVideoAutoChangeLocalStorage() ||
                        Core.StorageManager.instance.setItem(
                            Core.LOCALKEY_VIDEO_AUTO_CHANGE,
                            '1'
                        ),
                    '1' == this.getVideoAutoChangeLocalStorage()
                        ? (this.videoAutoChange = !0)
                        : '0' == this.getVideoAutoChangeLocalStorage() &&
                          (this.videoAutoChange = !1),
                    this.videoAutoChange
                );
            }),
            (t.prototype.getBgmVolume = function() {
                return (
                    this.getBgmVolumeLocalStorage()
                        ? (this.bgmVolume = Number(
                              this.getBgmVolumeLocalStorage()
                          ))
                        : Core.StorageManager.instance.setItem(
                              Core.LOCALKEY_BGM_VOLUME,
                              '0.5'
                          ),
                    this.bgmVolume
                );
            }),
            (t.prototype.getSoundVolume = function() {
                return (
                    this.getSoundVolumeLocalStorage()
                        ? (this.soundVolume = Number(
                              this.getSoundVolumeLocalStorage()
                          ))
                        : Core.StorageManager.instance.setItem(
                              Core.LOCALKEY_SOUND_VOLUME,
                              '0.5'
                          ),
                    this.soundVolume
                );
            }),
            (t.prototype.getGameVolume = function() {
                return (
                    this.getGameVolumeLocalStorage()
                        ? (this.gameVolume = Number(
                              this.getGameVolumeLocalStorage()
                          ))
                        : Core.StorageManager.instance.setItem(
                              Core.LOCALKEY_GAME_VOLUME,
                              '0.5'
                          ),
                    this.gameVolume
                );
            }),
            (t.prototype.getLiveVolume = function() {
                return (
                    this.getLiveVolumeLocalStorage()
                        ? (this.liveVolume = Number(
                              this.getLiveVolumeLocalStorage()
                          ))
                        : Core.StorageManager.instance.setItem(
                              Core.LOCALKEY_LIVE_VOLUME,
                              '0.5'
                          ),
                    this.liveVolume
                );
            }),
            (t.prototype.setBGMEnable = function(t) {
                Core.soundManager.setBGMEnable(t);
                var e = 1 == t ? '1' : '0';
                this.setBgmLocalStorage(e),
                    (this.bgmEnable = Core.soundManager.getBGMEnable()),
                    this.dispatchAction(i._e);
            }),
            (t.prototype.setSoundEnable = function(t) {
                Core.soundManager.setSoundEnable(t);
                var e = 1 == t ? '1' : '0';
                this.setSoundLocalStorage(e),
                    (this.soundEnable = Core.soundManager.getSoundEnable()),
                    this.dispatchAction(i.be);
            }),
            (t.prototype.setGameSoundEnable = function(t) {
                Core.soundManager.setGameSoundEnable(t);
                var e = 1 == t ? '1' : '0';
                this.setGameSoundLocalStorage(e),
                    (this.gameSoundEnable = Core.soundManager.getGameSoundEnable()),
                    this.dispatchAction(i.Pe);
            }),
            (t.prototype.setLiveEnable = function(t) {
                Core.soundManager.setLiveSoundEnable(t);
                var e = 1 == t ? '1' : '0';
                this.setLiveSoundLocalStorage(e),
                    (this.liveSoundEnable = Core.soundManager.getLiveSoundEnable()),
                    this.dispatchAction(i.ot);
            }),
            (t.prototype.setVideoAutoChange = function(t) {
                this.videoAutoChange = t;
                var e = 1 == t ? '1' : '0';
                this.setVideoAutoChangeLocalStorage(e),
                    this.dispatchAction(i.Ve);
            }),
            (t.prototype.updateBgmVolume = function(t) {
                Core.soundManager.setBgmVolume(t / 100),
                    (this.bgmVolume = Core.soundManager.getBgmVolume()),
                    this.setBgmVolumeLocalStorage(String(this.bgmVolume));
            }),
            (t.prototype.updateSoundVolume = function(t) {
                Core.soundManager.setVolume(t / 100),
                    (this.soundVolume = Core.soundManager.getVolume()),
                    this.setSoundVolumeLocalStorage(String(this.soundVolume));
            }),
            (t.prototype.updateGameVolume = function(t) {
                Core.soundManager.setGameVolume(t / 100),
                    (this.gameVolume = Core.soundManager.getGameVolume()),
                    this.setGameVolumeLocalStorage(String(this.gameVolume));
            }),
            (t.prototype.updateLiveVolume = function(t) {
                Core.soundManager.setLiveVolume(t / 100),
                    (this.liveVolume = Core.soundManager.getLiveVolume()),
                    this.setLiveVolumeLocalStorage(String(this.liveVolume)),
                    this.dispatchAction(i.at);
            }),
            (t.prototype.ledBGMSetting = function(t) {
                var e = 1 == t ? '1' : '0';
                this.setBgmLocalStorage(e),
                    (this.bgmEnable = Core.soundManager.getBGMEnable()),
                    this.dispatchAction(i.ge);
            }),
            t
        );
    })(Core.StoreBase);
    (i.SettingStore = t), __reflect(t.prototype, 'VideoGameCore.SettingStore');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(o) {
    var t = (function(n) {
        function t() {
            var t = n.call(this) || this;
            return (
                (t.socketList = [o.PlazaSocket.instance]),
                (t.gameURLMap = new Core.HashMap()),
                (t.gameWindowMap = new Core.HashMap()),
                t
            );
        }
        return (
            __extends(t, n),
            Object.defineProperty(t, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.init = function() {
                return this.initInstance(this);
            }),
            (t.prototype.getWalletSession = function(t, e, i) {
                o.PlazaSocket.instance.writeBytes(
                    o.getCMDWalletSession(
                        t,
                        e,
                        Core.LoginStore.instance.loginName,
                        i,
                        Core.LoginStore.instance.tokenStr
                    )
                );
            }),
            (t.prototype.onSocketData = function(t, e) {
                switch ((n.prototype.onSocketData.call(this, t, e), t.respId)) {
                    case o.Ac:
                        var i = t;
                        if (
                            ((this.url = this.useDNSApi(i.url)),
                            i.gameType === o.GAME_YOPLAY)
                        ) {
                            var r = o.PCGameConfig.instance.yoPlayConfig.webUrl,
                                s = Core.LoginStore.instance.isDemoAc
                                    ? '0'
                                    : '1';
                            (r +=
                                '?username=' +
                                Core.LoginStore.instance.userName),
                                (r += '&pid=' + Core.ExternalData.pid),
                                (r +=
                                    '&nick=' +
                                    encodeURIComponent(
                                        Core.LoginStore.instance.nickName
                                    )),
                                (r += '&userFlag=' + s),
                                (r +=
                                    '&lang=' +
                                    Core.LocalizeStore.instance.lang),
                                (r +=
                                    '&token=' +
                                    Core.LoginStore.instance.tokenStr),
                                (r += '&autoActivate=true'),
                                (this.url = this.useDNSApi(r));
                        } else
                            this.url +=
                                '&lang=' + Core.LocalizeStore.instance.SWLang;
                        (this.gameType = i.gameType),
                            this.gameURLMap.set(this.gameType, this.url),
                            this.dispatchAction(o.mc, i);
                }
            }),
            (t.prototype.loginGame = function(t) {
                Core.ExternalData.isPcVersion
                    ? this.getWalletSession(t == o.GAME_FISH ? 2 : 0, 0, t)
                    : this.getWalletSession(1, 1, t);
            }),
            (t.prototype.openURLByGameType = function(t) {
                if (this.gameWindowMap.has(t)) {
                    var e = this.gameWindowMap.get(t);
                    e.closed && ((e = null), this.gameWindowMap['delete'](t));
                }
                if (!this.gameWindowMap.has(t) && this.gameURLMap.has(t)) {
                    var i = this.gameURLMap.get(t),
                        r = Core.openUrlWithProps(
                            i,
                            '',
                            'status=0,toolbar=0,menubar=0,scrollbars=1'
                        );
                    this.gameWindowMap.set(t, r);
                }
            }),
            (t.prototype.enterThirdGame = function(t) {}),
            (t.prototype.useDNSApi = function(t) {
                var e = t,
                    i = Core.Config.HostConfig.instance.getHost('plaza')
                        .domainList;
                return (e +=
                    'https:' === location.protocol
                        ? '&ipdomains=' + i.join('_')
                        : '&ips=' + i.join('_'));
            }),
            t
        );
    })(Core.EnterGameStore);
    (o.ThirdGameStore = t),
        __reflect(t.prototype, 'VideoGameCore.ThirdGameStore');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(c) {
    var t = (function(i) {
        function t() {
            var t = i.call(this) || this;
            t.initNoCommMap = [];
            var e = Core.LoginStore.instance;
            return (
                t.setBalance(e.balance),
                e.addActionListener(
                    Core.Wh,
                    function() {
                        t.setBalance(e.balance);
                    },
                    t
                ),
                (t.socketList = [c.PlazaSocket.instance]),
                t
            );
        }
        return (
            __extends(t, i),
            Object.defineProperty(t, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.init = function() {
                return this.initInstance(this);
            }),
            (t.prototype.setBalance = function(t) {
                var e = !(this._balance === t);
                (this._balance = t), e && this.dispatchAction(c.ei);
            }),
            Object.defineProperty(t.prototype, 'balance', {
                get: function() {
                    return this._balance;
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(t.prototype, 'personalLimitList', {
                get: function() {
                    return this._personalLimitList;
                },
                set: function(t) {
                    (this._personalLimitList = t), this.dispatchAction(c.ke);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.onSocketData = function(t, e) {
                var i = this;
                switch (t.respId) {
                    case c.we:
                        var r = t;
                        1 === r.seqNo
                            ? (Core.NonstopTimer.instance.clearTimeout(
                                  this.payoutTimer
                              ),
                              (this.payoutTimer = Core.NonstopTimer.instance.setTimeout(
                                  function() {
                                      i.setBalance(r.val),
                                          Core.NonstopTimer.instance.clearTimeout(
                                              i.payoutTimer
                                          ),
                                          (i.payoutTimer = 0);
                                  },
                                  this,
                                  c.StreamConfig.instance.getAverageDelay()
                              )))
                            : (Core.NonstopTimer.instance.clearTimeout(
                                  this.payoutTimer
                              ),
                              this.setBalance(r.val));
                        break;
                    case c.Ue:
                        var s = t;
                        this.personalLimitList
                            ? s.limitList.forEach(function(t) {
                                  i.personalLimitList.set(t.playtype, t);
                              })
                            : (this.personalLimitList = s.limitList),
                            this.dispatchAction(c.ke);
                        break;
                    case c.Zs:
                        var n = t;
                        this.personalLimitList
                            ? n.limitList.forEach(function(t) {
                                  i.personalLimitList.set(t.playtype, t);
                              })
                            : (this.personalLimitList = n.limitList);
                        break;
                    case c.VIP_VIDEO_LIMITSET:
                        var o = t;
                        (this._vipLimitList = o.limitList),
                            this.dispatchAction(c.ke);
                        break;
                    case c.Ke:
                        var a = t;
                        this._allTableLimitList ||
                            (this._allTableLimitList = new Core.HashMap()),
                            this._allTableLimitList.set(
                                a.tablecode,
                                a.limitList
                            ),
                            this.dispatchAction(c.ke);
                }
            }),
            (t.prototype.updateBalanceFromThridGame = function(t) {
                Core.NonstopTimer.instance.clearTimeout(this.payoutTimer),
                    this.setBalance(t),
                    (this.payoutTimer = 0),
                    this.dispatchAction(c.ei);
            }),
            (t.prototype.getBetLimitByPlayType = function(t, e, i, r) {
                void 0 === e && (e = null),
                    void 0 === i && (i = 2),
                    void 0 === r && (r = null);
                var s =
                        this.personalLimitList && this.personalLimitList.has(t)
                            ? this.personalLimitList.get(t)
                            : null,
                    n =
                        this._allTableLimitList &&
                        e &&
                        this._allTableLimitList.has(e)
                            ? this._allTableLimitList.get(e)
                            : null,
                    o = n && n.has(t) ? n.get(t) : null,
                    a = new c.BetLimit();
                if (
                    (s ||
                        (t != c.PLAYTYPE_BANKER && this.personalLimitList
                            ? (s = this.personalLimitList.get(
                                  c.PLAYTYPE_BANKER
                              ))
                            : ((s = new c.BetLimit()),
                              (s.min = 0),
                              (s.max = Number.MAX_VALUE))),
                    !o)
                ) {
                    if (r) {
                        var h = c.VideoPlazaStore.instance.getVipVideoInfo(r);
                        h &&
                            ((o = new c.BetLimit()),
                            (o.max = h.maxLimit),
                            (o.min = h.minLimit));
                    }
                    o || (o = s);
                }
                if (1 == i) a = s;
                else if (this.isVipTable(r)) {
                    var u =
                        this._vipLimitList && this._vipLimitList.has(t)
                            ? this._vipLimitList.get(t)
                            : null;
                    u
                        ? ((a.min = u.min), (a.max = u.max))
                        : ((a.min = Math.max(o.min, s.min)),
                          (a.max = Math.min(o.max, s.max)));
                } else
                    (a.min = Math.max(o.min, s.min)),
                        (a.max = Math.min(o.max, s.max));
                return a;
            }),
            (t.prototype.isVipTable = function(t) {
                var e = !1;
                if (t) {
                    var i = c.RoomConfig.instance.getRoomInfoByVid(t);
                    e =
                        i &&
                        (i.gmtype === c.GAME_CBAC ||
                            i.gmtype === c.GAME_LBAC ||
                            i.gmtype === c.GAME_ABAC);
                }
                return e;
            }),
            (t.prototype.setInitNoComm = function(t) {
                -1 == this.initNoCommMap.indexOf(t) &&
                    this.initNoCommMap.push(t);
            }),
            (t.prototype.checkInitNoComm = function(t) {
                return this.initNoCommMap.indexOf(t) > -1;
            }),
            t
        );
    })(Core.NetworkStoreBase);
    (c.UserStore = t), __reflect(t.prototype, 'VideoGameCore.UserStore');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    (s.DEFAULT_WIDTH = 1780),
        (s.DEFAULT_HIGHT = 1001),
        (s.VIDEO_RESOLUTION = { SD: 1, HD: 2, MOBILE: 3, CROPPED: 14 }),
        (s.VIDEO_TYPE = {
            FLV: 'video/flv',
            HLS: 'application/x-mpegURL',
            RTMP: 'video/rtmp'
        });
    var t = (function(e) {
        function t() {
            var t = e.call(this) || this;
            return (
                (t.playerMap = new Core.HashMap()),
                (t.storeMap = new Core.HashMap()),
                t
            );
        }
        return (
            __extends(t, e),
            Object.defineProperty(t, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.init = function() {
                return this.initInstance(this);
            }),
            (t.prototype.getPlayerById = function(t) {
                void 0 === t && (t = s.DEFAULT_ROOT_ID);
                var e = this.playerMap.get(t);
                if (!e) {
                    (e = new s.MediaElementJsPlayer(t)),
                        this.playerMap.set(t, e);
                    var i = this.getVideoStoreById(t);
                    e.addEventListener(s.EVENT_VIDEO.PLAY, i.onPlay.bind(i)),
                        e.addEventListener(
                            s.EVENT_VIDEO.ERROR,
                            i.onError.bind(i)
                        ),
                        e.addEventListener(
                            s.EVENT_VIDEO.SIGNAL,
                            i.updateSignal.bind(i)
                        );
                }
                return e;
            }),
            (t.prototype.getVideoStoreById = function(t) {
                void 0 === t && (t = s.DEFAULT_ROOT_ID);
                var e = this.storeMap.get(t);
                return (
                    e || ((e = new s.VideoStore()), this.storeMap.set(t, e)), e
                );
            }),
            (t.prototype.openPlayer = function(t) {
                void 0 === t && (t = s.DEFAULT_ROOT_ID);
                var e = this.getVideoStoreById(t);
                (e.isOpen = !0), this.startPlayer(t);
            }),
            (t.prototype.startPlayer = function(t) {
                void 0 === t && (t = s.DEFAULT_ROOT_ID);
                var e = this.getPlayerById(t),
                    i = this.getVideoStoreById(t),
                    r = i.getStreamList();
                i.playerOptions && e.setOptions(i.playerOptions),
                    r.length > 0 && (e.setSrc(i.getStreamList()), e.play());
            }),
            (t.prototype.stopPlayer = function(t, e) {
                void 0 === t && (t = s.DEFAULT_ROOT_ID),
                    void 0 === e && (e = !1);
                var i = this.getPlayerById(t);
                this.getVideoStoreById(t);
                i.stop(),
                    e &&
                        (i.removeEventListener(s.EVENT_VIDEO.PLAY),
                        i.removeEventListener(s.EVENT_VIDEO.ERROR),
                        i.removeEventListener(s.EVENT_VIDEO.SIGNAL),
                        i.destroy(),
                        this.playerMap['delete'](t));
            }),
            (t.prototype.closePlayer = function(t, e) {
                void 0 === t && (t = s.DEFAULT_ROOT_ID),
                    void 0 === e && (e = !1);
                var i = this.getVideoStoreById(t);
                i.isOpen && i.isPlaying && this.stopPlayer(t, e),
                    (i.isOpen = !1);
            }),
            t
        );
    })(Core.SingletonDispatcher);
    (s.VideoFactory = t), __reflect(t.prototype, 'VideoGameCore.VideoFactory');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(D) {
    var t = (function(e) {
        function t() {
            var t = e.call(this) || this;
            return (
                (t.currencyCode = ''),
                (t.currencyRate = 1),
                (t.selectedChipIndex = -1),
                (t.linkSelectedChipIndex = -1),
                (t.graphIndex = 0),
                (t.userPoint = 0),
                (t.dayPayoffNum = 0),
                (t.dayValidBetNum = 0),
                (t.totalBetNum = 0),
                (t.loginLongNum = 0),
                (t.lastBalSeq = -1),
                (t.onlinePlayerCountInt = 0),
                (t.langList = []),
                (t.showPlatformList = []),
                (t.isLockOnce = !1),
                (t.socketList = [D.PlazaSocket.instance]),
                (t.dealerInfoMap = new Core.HashMap()),
                (t.micDealerInfoMap = new Core.HashMap()),
                (t.ledSeatStatusMap = new Core.HashMap()),
                (t.streamInfoMap = new Core.HashMap()),
                (t.anchorDataMap = new Core.HashMap()),
                (t.anchorFavDataMap = new Core.HashMap()),
                (t.anchorRoomMap = new Core.HashMap()),
                (t.anchorChipSetMap = new Core.HashMap()),
                (t.anchorList = []),
                t
            );
        }
        return (
            __extends(t, e),
            Object.defineProperty(t, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.init = function() {
                return this.initInstance(this);
            }),
            (t.prototype.connectPlaza = function() {
                D.PlazaSocket.instance.autoConnect(),
                    Core.ntimer.addEventListener(
                        Core.EVENT_PAUSE,
                        function() {
                            D.PlazaSocket.instance.killSocket();
                        },
                        this
                    ),
                    Core.ntimer.addEventListener(
                        Core.EVENT_RESUME,
                        function() {
                            D.PlazaSocket.instance.autoConnect();
                        },
                        this
                    );
            }),
            (t.prototype.getLedAnchorList = function() {
                var e = [];
                return (
                    this.anchorDataMap.forEach(function(t) {
                        t.isLike && e.push(t);
                    }, this),
                    e.sort(this.ledSortAnchorList.bind(this)),
                    e
                );
            }),
            (t.prototype.changeLang = function(t, e) {
                var i = this;
                if ((void 0 === e && (e = !1), e))
                    return void (Core.SoundManager.instance.lang = t);
                this.dispatchAction(Core.su, !0);
                var r = Core.moduleNavigator.prepareLang(t, e);
                r.once(
                    Core.EVENT_COMPLETE,
                    function() {
                        e
                            ? (Core.SoundManager.instance.lang = t)
                            : (Core.LocalizeStore.instance.lang = t),
                            i.dispatchAction(Core.su, !1);
                    },
                    this
                ),
                    r.startLoad();
            }),
            (t.prototype.onSocketConnected = function(t) {
                t === D.PlazaSocket.instance &&
                    t.writeBytes(
                        D.getCMDClientLoginPlaza(
                            Core.LoginStore.instance.loginName,
                            Core.LoginStore.instance.token
                        )
                    );
            }),
            (t.prototype.onSocketData = function(t, e) {
                var i = this;
                switch (t.respId) {
                    case D.Lc:
                        var r = t;
                        switch (r.retCode) {
                            case 0:
                                dclib('LOGIN PLAZA SUCCESS'),
                                    this.dispatchAction(D.tu),
                                    this.isLockOnce ||
                                        (this.dispatchAction(D.Fo),
                                        (this.isLockOnce = !0)),
                                    e.writeBytes(
                                        D.getCMDGetPlayerBalance(
                                            Core.LoginStore.instance.loginName
                                        )
                                    );
                                break;
                            default:
                                e.killSocket(),
                                    dclib('LOGIN PLAZA FAIL ' + r.retCode),
                                    ExternalProgress('plazaError', r.retCode),
                                    this.dispatchAction(D._c),
                                    Core.LoginStore.instance.renewToken(
                                        function() {
                                            e.autoConnect();
                                        },
                                        this
                                    );
                        }
                        break;
                    case D.Nc:
                        var s = t,
                            n = this.streamInfoMap.get(s.platform);
                        (null == n ||
                            n.param != s.param ||
                            n.token != s.token) &&
                            (this.streamInfoMap.set(s.platform, s),
                            this.dispatchAction(D.R));
                        break;
                    case D.jc:
                        var o = t;
                        this.dispatchAction(D.zn),
                            this.dispatchAction(D.lc, o.vid);
                        break;
                    case D.Bc:
                        var a = t;
                        0 == a.nReason
                            ? (e.killSocket(), this.dispatchAction(D.ni))
                            : this.dispatchAction(D.bc);
                        break;
                    case D.VIDEO_DEALER_INFO:
                        var h = t;
                        this.dealerInfoMap.set(h.vid, h),
                            this.dispatchAction(D.st, h.vid);
                        break;
                    case D.LBAC_DEALER_INFO:
                        var u = t;
                        if (this.micDealerInfoMap.has(u.vid)) {
                            var c = this.micDealerInfoMap.get(u.vid);
                            if (this.anchorDataMap.has(c.name)) {
                                var f = this.anchorDataMap.get(c.name);
                                (f.vid = ''), this.anchorDataMap.set(c.name, f);
                            }
                        }
                        if (
                            (this.micDealerInfoMap.set(u.vid, u),
                            this.anchorDataMap.has(u.name))
                        ) {
                            var f = this.anchorDataMap.get(u.name);
                            (f.vid = u.vid),
                                this.anchorDataMap.set(u.name, f),
                                f.isLike && this.dispatchAction(D.Zu, f);
                        } else if (
                            D.LiveAnchorConfig.instance.anchorInfoMap.has(
                                u.name
                            )
                        ) {
                            var C = D.LiveAnchorConfig.instance.anchorInfoMap.get(
                                    u.name
                                ),
                                l = this.anchorFavDataMap.get(u.name),
                                f = {
                                    like: null,
                                    follower: {},
                                    status: null,
                                    isLike: !1,
                                    vid: u.vid,
                                    roomID: null,
                                    priority: C.priority
                                };
                            l && (f.like = l.like),
                                this.anchorDataMap.set(u.name, f);
                        }
                        this.dispatchAction(D.ih),
                            this.dispatchAction(D.st, u.vid);
                        break;
                    case D.LBAC_SEAT_STATUS:
                        var m = t;
                        this.ledSeatStatusMap.set(m.vid, m),
                            this.dispatchAction(D.st, m.vid);
                        break;
                    case D.VIP_VIDEO_LIST:
                        var d = t;
                        (this.vipVideoInfoMap = d.vipVideoInfoMap),
                            this.dispatchAction(D.hc);
                        break;
                    case D.$n:
                        var v = t;
                        (this.mtStatusMap = v.mtStatusMap),
                            this.dispatchAction(D.st),
                            this.dispatchAction(D.Ja),
                            this.dispatchAction(D.Gc);
                        break;
                    case D.Mc:
                        var G = t;
                        (this.roomStatusMap = G.roomStatusMap),
                            this.dispatchAction(D.st);
                        break;
                    case D.Dc:
                        var _ = t;
                        (this.onlinePlayerCountInt = _.count_int),
                            this.dispatchAction(D.ke);
                        break;
                    case D.Hc:
                        var b = t;
                        (this.currencyCode = b.cnyCode),
                            (this.currencyRate = b.cnyRate);
                        var P = D.CurrencyLangConfig.instance.getLangByCurrency(
                            this.currencyCode
                        );
                        (this.langList = this.joinLangList(
                            P,
                            Core.LANG_CANDIDATE_LIST
                        )),
                            this.langList.indexOf(
                                Core.LocalizeStore.instance.lang
                            ) < 0 &&
                                (this.changeLang(this.langList[0]),
                                this.changeLang(this.langList[0], !0)),
                            this.dispatchAction(D.ke);
                        break;
                    case D.ALL_CURRENCY_INFO:
                        var V = t;
                        this.currencyInfo = V.currencyInfo;
                        break;
                    case D.Uc:
                        var g = t;
                        this.allChipSetMap
                            ? g.chipSetMap.forEach(function(t, e) {
                                  i.allChipSetMap.set(e, t);
                              }, this)
                            : (this.allChipSetMap = g.chipSetMap),
                            this.checkChipSet(),
                            this.dispatchAction(D.Eu);
                        break;
                    case D.Fc:
                        var p = t;
                        this.favChipSetMap
                            ? p.chipSetMap.forEach(function(t, e) {
                                  i.favChipSetMap.set(e, t);
                              }, this)
                            : (this.favChipSetMap = p.chipSetMap),
                            this.checkChipSet(),
                            e.writeBytes(D.getCMDGetAllChipSet());
                        break;
                    case D.Kc:
                        var k = t;
                        0 == k.retCode &&
                            (this.favChipSetMap.set(
                                this.tempFavChipSet.gametype,
                                this.tempFavChipSet
                            ),
                            this.dispatchAction(D.yu));
                        break;
                    case D.Zc:
                        var w = t;
                        (this.graphIndex = w.graphIndex),
                            this.setUserPoint(w.scoreInt),
                            (this.dayPayoffNum = w.dayPayoffNum),
                            (this.dayValidBetNum = w.dayValidBetNum),
                            (this.totalBetNum = w.totalBetNum),
                            (this.loginLongNum = w.loginLongNum),
                            this.dispatchAction(D.ke);
                        break;
                    case D.Cf:
                        var z = t;
                        this.anchorRoomMap = z.anchorRoomMap;
                        break;
                    case D.if:
                        for (
                            var S = t, y = 0;
                            y < S.anchorFollowerList.length;
                            y++
                        ) {
                            var E = S.anchorFollowerList[y];
                            if (
                                D.LiveAnchorConfig.instance.anchorInfoMap.has(
                                    E.anchorName
                                )
                            ) {
                                var f = { like: E, isLike: !1 };
                                this.anchorFavDataMap.set(E.anchorName, f);
                            }
                        }
                        this.dispatchAction(D.ih);
                        break;
                    case D.te:
                        var T = t;
                        if (
                            D.LiveAnchorConfig.instance.anchorInfoMap.has(
                                T.anchorName
                            )
                        ) {
                            var C = D.LiveAnchorConfig.instance.anchorInfoMap.get(
                                    T.anchorName
                                ),
                                f = this.anchorDataMap.get(T.anchorName),
                                l = this.anchorFavDataMap.get(T.anchorName);
                            f
                                ? ((f.status = T), (f.roomID = T.seqNo))
                                : (f = {
                                      like: null,
                                      follower: {},
                                      status: T,
                                      isLike: !1,
                                      roomID: T.seqNo,
                                      priority: C.priority
                                  }),
                                l && (f.like = l.like),
                                this.anchorDataMap.set(T.anchorName, f);
                        }
                        this.dispatchAction(D.ih);
                        break;
                    case D.rf:
                        var x = t;
                        (this.galleryList = []), (this.anchorList = []);
                        for (var y = 0; y < x.anchorList.length; y++) {
                            var O = x.anchorList[y];
                            if (
                                D.LiveAnchorConfig.instance.anchorInfoMap.has(
                                    O.anchorName
                                )
                            ) {
                                var f;
                                this.anchorDataMap.has(O.anchorName) &&
                                    ((f = this.anchorDataMap.get(O.anchorName)),
                                    (f.follower = O),
                                    this.anchorDataMap.set(O.anchorName, f),
                                    this.anchorList.push(f));
                            }
                        }
                        for (
                            var I = 0;
                            I < D.LiveAnchorConfig.instance.gallery.length;
                            I++
                        )
                            for (
                                var R = D.LiveAnchorConfig.instance.gallery[I],
                                    y = 0;
                                y < this.anchorList.length;
                                y++
                            ) {
                                var f = this.anchorList[y];
                                R === f.follower.anchorName &&
                                    this.galleryList.indexOf(R) <= -1 &&
                                    this.galleryList.push(R);
                            }
                        this.anchorList.sort(this.sortAnchorList.bind(this)),
                            this.dispatchAction(D.ih);
                        break;
                    case D.sf:
                        for (var L = t, y = 0; y < L.anchorList.length; y++) {
                            var j = L.anchorList[y];
                            if (
                                D.LiveAnchorConfig.instance.anchorInfoMap.has(
                                    j.anchorName
                                )
                            ) {
                                var f;
                                this.anchorDataMap.has(j.anchorName) &&
                                    ((f = this.anchorDataMap.get(j.anchorName)),
                                    (f.isLike = !0),
                                    this.anchorDataMap.set(j.anchorName, f));
                            }
                        }
                        break;
                    case D.hf:
                        var B = t;
                        if (
                            D.LiveAnchorConfig.instance.anchorInfoMap.has(
                                B.anchorFollower.anchorName
                            )
                        ) {
                            var f = this.anchorDataMap.get(
                                B.anchorFollower.anchorName
                            );
                            f &&
                                ((f.like = B.anchorFollower),
                                this.anchorDataMap.set(
                                    B.anchorFollower.anchorName,
                                    f
                                ));
                        }
                        break;
                    case D.nf:
                        var f = this.anchorDataMap.get(this.followAnchorName);
                        f &&
                            ((f.isLike = !0),
                            this.anchorDataMap.set(this.followAnchorName, f),
                            this.dispatchAction(D.rh, {
                                anchorID: this.followAnchorName
                            }),
                            (this.followAnchorName = ''));
                        break;
                    case D.af:
                        var f = this.anchorDataMap.get(this.followAnchorName);
                        f &&
                            ((f.isLike = !1),
                            this.anchorDataMap.set(this.followAnchorName, f),
                            (this.followAnchorName = ''),
                            this.dispatchAction(D.eh));
                        break;
                    case D.uf:
                        var A = t;
                        this.anchorChipSetMap = A.chipSetMap;
                        break;
                    case D.TABLE_NICKNAME_LIST_RES:
                        var N = t;
                        this.dispatchAction(D.le, N.playerList);
                        break;
                    case D.MOBILE_QRCODE_RES:
                        var M = t;
                        this.dispatchAction(D.sc, M.qrCodeString);
                }
            }),
            (t.prototype.getDealerInfo = function(t) {
                return this.dealerInfoMap && this.dealerInfoMap.has(t)
                    ? this.dealerInfoMap.get(t)
                    : null;
            }),
            (t.prototype.getMicDealerInfo = function(t) {
                return this.micDealerInfoMap && this.micDealerInfoMap.has(t)
                    ? this.micDealerInfoMap.get(t)
                    : null;
            }),
            (t.prototype.getLedSeatStatusInfo = function(t) {
                return this.ledSeatStatusMap && this.ledSeatStatusMap.has(t)
                    ? this.ledSeatStatusMap.get(t)
                    : null;
            }),
            (t.prototype.getVipVideoInfo = function(t) {
                return this.vipVideoInfoMap && this.vipVideoInfoMap.has(t)
                    ? this.vipVideoInfoMap.get(t)
                    : null;
            }),
            (t.prototype.isMaintaining = function(t) {
                switch (t) {
                    case D.GAME_EGAMES:
                        t = D.MAINTAIN_EGAMES;
                        break;
                    case D.GAME_YOPLAY:
                        t = D.MAINTAIN_YOPLAY;
                        break;
                    case D.GAME_SPORT:
                        t = D.MAINTAIN_SPORT;
                        break;
                    case D.GAME_FISH:
                        t = D.MAINTAIN_FISH;
                        break;
                    case D.GAME_LIVE:
                        t = D.MAINTAIN_LIVE;
                }
                return (
                    this.mtStatusMap &&
                    this.mtStatusMap.has(t) &&
                    1 == this.mtStatusMap.get(t).status
                );
            }),
            (t.prototype.getPlazaMtStatus = function(t) {
                return this.mtStatusMap && this.mtStatusMap.has(t)
                    ? this.mtStatusMap.get(t)
                    : null;
            }),
            (t.prototype.getMaintainingStatus = function(t, e) {
                var i = !1;
                return (
                    this.mtStatusMap &&
                        t &&
                        this.mtStatusMap.get(t) &&
                        (i = i || 1 == this.mtStatusMap.get(t).status),
                    e &&
                        this.roomStatusMap &&
                        this.roomStatusMap.get(e) &&
                        (i = i || this.roomStatusMap.get(e).maintaining),
                    i
                );
            }),
            (t.prototype.getChipSetByGmtype = function(t) {
                var e =
                    null != this.allChipSetMap
                        ? this.allChipSetMap.get(t)
                        : null;
                return null != e
                    ? e.chips.filter(function(t) {
                          return t >= D.getMinBalance();
                      }, this)
                    : [10, 20, 50, 100, 200, 500, 1e3, 5e3, 1e4, 5e4].slice();
            }),
            (t.prototype.getFavChipSetByGmtype = function(t) {
                var e =
                    null != this.favChipSetMap
                        ? this.favChipSetMap.get(t)
                        : null;
                return null != e
                    ? e.chips.filter(function(t) {
                          return t >= D.getMinBalance();
                      }, this)
                    : this.getChipSetByGmtype(t).slice(0, 5);
            }),
            (t.prototype.getLiveStreamParamsByVid = function(t) {
                var e = D.RoomConfig.instance.getRoomInfoByVid(t);
                if (e) {
                    var i = D.PLATFORM_AGQ;
                    if (
                        e.platformtype === D.PLATFORM_DSP ||
                        e.gmtype === D.GAME_CBAC ||
                        e.platformtype === D.PLATFORM_COMP
                    )
                        i = D.PLATFORM_DSP;
                    else if (e.gmtype === D.GAME_LIVE) return '';
                    var r = this.streamInfoMap.get(i);
                    if (
                        r &&
                        r.param &&
                        r.token &&
                        Core.ExternalData.videoCryptoEnabled
                    )
                        return '?wsSecret=' + r.token + '&wsABSTime=' + r.param;
                }
                return '';
            }),
            (t.prototype.getLiveStreamParamsByPlat = function(t) {
                t == D.PLATFORM_LED && (t = D.PLATFORM_DSP);
                var e = this.streamInfoMap.get(t);
                return e &&
                    e.param &&
                    e.token &&
                    Core.ExternalData.videoCryptoEnabled
                    ? '?wsSecret=' + e.token + '&wsABSTime=' + e.param
                    : '';
            }),
            (t.prototype.checkChipSet = function() {
                var o = this;
                this.favChipSetMap &&
                    this.allChipSetMap &&
                    this.allChipSetMap.forEach(function(t, e) {
                        var i = o.getChipSetByGmtype(e),
                            r = o.getFavChipSetByGmtype(e),
                            s = 0;
                        if (5 != r.length) o.favChipSetMap['delete'](e);
                        else
                            for (var n = 0; n < r.length; n++)
                                if (((s = r[n]), i.indexOf(s) < 0)) {
                                    o.favChipSetMap['delete'](e);
                                    break;
                                }
                    }, this);
            }),
            (t.prototype.getAnchorChipSet = function(t) {
                return this.anchorChipSetMap.has(t)
                    ? this.anchorChipSetMap.get(t).chips
                    : this.getChipSetByGmtype(t);
            }),
            (t.prototype.setFavChipSetByGmtype = function(t, e) {
                this.tempFavChipSet || (this.tempFavChipSet = new D.ChipSet()),
                    (this.tempFavChipSet.gametype = t),
                    this.tempFavChipSet.formatChipSet(e.join(',')),
                    D.PlazaSocket.instance.writeBytes(
                        D.getCMDSetFavChipSet(this.tempFavChipSet)
                    );
            }),
            (t.prototype.requestUserPoint = function() {
                D.PlazaSocket.instance.writeBytes(D.getCMDUserPoint());
            }),
            (t.prototype.requestOnlinePlayerList = function(t) {
                D.PlazaSocket.instance.writeBytes(D.getCMDOnliePlayerList(t));
            }),
            (t.prototype.requestFollowAnchor = function(t) {
                if (this.anchorDataMap.has(t)) {
                    var e = this.anchorDataMap.get(t);
                    (this.followAnchorName = t),
                        D.PlazaSocket.instance.writeBytes(
                            D.getCMDFollowDealer(
                                1,
                                e.like.platformType,
                                e.like.anchorName
                            )
                        );
                }
            }),
            (t.prototype.requestUnfollowAnchor = function(t) {
                if (this.anchorDataMap.has(t)) {
                    var e = this.anchorDataMap.get(t);
                    (this.followAnchorName = t),
                        D.PlazaSocket.instance.writeBytes(
                            D.getCMDUnfollowDealer(
                                1,
                                e.like.platformType,
                                e.like.anchorName
                            )
                        );
                }
            }),
            (t.prototype.setSelectedChip = function(t, e) {
                (this.selectedChipIndex = t),
                    (this.selectedChipValue = e),
                    this.dispatchAction(D.Vc);
            }),
            (t.prototype.sortList = function(t, e) {}),
            (t.prototype.sortAnchorList = function(t, e) {
                if (
                    this.anchorDataMap.has(t.follower.anchorName) &&
                    this.anchorDataMap.has(e.follower.anchorName)
                ) {
                    var i = this.anchorDataMap.get(t.follower.anchorName),
                        r = this.anchorDataMap.get(e.follower.anchorName);
                    if (null !== r.priority && null !== i.priority)
                        var s = r.priority - i.priority;
                    if (null !== r.follower && null !== i.follower)
                        var n =
                            r.follower.followerCount - i.follower.followerCount;
                    if (null !== r.like && null !== i.like)
                        var o = r.like.followerCount - i.like.followerCount;
                    var a =
                            (i.status.ingameFlag > 0 ? 1e3 : 0) +
                            (0 > s ? 100 : 0) +
                            (0 > n ? 10 : 0) +
                            (0 > o ? 1 : 0),
                        h =
                            (r.status.ingameFlag > 0 ? 1e3 : 0) +
                            (s > 0 ? 100 : 0) +
                            (n > 0 ? 10 : 0) +
                            (o > 0 ? 1 : 0);
                    return h - a;
                }
            }),
            (t.prototype.ledSortAnchorList = function(t, e) {
                var i = t.like
                        ? t.like.anchorName
                        : t.follower
                            ? t.follower.anchorName
                            : '',
                    r = e.like
                        ? e.like.anchorName
                        : e.follower
                            ? e.follower.anchorName
                            : '';
                if (this.anchorDataMap.has(i) && this.anchorDataMap.has(r)) {
                    var s = this.anchorDataMap.get(i),
                        n = this.anchorDataMap.get(r);
                    if (null !== n.follower && null !== s.follower)
                        var o =
                            n.follower.followerCount - s.follower.followerCount;
                    if (null !== n.like && null !== s.like)
                        var a = n.like.followerCount - s.like.followerCount;
                    var h =
                            (null != s.vid && '' != s.vid ? 100 : 0) +
                            (0 > o ? 10 : 0) +
                            (0 > a ? 1 : 0),
                        u =
                            (null != n.vid && '' != n.vid ? 100 : 0) +
                            (o > 0 ? 10 : 0) +
                            (a > 0 ? 1 : 0);
                    return u - h;
                }
            }),
            (t.prototype.joinLangList = function(t, e) {
                return t.filter(function(t) {
                    return e.indexOf(t) >= 0;
                });
            }),
            (t.prototype.setUserPoint = function(t) {
                (this.userPoint = t), this.dispatchAction(D.Wa);
            }),
            (t.prototype.getUserPoint = function() {
                return this.userPoint;
            }),
            t
        );
    })(Core.NetworkStoreBase);
    (D.VideoPlazaStore = t),
        __reflect(t.prototype, 'VideoGameCore.VideoPlazaStore');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t = (function(e) {
        function t() {
            var t = e.call(this) || this;
            return (
                (t._line = 0),
                (t._volume = 1),
                (t._signal = 1),
                (t._orientation = egret.OrientationMode.LANDSCAPE),
                (t._isHD = !1),
                (t._isOpen = null),
                (t._draggable = !1),
                (t._isPlaying = !1),
                (t.signalWindow = []),
                (t.windowSize = 5),
                (t.streamList = []),
                (t.lineHost = []),
                t
            );
        }
        return (
            __extends(t, e),
            Object.defineProperty(t.prototype, 'filePath', {
                get: function() {
                    return this._filePath;
                },
                set: function(t) {
                    (this._filePath = t),
                        (this._isPlaying = !1),
                        this.resetSignal(),
                        this.dispatchAction(i.R);
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(t.prototype, 'vid', {
                get: function() {
                    return this._vid;
                },
                set: function(t) {
                    (this._vid = t),
                        (this._isPlaying = !1),
                        this.resetSignal(),
                        this.dispatchAction(i.R);
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(t.prototype, 'isPlaying', {
                get: function() {
                    return this._isPlaying;
                },
                set: function(t) {
                    this._isPlaying = t;
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(t.prototype, 'line', {
                get: function() {
                    return this._line;
                },
                set: function(t) {
                    (this._line = t),
                        this._vid &&
                            ((this._isPlaying = !1),
                            this.resetSignal(),
                            this.dispatchAction(i.R));
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(t.prototype, 'volume', {
                get: function() {
                    return this._volume;
                },
                set: function(t) {
                    (this._volume = t), this._vid && this.dispatchAction(i.at);
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(t.prototype, 'signal', {
                get: function() {
                    return this._signal;
                },
                set: function(t) {
                    t !== this._signal &&
                        ((this._signal = t),
                        this._vid && this.dispatchAction(i.me));
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.updateSignal = function(t) {
                var e = 0;
                this.signalWindow.push(t),
                    this.signalWindow.length > this.windowSize &&
                        this.signalWindow.shift();
                for (var i = 0; i < this.signalWindow.length; i++)
                    e += this.signalWindow[i];
                this.signal = Math.round(e / this.signalWindow.length);
            }),
            (t.prototype.resetSignal = function() {
                (this.signal = 1), (this.signalWindow = []);
            }),
            Object.defineProperty(t.prototype, 'orientation', {
                get: function() {
                    return this._orientation;
                },
                set: function(t) {
                    this._orientation = t;
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(t.prototype, 'isHD', {
                get: function() {
                    return this._isHD;
                },
                set: function(t) {
                    (this._isHD = t),
                        this._vid &&
                            ((this._isPlaying = !1),
                            this.resetSignal(),
                            this.dispatchAction(i.R));
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(t.prototype, 'isOpen', {
                get: function() {
                    return this._isOpen;
                },
                set: function(t) {
                    (this._isOpen = t),
                        (this._isPlaying = !1),
                        this.resetSignal(),
                        this._isOpen
                            ? this.dispatchAction(i.I)
                            : this.dispatchAction(i.O);
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(t.prototype, 'draggable', {
                get: function() {
                    return this._draggable;
                },
                set: function(t) {
                    (this._draggable = t), this.dispatchAction(i.U);
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(t.prototype, 'playerOptions', {
                get: function() {
                    return this._playOptions;
                },
                set: function(t) {
                    this._playOptions = t;
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.setStreamList = function(t) {
                this.streamList = t.slice();
            }),
            (t.prototype.getStreamList = function() {
                return this.streamList;
            }),
            (t.prototype.setLineHost = function(t) {
                this.lineHost = t.slice();
            }),
            (t.prototype.updateStreamList = function() {
                var t = [],
                    e = this.lineHost.slice();
                this._line >= e.length && (this._line = 0);
                var i = e[this._line];
                for (var r in i) {
                    var s = i[r] + this._filePath[r],
                        n = this.getVideoTypeBySrc(s);
                    t.push({ src: s, type: n });
                }
                this.setStreamList(t);
            }),
            (t.prototype.getVideoTypeBySrc = function(t) {
                return 'rtmp' === t.substr(0, 4)
                    ? i.VIDEO_TYPE.RTMP
                    : t.indexOf('.flv') >= 0
                        ? i.VIDEO_TYPE.FLV
                        : t.indexOf('.m3u8') >= 0
                            ? i.VIDEO_TYPE.HLS
                            : '';
            }),
            (t.prototype.getNumberOfLine = function() {
                return this.lineHost.length;
            }),
            (t.prototype.quitVideo = function() {
                this.dispatchAction(i.O);
            }),
            (t.prototype.onPlay = function() {
                this._isPlaying ||
                    ((this._isPlaying = !0), this.dispatchAction(i.j));
            }),
            (t.prototype.onError = function() {
                (this._isPlaying = !1),
                    this.resetSignal(),
                    this.dispatchAction(i.B);
            }),
            (t.prototype.switchRenderMode = function(t) {
                this.dispatchAction(i.A, t);
            }),
            (t.prototype.updateLayer = function(t) {
                this.dispatchAction(i.N, t);
            }),
            (t.prototype.updateSize = function(t) {
                this.dispatchAction(i.D, t);
            }),
            (t.prototype.addVideoPlugin = function(t) {
                this.dispatchAction(i.F, t);
            }),
            (t.prototype.removeVideoPlugin = function(t) {
                this.dispatchAction(i.K, t);
            }),
            t
        );
    })(Core.StoreBase);
    (i.VideoStore = t), __reflect(t.prototype, 'VideoGameCore.VideoStore');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return t.call(this) || this;
            }
            return (
                __extends(e, t),
                (e.prototype.getSocketList = function() {
                    return [i.BacGameSocket.instance];
                }),
                (e.prototype.getBetLimitByPlayType = function(t) {
                    return i.UserStore.instance.getBetLimitByPlayType(
                        t,
                        i.BacStore.instance.tableCode
                    );
                }),
                (e.prototype.cancelBetByPlayType = function(t) {
                    this.stakePool.setAmount(t, this.donePool.getAmount(t));
                }),
                e
            );
        })(i.BetTableStore);
        (t.BetTableStoreCommon = e),
            __reflect(e.prototype, 'VideoGameCore.Bac.BetTableStoreCommon');
    })((t = i.Bac || (i.Bac = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t = (function(i) {
        function t(t) {
            void 0 === t && (t = r.DEFAULT_ROOT_ID);
            var e = i.call(this, t) || this;
            return (
                (e.draggable = !1),
                (e.alwaysOnEdge = !1),
                (e._onTouchStart = e.onTouchStart.bind(e)),
                (e._onTouchMove = e.onTouchMove.bind(e)),
                (e._onTouchEnd = e.onTouchEnd.bind(e)),
                e
            );
        }
        return (
            __extends(t, i),
            (t.prototype.enableDrag = function() {
                this.draggable ||
                    ((this.draggable = !0),
                    this.domNode.node.addEventListener(
                        'touchstart',
                        this._onTouchStart
                    ),
                    this.domNode.node.addEventListener(
                        'touchend',
                        this._onTouchEnd
                    ));
            }),
            (t.prototype.disableDrag = function() {
                this.draggable &&
                    ((this.draggable = !1),
                    this.domNode.node.removeEventListener(
                        'touchstart',
                        this._onTouchStart
                    ),
                    this.domNode.node.removeEventListener(
                        'touchend',
                        this._onTouchEnd
                    ));
            }),
            (t.prototype.onTouchStart = function(t) {
                console.warn(
                    'onTouchStart',
                    t.touches[0].pageX,
                    t.touches[0].pageY
                ),
                    this.domNode.node.addEventListener(
                        'touchmove',
                        this._onTouchMove
                    ),
                    (this.originPoint = {
                        x: t.touches[0].clientX,
                        y: t.touches[0].clientY
                    }),
                    t.stopPropagation(),
                    t.preventDefault();
            }),
            (t.prototype.onTouchMove = function(t) {
                console.warn('onTouchMove', t),
                    (this.movingPoint = {
                        x: this.originPoint.x - t.touches[0].clientX,
                        y: this.originPoint.y - t.touches[0].clientY
                    }),
                    (this.originPoint = {
                        x: t.touches[0].clientX,
                        y: t.touches[0].clientY
                    });
                var e = this.domNode.node.parentElement,
                    i = this.domNode.node,
                    r = e.offsetTop - this.movingPoint.y,
                    s = e.offsetLeft - this.movingPoint.x;
                0 > r
                    ? (r = 0)
                    : r > window.innerHeight - i.clientHeight &&
                      (r = window.innerHeight - i.clientHeight),
                    0 > s
                        ? (s = 0)
                        : s > window.innerWidth - i.clientWidth &&
                          (s = window.innerWidth - i.clientWidth),
                    (e.style.top = r + 'px'),
                    (e.style.left = s + 'px'),
                    console.warn(
                        'onTouchMove',
                        this.movingPoint,
                        this.originPoint
                    ),
                    t.stopPropagation(),
                    t.preventDefault();
            }),
            (t.prototype.onTouchEnd = function(t) {
                console.warn('onTouchEnd', t),
                    this.domNode.node.removeEventListener(
                        'touchmove',
                        this._onTouchMove
                    ),
                    (this.originPoint = null),
                    (this.movingPoint = null),
                    t.stopPropagation(),
                    t.preventDefault();
            }),
            t
        );
    })(r.ScalableWebNode);
    (r.DraggableWebNode = t),
        __reflect(t.prototype, 'VideoGameCore.DraggableWebNode');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(r) {
    var t;
    !(function(t) {
        var e = (function(i) {
            function t() {
                var t = i.call(this) || this;
                return (t.socketList = [r.LiveGameSocket.instance]), t;
            }
            return (
                __extends(t, i),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.onSocketData = function(t, e) {
                    if (
                        (i.prototype.onSocketData.call(this, t, e),
                        !t.vid || this.vid === t.vid)
                    )
                        switch (t.respId) {
                            case r.Qr:
                                this.onGameStart(t);
                        }
                }),
                (t.prototype.release = function() {
                    i.prototype.release.call(this);
                }),
                t
            );
        })(r.RoomTimerBaseStore);
        (t.RoomTimerStore = e),
            __reflect(e.prototype, 'VideoGameCore.Live.RoomTimerStore');
    })((t = r.Live || (r.Live = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    var t;
    !(function(t) {
        var e = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                Object.defineProperty(e, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (e.init = function() {
                    return this.initInstance(this);
                }),
                (e.prototype.initStoreClassMap = function() {
                    this.betStoreClassMap.set(i.GAME_BAC, i.Live.BacBetStore),
                        this.betStoreClassMap.set(i.GAME_DT, i.Live.DtBetStore),
                        this.betStoreClassMap.set(i.GAME_NN, i.Live.NnBetStore),
                        this.betStoreClassMap.set(
                            i.GAME_SHB,
                            i.Live.ShbBetStore
                        ),
                        this.betStoreClassMap.set(
                            i.GAME_ROU,
                            i.Live.RouBetStore
                        ),
                        this.pokerStoreClassMap.set(
                            i.GAME_BAC,
                            i.Live.BacPokerStore
                        ),
                        this.pokerStoreClassMap.set(
                            i.GAME_DT,
                            i.Live.DtPokerStore
                        ),
                        this.pokerStoreClassMap.set(
                            i.GAME_NN,
                            i.Live.NnPokerStore
                        );
                }),
                (e.prototype.createRoomTimerStore = function(t) {
                    var e = i.Live.RoomTimerStore.init();
                    return (e.vid = t), e;
                }),
                (e.prototype.createBetStore = function(t, e) {
                    var i = t.init();
                    return (i.vid = e), i;
                }),
                (e.prototype.createPokerStore = function(t, e) {
                    var i = t.init();
                    return (i.vid = e), i;
                }),
                (e.prototype.releaseStoreInstance = function(t) {
                    egret
                        .getDefinitionByName(egret.getQualifiedClassName(t))
                        .releaseInstance();
                }),
                e
            );
        })(t.StoreFactoryBase);
        (t.StoreFactory = e),
            __reflect(e.prototype, 'VideoGameCore.Live.StoreFactory');
    })((t = i.Live || (i.Live = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(t) {
    var e;
    !(function(i) {
        var t = (function(t) {
            function e() {
                return (null !== t && t.apply(this, arguments)) || this;
            }
            return (
                __extends(e, t),
                Object.defineProperty(e, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (e.init = function() {
                    return this.initInstance(this);
                }),
                (e.prototype.getStoreFactory = function() {
                    return i.StoreFactory.instance;
                }),
                (e.prototype.getLiveStore = function() {
                    return i.LiveStore.instance;
                }),
                Object.defineProperty(e.prototype, 'vid', {
                    get: function() {
                        return this.getLiveStore().vids[0];
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                e
            );
        })(i.BacBetStoreBase);
        (i.BacBetStore = t),
            __reflect(t.prototype, 'VideoGameCore.Live.BacBetStore');
    })((e = t.Live || (t.Live = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(m) {
    var t;
    !(function(l) {
        var t = (function(i) {
            function t() {
                var t = i.call(this) || this;
                return (
                    (t.socketList = [m.LiveGameSocket.instance]),
                    (t.stakePool = new m.StakePool()),
                    (t.donePool = new m.StakePool()),
                    (t.diffPool = new m.StakePool()),
                    (t.lastPool = new m.StakePool()),
                    t.initHashMap(),
                    t
                );
            }
            return (
                __extends(t, i),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                Object.defineProperty(t.prototype, 'roomTimerStore', {
                    get: function() {
                        var t = l.StoreFactory.instance.roomTimerStoreMap.get(
                            l.LiveStore.instance.vids[0]
                        );
                        return t;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, 'roadMapStore', {
                    get: function() {
                        return m.PlazaRoadStore.instance;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.initHashMap = function() {
                    (this.overallPlayInfoMap = new Core.HashMap()),
                        (this.anchorPlayInfoMap = new Core.HashMap()),
                        (this.playerPlayInfoMap = new Core.HashMap()),
                        (this.otherPlayInfoMap = new Core.HashMap()),
                        (this.playerPayoutInfoMap = new Core.HashMap());
                }),
                (t.prototype.getAmountByPlaytype = function(t, e) {
                    void 0 === e && (e = 0);
                    var i = 0;
                    return (
                        0 === e
                            ? (i = this.stakePool.getAmount(t))
                            : 1 === e
                                ? (i = this.donePool.getAmount(t))
                                : 2 === e && (i = this.lastPool.getAmount(t)),
                        i
                    );
                }),
                (t.prototype.getAmountByPlayerSlot = function(t, e) {
                    var i = 0;
                    switch (e) {
                        case 0:
                            i = this.getAmountByPlaytype(t);
                            break;
                        case 1:
                            this.otherPlayInfoMap.has(t) &&
                                (i = this.fromRMB(
                                    this.otherPlayInfoMap.get(t).betCredit
                                ));
                            break;
                        case 2:
                            this.anchorPlayInfoMap.has(t) &&
                                (i = this.fromRMB(
                                    this.anchorPlayInfoMap.get(t).betCredit
                                ));
                    }
                    return i;
                }),
                (t.prototype.getBetLimitByPlayType = function(t) {
                    return m.UserStore.instance.getBetLimitByPlayType(t);
                }),
                (t.prototype.reset = function() {
                    i.prototype.reset.call(this);
                }),
                (t.prototype.sendBetToServer = function(t) {
                    if (
                        (i.prototype.sendBetToServer.call(this, t),
                        this.gameSocket.connected)
                    ) {
                        var e = t.playType;
                        m.LiveGameSocket.instance.writeBytes(
                            m.getCMDFollowerBetExt(
                                l.LiveStore.instance.vids[0],
                                this.gmcode,
                                e,
                                t.amount,
                                'CNY',
                                t.seq
                            )
                        );
                    }
                }),
                (t.prototype.onSocketData = function(t, e) {
                    var r = this;
                    if (!t.vid || this.vid === t.vid) {
                        switch (t.respId) {
                            case m.Qr:
                                this.initHashMap(), this.dispatchAction(m.Z);
                                break;
                            case m.ts:
                                this.m(t);
                                break;
                            case m.es:
                                var i = t,
                                    s = this.playerPlayInfoMap.get(i.play_type);
                                s ||
                                    ((s = {
                                        betCredit: 0,
                                        playType: i.play_type
                                    }),
                                    this.playerPlayInfoMap.set(s.playType, s)),
                                    (s.betCredit += this.toRMB(i.jetton));
                                break;
                            case m.Mt:
                                this._(t);
                                break;
                            case m.ee:
                                (this.playerPayoutInfoMap = new Core.HashMap()),
                                    this.playerPayoutInfoMap.copy(t.payoutsMap),
                                    Core.NonstopTimer.instance.setTimeout(
                                        function() {
                                            r.dispatchAction(m.ao, t),
                                                r.dispatchAction(m.g, t),
                                                r.payoutOverTimeoutDo(
                                                    m.GAME_LIVE
                                                );
                                        },
                                        this,
                                        m.StreamConfig.instance.getAverageDelay()
                                    );
                                break;
                            case m.mt:
                                this.dispatchAction(m.Y);
                                break;
                            case m.ds:
                                if (this.isRecoverBet) {
                                    var n = t;
                                    n.betInfo.forEach(function(t) {
                                        if (t.jetton > 0) {
                                            r.donePool.setAmount(
                                                t.playType,
                                                t.jetton
                                            );
                                            var e = r.toRMB(t.jetton);
                                            r.playerPlayInfoMap.set(
                                                t.playType,
                                                {
                                                    betCredit: e,
                                                    playType: t.playType
                                                }
                                            ),
                                                r.updateLastPool(),
                                                r.stakePool.getAmount(
                                                    t.playType
                                                ) < t.jetton &&
                                                    r.stakePool.setAmount(
                                                        t.playType,
                                                        t.jetton
                                                    ),
                                                r.updateOtherPlayInfo(
                                                    t.playType
                                                );
                                        }
                                    }),
                                        this.diffPool.clear(),
                                        this.dispatchAction(m.T);
                                }
                        }
                        var o = t.anchorID;
                        if (
                            !o ||
                            '' == o ||
                            o === l.LiveStore.instance.anchorID
                        )
                            switch (t.respId) {
                                case m.Wt:
                                    this.initHashMap(),
                                        this.dispatchAction(m.T);
                                    break;
                                case m.as:
                                    var i = t,
                                        s = this.anchorPlayInfoMap.get(
                                            i.betInfo.playType
                                        );
                                    s ||
                                        ((s = {
                                            betCredit: 0,
                                            playType: i.betInfo.playType
                                        }),
                                        this.anchorPlayInfoMap.set(
                                            s.playType,
                                            s
                                        )),
                                        (s.betCredit += i.betInfo.jettonCNY);
                                    break;
                                case m.ss:
                                    if (this.isRecoverBet) {
                                        var a = t;
                                        a.playInfos.forEach(function(t) {
                                            r.overallPlayInfoMap.set(
                                                t.playType,
                                                t
                                            ),
                                                r.updateOtherPlayInfo(
                                                    t.playType
                                                );
                                        }),
                                            this.dispatchAction(m.T, t);
                                    }
                                    break;
                                case m.fs:
                                    var h = t,
                                        u = new Core.HashMap();
                                    h.payoutInfoList.forEach(function(t) {
                                        var e = t.valueCNY;
                                        if (
                                            (r.playerPayoutInfoMap &&
                                                r.playerPayoutInfoMap.has(
                                                    t.playtype
                                                ) &&
                                                (e -= r.playerPayoutInfoMap.get(
                                                    t.playtype
                                                ).valueCNY),
                                            0 != e)
                                        ) {
                                            var i = new m.PlaytypePayout();
                                            (i.playtype = t.playtype),
                                                (i.value = r.fromRMB(e)),
                                                u.set(i.playtype, i);
                                        }
                                    }),
                                        Core.NonstopTimer.instance.setTimeout(
                                            function() {
                                                r.dispatchAction(m.ao, {
                                                    ptPayouts: u,
                                                    playerSlot: 1
                                                });
                                            },
                                            this,
                                            m.StreamConfig.instance.getAverageDelay()
                                        );
                                    break;
                                case m.ls:
                                    var c = t,
                                        f = new Core.HashMap();
                                    c.ptPayouts.forEach(function(t) {
                                        var e = new m.PlaytypePayout();
                                        (e.playtype = t.playtype),
                                            (e.value = r.fromRMB(t.valueCNY)),
                                            f.set(e.playtype, e);
                                    }),
                                        Core.NonstopTimer.instance.setTimeout(
                                            function() {
                                                r.dispatchAction(m.ao, {
                                                    ptPayouts: f,
                                                    playerSlot: 2
                                                });
                                            },
                                            this,
                                            m.StreamConfig.instance.getAverageDelay()
                                        );
                                    break;
                                case m.Gs:
                                    if (this.isRecoverBet) {
                                        var C = t;
                                        C.betInfo.forEach(function(t) {
                                            if (t.jettonCNY > 0) {
                                                var e = {
                                                    betCredit: t.jettonCNY,
                                                    playType: t.playType
                                                };
                                                r.otherPlayInfoMap.set(
                                                    t.playType,
                                                    e
                                                );
                                            }
                                        }),
                                            this.dispatchAction(m.T);
                                    }
                                    break;
                                case m.Ps:
                                    if (this.isRecoverBet) {
                                        var n = t;
                                        n.betInfo.forEach(function(t) {
                                            if (t.jettonCNY > 0) {
                                                var e = {
                                                    betCredit: t.jettonCNY,
                                                    playType: t.playType
                                                };
                                                r.anchorPlayInfoMap.set(
                                                    t.playType,
                                                    e
                                                ),
                                                    r.updateOtherPlayInfo(
                                                        t.playType
                                                    );
                                            }
                                        }),
                                            this.dispatchAction(m.T);
                                    }
                            }
                    }
                }),
                (t.prototype.updateOtherPlayInfo = function(t) {
                    var e = this.overallPlayInfoMap.has(t)
                        ? this.overallPlayInfoMap.get(t).betCredit
                        : 0;
                    this.playerPlayInfoMap.has(t) &&
                        (e -= this.playerPlayInfoMap.get(t).betCredit),
                        this.anchorPlayInfoMap.has(t) &&
                            (e -= this.anchorPlayInfoMap.get(t).betCredit);
                    var i = this.otherPlayInfoMap.get(t);
                    e > 0
                        ? i
                            ? (i.betCredit = e)
                            : this.otherPlayInfoMap.set(t, {
                                  betCredit: e,
                                  playType: t
                              })
                        : i && this.otherPlayInfoMap['delete'](t);
                }),
                Object.defineProperty(t.prototype, 'isRecoverBet', {
                    get: function() {
                        return (
                            1 == this.roomTimerStore.gameStatus ||
                            2 == this.roomTimerStore.gameStatus
                        );
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.fromRMB = function(t) {
                    return (
                        Math.round(
                            t * m.VideoPlazaStore.instance.currencyRate * 100
                        ) / 100
                    );
                }),
                (t.prototype.toRMB = function(t) {
                    return (
                        Math.round(
                            (t / m.VideoPlazaStore.instance.currencyRate) * 100
                        ) / 100
                    );
                }),
                t
            );
        })(m.BetStoreBase);
        (l.DtBetStore = t),
            __reflect(t.prototype, 'VideoGameCore.Live.DtBetStore');
    })((t = m.Live || (m.Live = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(m) {
    var t;
    !(function(l) {
        var t = (function(i) {
            function t() {
                var t = i.call(this) || this;
                return (
                    (t.socketList = [m.LiveGameSocket.instance]),
                    (t.stakePool = new m.StakePoolBull()),
                    (t.donePool = new m.StakePoolBull()),
                    (t.diffPool = new m.StakePoolBull()),
                    (t.lastPool = new m.StakePoolBull()),
                    t.initHashMap(),
                    t
                );
            }
            return (
                __extends(t, i),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                Object.defineProperty(t.prototype, 'roomTimerStore', {
                    get: function() {
                        var t = l.StoreFactory.instance.roomTimerStoreMap.get(
                            l.LiveStore.instance.vids[0]
                        );
                        return t;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, 'roadMapStore', {
                    get: function() {
                        return m.PlazaRoadStore.instance;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.initHashMap = function() {
                    (this.overallPlayInfoMap = new Core.HashMap()),
                        (this.anchorPlayInfoMap = new Core.HashMap()),
                        (this.playerPlayInfoMap = new Core.HashMap()),
                        (this.otherPlayInfoMap = new Core.HashMap()),
                        (this.playerPayoutInfoMap = new Core.HashMap());
                }),
                (t.prototype.isDoublePlaytype = function(t) {
                    return [
                        m.PLAYTYPE_NN_PLAYER_1_DOUBLE,
                        m.PLAYTYPE_NN_PLAYER_2_DOUBLE,
                        m.PLAYTYPE_NN_PLAYER_3_DOUBLE,
                        m.PLAYTYPE_NN_BANKER_1_DOUBLE,
                        m.PLAYTYPE_NN_BANKER_2_DOUBLE,
                        m.PLAYTYPE_NN_BANKER_3_DOUBLE
                    ].indexOf(t) > -1
                        ? !0
                        : !1;
                }),
                (t.prototype.getAmountByPlaytype = function(t, e) {
                    void 0 === e && (e = 0);
                    var i;
                    0 === e
                        ? (i = this.stakePool)
                        : 1 === e && (i = this.donePool);
                    var r = i.getAmount(t),
                        s = 0;
                    return (
                        this.isDoublePlaytype(t) && (s = 4 * r),
                        { amount: r, pendingAmount: s }
                    );
                }),
                (t.prototype.getAmountByPlayerSlot = function(t, e) {
                    var i = { amount: 0, pendingAmount: 0 };
                    switch (e) {
                        case 0:
                            i = this.getAmountByPlaytype(t);
                            break;
                        case 1:
                            this.otherPlayInfoMap.has(t) &&
                                ((i.amount = this.fromRMB(
                                    this.otherPlayInfoMap.get(t).betCredit
                                )),
                                this.isDoublePlaytype(t) &&
                                    (i.pendingAmount = 4 * i.amount));
                            break;
                        case 2:
                            this.anchorPlayInfoMap.has(t) &&
                                ((i.amount = this.fromRMB(
                                    this.anchorPlayInfoMap.get(t).betCredit
                                )),
                                this.isDoublePlaytype(t) &&
                                    (i.pendingAmount = 4 * i.amount));
                    }
                    return i;
                }),
                (t.prototype.getBetLimitByPlayType = function(t) {
                    return m.UserStore.instance.getBetLimitByPlayType(t);
                }),
                (t.prototype.reset = function() {
                    i.prototype.reset.call(this);
                }),
                (t.prototype.sendBetToServer = function(t) {
                    if (
                        (i.prototype.sendBetToServer.call(this, t),
                        this.gameSocket.connected)
                    ) {
                        var e = t.playType;
                        m.LiveGameSocket.instance.writeBytes(
                            m.getCMDFollowerBetExt(
                                l.LiveStore.instance.vids[0],
                                this.gmcode,
                                e,
                                t.amount,
                                'CNY',
                                t.seq
                            )
                        );
                    }
                }),
                (t.prototype.onSocketData = function(t, e) {
                    var r = this;
                    if (!t.vid || this.vid === t.vid) {
                        switch (t.respId) {
                            case m.Qr:
                                this.initHashMap(), this.dispatchAction(m.Z);
                                break;
                            case m.ts:
                                this.m(t);
                                break;
                            case m.es:
                                var i = t,
                                    s = this.playerPlayInfoMap.get(i.play_type);
                                s ||
                                    ((s = {
                                        betCredit: 0,
                                        playType: i.play_type
                                    }),
                                    this.playerPlayInfoMap.set(s.playType, s)),
                                    (s.betCredit += this.toRMB(i.jetton));
                                break;
                            case m.rr:
                                this._(t);
                                break;
                            case m.ee:
                                (this.playerPayoutInfoMap = new Core.HashMap()),
                                    this.playerPayoutInfoMap.copy(t.payoutsMap),
                                    Core.NonstopTimer.instance.setTimeout(
                                        function() {
                                            r.dispatchAction(m.ao, t),
                                                r.dispatchAction(m.g, t),
                                                r.payoutOverTimeoutDo(
                                                    m.GAME_LIVE
                                                );
                                        },
                                        this,
                                        m.StreamConfig.instance.getAverageDelay()
                                    );
                                break;
                            case m.mt:
                                this.dispatchAction(m.Y);
                                break;
                            case m.ds:
                                if (this.isRecoverBet) {
                                    var n = t;
                                    n.betInfo.forEach(function(t) {
                                        if (t.jetton > 0) {
                                            r.donePool.setAmount(
                                                t.playType,
                                                t.jetton
                                            );
                                            var e = r.toRMB(t.jetton);
                                            r.playerPlayInfoMap.set(
                                                t.playType,
                                                {
                                                    betCredit: e,
                                                    playType: t.playType
                                                }
                                            ),
                                                r.updateLastPool(),
                                                r.stakePool.getAmount(
                                                    t.playType
                                                ) < t.jetton &&
                                                    r.stakePool.setAmount(
                                                        t.playType,
                                                        t.jetton
                                                    ),
                                                r.updateOtherPlayInfo(
                                                    t.playType
                                                );
                                        }
                                    }),
                                        this.diffPool.clear(),
                                        this.dispatchAction(m.T);
                                }
                        }
                        var o = t.anchorID;
                        if (
                            !o ||
                            '' == o ||
                            o === l.LiveStore.instance.anchorID
                        )
                            switch (t.respId) {
                                case m.Wt:
                                    this.initHashMap(),
                                        this.dispatchAction(m.T);
                                    break;
                                case m.as:
                                    var i = t,
                                        s = this.anchorPlayInfoMap.get(
                                            i.betInfo.playType
                                        );
                                    s ||
                                        ((s = {
                                            betCredit: 0,
                                            playType: i.betInfo.playType
                                        }),
                                        this.anchorPlayInfoMap.set(
                                            s.playType,
                                            s
                                        )),
                                        (s.betCredit += i.betInfo.jettonCNY);
                                    break;
                                case m.ss:
                                    if (this.isRecoverBet) {
                                        var a = t;
                                        a.playInfos.forEach(function(t) {
                                            r.overallPlayInfoMap.set(
                                                t.playType,
                                                t
                                            ),
                                                r.updateOtherPlayInfo(
                                                    t.playType
                                                );
                                        }),
                                            this.dispatchAction(m.T, t);
                                    }
                                    break;
                                case m.fs:
                                    var h = t,
                                        u = new Core.HashMap();
                                    h.payoutInfoList.forEach(function(t) {
                                        var e = t.valueCNY;
                                        if (
                                            (r.playerPayoutInfoMap &&
                                                r.playerPayoutInfoMap.has(
                                                    t.playtype
                                                ) &&
                                                (e -= r.playerPayoutInfoMap.get(
                                                    t.playtype
                                                ).valueCNY),
                                            0 != e)
                                        ) {
                                            var i = new m.PlaytypePayout();
                                            (i.playtype = t.playtype),
                                                (i.value = r.fromRMB(e)),
                                                u.set(i.playtype, i);
                                        }
                                    }),
                                        Core.NonstopTimer.instance.setTimeout(
                                            function() {
                                                r.dispatchAction(m.ao, {
                                                    ptPayouts: u,
                                                    playerSlot: 1
                                                });
                                            },
                                            this,
                                            m.StreamConfig.instance.getAverageDelay()
                                        );
                                    break;
                                case m.ls:
                                    var c = t,
                                        f = new Core.HashMap();
                                    c.ptPayouts.forEach(function(t) {
                                        var e = new m.PlaytypePayout();
                                        (e.playtype = t.playtype),
                                            (e.value = r.fromRMB(t.valueCNY)),
                                            f.set(e.playtype, e);
                                    }),
                                        Core.NonstopTimer.instance.setTimeout(
                                            function() {
                                                r.dispatchAction(m.ao, {
                                                    ptPayouts: f,
                                                    playerSlot: 2
                                                });
                                            },
                                            this,
                                            m.StreamConfig.instance.getAverageDelay()
                                        );
                                    break;
                                case m.Gs:
                                    if (this.isRecoverBet) {
                                        var C = t;
                                        C.betInfo.forEach(function(t) {
                                            if (t.jettonCNY > 0) {
                                                var e = {
                                                    betCredit: t.jettonCNY,
                                                    playType: t.playType
                                                };
                                                r.otherPlayInfoMap.set(
                                                    t.playType,
                                                    e
                                                );
                                            }
                                        }),
                                            this.dispatchAction(m.T);
                                    }
                                    break;
                                case m.Ps:
                                    if (this.isRecoverBet) {
                                        var n = t;
                                        n.betInfo.forEach(function(t) {
                                            if (t.jettonCNY > 0) {
                                                var e = {
                                                    betCredit: t.jettonCNY,
                                                    playType: t.playType
                                                };
                                                r.anchorPlayInfoMap.set(
                                                    t.playType,
                                                    e
                                                ),
                                                    r.updateOtherPlayInfo(
                                                        t.playType
                                                    );
                                            }
                                        }),
                                            this.dispatchAction(m.T);
                                    }
                            }
                    }
                }),
                (t.prototype.addChipByPlayType = function(t, e) {
                    for (var i = [], r = 2; r < arguments.length; r++)
                        i[r - 2] = arguments[r];
                    if (this.betEnabled) {
                        e || (e = m.VideoPlazaStore.instance.selectedChipValue);
                        var s = this.calculateAllIn(t, e);
                        if (s < m.getMinBalance())
                            return void this.dispatchAction(m.i);
                        if ('MYR' === m.VideoPlazaStore.instance.currencyCode) {
                            var n = Math.floor(s);
                            s = s > n + 0.5 ? n + 0.5 : n;
                        } else s = Math.floor(s);
                        var o =
                            this.stakePool.getAmount.apply(
                                this.stakePool,
                                [t].concat(i)
                            ) + s;
                        1 === this.checkLimit(t, o)
                            ? (this.dispatchAction(m.r),
                              (o = this.getBetLimitByPlayType(t).max))
                            : e > s && this.dispatchAction(m.s);
                        var a = this.stakePool.setAmount.apply(
                            this.stakePool,
                            [t, o].concat(i)
                        );
                        return (
                            this.dispatchAction(m.n, {
                                amount: o,
                                pendingAmount: 4 * o,
                                playtype: t
                            }),
                            a
                        );
                    }
                }),
                (t.prototype.calculateAllIn = function(t, e) {
                    var i = m.UserStore.instance.balance,
                        r = e;
                    this.isDoublePlaytype(t) && (r = 5 * e),
                        (this.diffPool = this.stakePool.calculateDiff(
                            this.donePool
                        ));
                    var s = this.diffPool.totalAmount;
                    if (s + r > i) {
                        var n = i - s;
                        return this.isDoublePlaytype(t) && (n /= 5), n;
                    }
                    return e;
                }),
                (t.prototype.confirmBet = function() {
                    var r = this;
                    this.confirmEnabled &&
                        ((this.diffPool = this.stakePool.calculateDiff(
                            this.donePool
                        )),
                        this.diffPool.getAllStakeData().forEach(function(t) {
                            var e = t.playType;
                            if (!(t.amount <= 0))
                                if (
                                    0 ===
                                    r.checkLimit(e, r.stakePool.getAmount(e))
                                )
                                    r.sendBetToServer(t);
                                else {
                                    var i = r.isDoublePlaytype(t.playType)
                                        ? 5 * m.getMinBalance()
                                        : m.getMinBalance();
                                    e === r.stakePool.getLastBetPlayType() &&
                                    m.UserStore.instance.balance -
                                        r.diffPool.totalAmount <
                                        i
                                        ? r.sendBetToServer(t)
                                        : (r.cancelBetByPlayType(e),
                                          r.dispatchAction(m.r));
                                }
                        }));
                }),
                (t.prototype.updateOtherPlayInfo = function(t) {
                    var e = this.overallPlayInfoMap.has(t)
                        ? this.overallPlayInfoMap.get(t).betCredit
                        : 0;
                    this.playerPlayInfoMap.has(t) &&
                        (e -= this.playerPlayInfoMap.get(t).betCredit),
                        this.anchorPlayInfoMap.has(t) &&
                            (e -= this.anchorPlayInfoMap.get(t).betCredit);
                    var i = this.otherPlayInfoMap.get(t);
                    e > 0
                        ? i
                            ? (i.betCredit = e)
                            : this.otherPlayInfoMap.set(t, {
                                  betCredit: e,
                                  playType: t
                              })
                        : i && this.otherPlayInfoMap['delete'](t);
                }),
                Object.defineProperty(t.prototype, 'isRecoverBet', {
                    get: function() {
                        return (
                            1 == this.roomTimerStore.gameStatus ||
                            2 == this.roomTimerStore.gameStatus
                        );
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.fromRMB = function(t) {
                    return (
                        Math.round(
                            t * m.VideoPlazaStore.instance.currencyRate * 100
                        ) / 100
                    );
                }),
                (t.prototype.toRMB = function(t) {
                    return (
                        Math.round(
                            (t / m.VideoPlazaStore.instance.currencyRate) * 100
                        ) / 100
                    );
                }),
                t
            );
        })(m.BetStoreBase);
        (l.NnBetStore = t),
            __reflect(t.prototype, 'VideoGameCore.Live.NnBetStore');
    })((t = m.Live || (m.Live = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(o) {
    var t;
    !(function(e) {
        var t = (function(n) {
            function t() {
                return n.call(this) || this;
            }
            return (
                __extends(t, n),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.getSocketList = function() {
                    return [o.LiveGameSocket.instance];
                }),
                Object.defineProperty(t.prototype, 'roomTimerStore', {
                    get: function() {
                        var t = e.StoreFactory.instance.roomTimerStoreMap.get(
                            e.LiveStore.instance.vids[0]
                        );
                        return t;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.onSocketData = function(t, e) {
                    var i = this;
                    if (
                        (n.prototype.onSocketData.call(this, t, e),
                        !this.isInvalidVid(t))
                    )
                        switch (t.respId) {
                            case o.Ht:
                                var r = t;
                                this._(r);
                                break;
                            case o.ys:
                                this.m(t);
                                break;
                            case o.ie:
                                Core.NonstopTimer.instance.setTimeout(
                                    function() {
                                        i.dispatchAction(o.ao, t),
                                            i.dispatchAction(o.g, t),
                                            i.payoutOverTimeoutDo(o.GAME_LIVE);
                                    },
                                    this,
                                    o.StreamConfig.instance.getAverageDelay()
                                );
                                break;
                            case o.ps:
                                var s = t;
                                s.betInfo.forEach(function(t) {
                                    i.donePool.setAmount(
                                        t.playType,
                                        t.jetton,
                                        t.nums
                                    ),
                                        i.lastPool.setAmount(
                                            t.playType,
                                            t.jetton,
                                            t.nums
                                        ),
                                        t.jetton >
                                            i.stakePool.getAmount(
                                                t.playType,
                                                t.nums
                                            ) &&
                                            i.stakePool.setAmount(
                                                t.playType,
                                                t.jetton,
                                                t.nums
                                            );
                                }),
                                    this.diffPool.clear(),
                                    this.dispatchAction(o.T);
                        }
                }),
                (t.prototype.sendBetBundleToServer = function(t) {
                    o.LiveGameSocket.instance.writeBytes(
                        o.getCMDFollowerBetExtRou(
                            e.LiveStore.instance.vids[0],
                            this.gmcode,
                            t,
                            'CNY',
                            Core.getSequence()
                        )
                    );
                }),
                (t.prototype.getBetLimitByPlayType = function(t) {
                    return o.UserStore.instance.getBetLimitByPlayType(t);
                }),
                t
            );
        })(o.Rou.BetTableStoreBase);
        (e.RouBetStore = t),
            __reflect(t.prototype, 'VideoGameCore.Live.RouBetStore');
    })((t = o.Live || (o.Live = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(d) {
    var t;
    !(function(m) {
        var t = (function(l) {
            function t() {
                var t = l.call(this) || this;
                return (
                    (t.overallPlayInfoMap = new Core.HashMap()),
                    (t.playerPlayInfoMap = new Core.HashMap()),
                    (t.otherPlayInfoMap = new Core.HashMap()),
                    (t.anchorPlayInfoMap = new Core.HashMap()),
                    t
                );
            }
            return (
                __extends(t, l),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.getSocketList = function() {
                    return [d.LiveGameSocket.instance];
                }),
                Object.defineProperty(t.prototype, 'roomTimerStore', {
                    get: function() {
                        var t = m.StoreFactory.instance.roomTimerStoreMap.get(
                            m.LiveStore.instance.vids[0]
                        );
                        return t;
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.getAmountByPlayerSlot = function(t, e) {
                    var i = 0;
                    switch (e) {
                        case 0:
                            i = this.getAmountByType(t);
                            break;
                        case 1:
                            this.otherPlayInfoMap.has(t) &&
                                (i = this.fromRMB(
                                    this.otherPlayInfoMap.get(t).betCredit
                                ));
                            break;
                        case 2:
                            this.anchorPlayInfoMap.has(t) &&
                                (i = this.fromRMB(
                                    this.anchorPlayInfoMap.get(t).betCredit
                                ));
                    }
                    return i;
                }),
                (t.prototype.getBetLimitByPlayType = function(t) {
                    return d.UserStore.instance.getBetLimitByPlayType(t);
                }),
                (t.prototype.reset = function() {
                    l.prototype.reset.call(this),
                        this.diffPool.clear(),
                        this.clearPlayInfo(),
                        (this.playerPayout = null);
                }),
                (t.prototype.clearPlayInfo = function() {
                    this.overallPlayInfoMap.keys.length &&
                        (this.overallPlayInfoMap = new Core.HashMap()),
                        this.playerPlayInfoMap.keys.length &&
                            (this.playerPlayInfoMap = new Core.HashMap()),
                        this.otherPlayInfoMap.keys.length &&
                            (this.otherPlayInfoMap = new Core.HashMap()),
                        this.anchorPlayInfoMap.keys.length &&
                            (this.anchorPlayInfoMap = new Core.HashMap());
                }),
                (t.prototype.sendBetToServer = function(t) {
                    l.prototype.sendBetToServer.call(this, t),
                        this.gameSocket.connected &&
                            d.LiveGameSocket.instance.writeBytes(
                                d.getCMDFollowerBetExt(
                                    m.LiveStore.instance.vids[0],
                                    this.gmcode,
                                    t.playType,
                                    t.amount,
                                    'CNY',
                                    t.seq
                                )
                            );
                }),
                (t.prototype.onSocketData = function(t, e) {
                    var r = this;
                    if (
                        (l.prototype.onSocketData.call(this, t, e),
                        !this.isInvalidVid(t))
                    ) {
                        switch (t.respId) {
                            case d.ts:
                                this.m(t);
                                break;
                            case d.es:
                                var i = t,
                                    s = this.playerPlayInfoMap.get(i.play_type);
                                s ||
                                    ((s = {
                                        betCredit: 0,
                                        playType: i.play_type
                                    }),
                                    this.playerPlayInfoMap.set(s.playType, s)),
                                    (s.betCredit += this.toRMB(i.jetton));
                                break;
                            case d.ee:
                                (this.playerPayout = new Core.HashMap()),
                                    this.playerPayout.copy(t.payoutsMap),
                                    Core.NonstopTimer.instance.setTimeout(
                                        function() {
                                            r.dispatchAction(d.ao, t),
                                                r.dispatchAction(d.g, t),
                                                r.payoutOverTimeoutDo(
                                                    d.GAME_LIVE
                                                );
                                        },
                                        this,
                                        d.StreamConfig.instance.getAverageDelay()
                                    );
                                break;
                            case d.mt:
                                var n = t;
                                (1 == this.roomTimerStore.gameStatus ||
                                    2 == this.roomTimerStore.gameStatus) &&
                                    (this.reset(), this.dispatchAction(d.T));
                                break;
                            case d.ds:
                                if (this.isRecoverBet) {
                                    var o = t;
                                    o.betInfo.forEach(function(t) {
                                        if (t.jetton > 0) {
                                            r.donePool.setAmount(
                                                t.playType,
                                                t.jetton
                                            );
                                            var e = r.toRMB(t.jetton);
                                            r.playerPlayInfoMap.set(
                                                t.playType,
                                                {
                                                    betCredit: e,
                                                    playType: t.playType
                                                }
                                            ),
                                                r.updateLastPool(),
                                                r.stakePool.getAmount(
                                                    t.playType
                                                ) < t.jetton &&
                                                    r.stakePool.setAmount(
                                                        t.playType,
                                                        t.jetton
                                                    ),
                                                r.updateOtherPlayInfo(
                                                    t.playType
                                                );
                                        }
                                    }),
                                        this.diffPool.clear(),
                                        this.dispatchAction(d.T);
                                }
                        }
                        var a = t.anchorID;
                        if (
                            !a ||
                            '' == a ||
                            a === m.LiveStore.instance.anchorID
                        )
                            switch (t.respId) {
                                case d.Wt:
                                    var n = t;
                                    0 == n.retCode &&
                                        (this.clearPlayInfo(),
                                        this.dispatchAction(d.T));
                                    break;
                                case d.as:
                                    var i = t,
                                        s = this.anchorPlayInfoMap.get(
                                            i.betInfo.playType
                                        );
                                    s ||
                                        ((s = {
                                            betCredit: 0,
                                            playType: i.betInfo.playType
                                        }),
                                        this.anchorPlayInfoMap.set(
                                            s.playType,
                                            s
                                        )),
                                        (s.betCredit += i.betInfo.jetton);
                                    break;
                                case d.ss:
                                    if (this.isRecoverBet) {
                                        var h = t;
                                        h.playInfos.forEach(function(t) {
                                            r.overallPlayInfoMap.set(
                                                t.playType,
                                                t
                                            ),
                                                r.updateOtherPlayInfo(
                                                    t.playType
                                                );
                                        }),
                                            this.dispatchAction(d.T, t);
                                    }
                                    break;
                                case d.fs:
                                    var u = t,
                                        c = [];
                                    u.payoutInfoList.forEach(function(t) {
                                        var e = t.valueCNY;
                                        if (
                                            (r.playerPayout &&
                                                r.playerPayout.has(
                                                    t.playtype
                                                ) &&
                                                (e -= r.playerPayout.get(
                                                    t.playtype
                                                ).valueCNY),
                                            0 != e)
                                        ) {
                                            var i = new d.PlaytypePayout();
                                            (i.playtype = t.playtype),
                                                (i.value = r.fromRMB(e)),
                                                c.push(i);
                                        }
                                    }),
                                        Core.NonstopTimer.instance.setTimeout(
                                            function() {
                                                r.dispatchAction(d.ao, {
                                                    ptPayouts: c,
                                                    playerSlot: 1
                                                });
                                            },
                                            this,
                                            d.StreamConfig.instance.getAverageDelay()
                                        );
                                    break;
                                case d.ls:
                                    var n = t,
                                        f = [];
                                    n.ptPayouts.forEach(function(t) {
                                        var e = new d.PlaytypePayout();
                                        (e.playtype = t.playtype),
                                            (e.value = r.fromRMB(t.valueCNY)),
                                            f.push(e);
                                    }),
                                        Core.NonstopTimer.instance.setTimeout(
                                            function() {
                                                r.dispatchAction(d.ao, {
                                                    ptPayouts: f,
                                                    playerSlot: 2
                                                });
                                            },
                                            this,
                                            d.StreamConfig.instance.getAverageDelay()
                                        );
                                    break;
                                case d.Gs:
                                    if (this.isRecoverBet) {
                                        var C = t;
                                        C.betInfo.forEach(function(t) {
                                            if (t.jettonCNY > 0) {
                                                var e = {
                                                    betCredit: t.jettonCNY,
                                                    playType: t.playType
                                                };
                                                r.otherPlayInfoMap.set(
                                                    t.playType,
                                                    e
                                                );
                                            }
                                        }),
                                            this.dispatchAction(d.T);
                                    }
                                    break;
                                case d.Ps:
                                    if (this.isRecoverBet) {
                                        var o = t;
                                        o.betInfo.forEach(function(t) {
                                            if (t.jettonCNY > 0) {
                                                var e = {
                                                    betCredit: t.jettonCNY,
                                                    playType: t.playType
                                                };
                                                r.anchorPlayInfoMap.set(
                                                    t.playType,
                                                    e
                                                ),
                                                    r.updateOtherPlayInfo(
                                                        t.playType
                                                    );
                                            }
                                        }),
                                            this.dispatchAction(d.T);
                                    }
                            }
                    }
                }),
                (t.prototype.updateOtherPlayInfo = function(t) {
                    var e = this.overallPlayInfoMap.has(t)
                        ? this.overallPlayInfoMap.get(t).betCredit
                        : 0;
                    this.playerPlayInfoMap.has(t) &&
                        (e -= this.playerPlayInfoMap.get(t).betCredit),
                        this.anchorPlayInfoMap.has(t) &&
                            (e -= this.anchorPlayInfoMap.get(t).betCredit);
                    var i = this.otherPlayInfoMap.get(t);
                    e > 0
                        ? i
                            ? (i.betCredit = e)
                            : this.otherPlayInfoMap.set(t, {
                                  betCredit: e,
                                  playType: t
                              })
                        : i && this.otherPlayInfoMap['delete'](t);
                }),
                Object.defineProperty(t.prototype, 'isRecoverBet', {
                    get: function() {
                        return (
                            1 == this.roomTimerStore.gameStatus ||
                            2 == this.roomTimerStore.gameStatus
                        );
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.prototype.fromRMB = function(t) {
                    return (
                        Math.round(
                            t * d.VideoPlazaStore.instance.currencyRate * 100
                        ) / 100
                    );
                }),
                (t.prototype.toRMB = function(t) {
                    return (
                        Math.round(
                            (t / d.VideoPlazaStore.instance.currencyRate) * 100
                        ) / 100
                    );
                }),
                t
            );
        })(d.Shb.BetTableStoreBase);
        (m.ShbBetStore = t),
            __reflect(t.prototype, 'VideoGameCore.Live.ShbBetStore');
    })((t = d.Live || (d.Live = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(o) {
    var t;
    !(function(t) {
        var e = (function(n) {
            function t() {
                var t = n.call(this) || this;
                return (t.socketList = [o.LiveGameSocket.instance]), t;
            }
            return (
                __extends(t, n),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.onSocketData = function(t, e) {
                    var i = this;
                    if (
                        (n.prototype.onSocketData.call(this, t, e),
                        !t.vid || this.vid === t.vid)
                    )
                        switch (t.respId) {
                            case o.Ye:
                                var r = t;
                                Core.NonstopTimer.instance.setTimeout(
                                    function() {
                                        r.index > i.pokerDataQue.length &&
                                            (i.pokerDataQue.push(
                                                new o.PokerData(
                                                    r.card,
                                                    r.who,
                                                    r.index
                                                )
                                            ),
                                            i.parsePokerDataQue(),
                                            i.dispatchAction(o.vt));
                                    },
                                    this,
                                    o.StreamConfig.instance.getAverageDelay()
                                );
                                break;
                            case o.Nt:
                                var s = t;
                                (this.resultTimer = Core.NonstopTimer.instance.setTimeout(
                                    function() {
                                        (this.pScore = s.pval),
                                            (this.bScore = s.bval),
                                            (this.pWin = !1),
                                            (this.bWin = !1),
                                            (this.tie = !1),
                                            this.pScore > this.bScore
                                                ? (this.pWin = !0)
                                                : this.pScore < this.bScore
                                                    ? (this.bWin = !0)
                                                    : this.pScore ===
                                                          this.bScore &&
                                                      (this.tie = !0),
                                            this.dispatchAction(o.vt);
                                    },
                                    this,
                                    o.StreamConfig.instance.getAverageDelay() -
                                        10
                                )),
                                    (this.resetTimer = Core.NonstopTimer.instance.setTimeout(
                                        function() {
                                            this.resetAll(),
                                                this.dispatchAction(o.vt);
                                        },
                                        this,
                                        2e4
                                    ));
                                break;
                            case o.Qr:
                                this.resetByAction();
                        }
                }),
                (t.prototype.release = function() {
                    n.prototype.release.call(this);
                }),
                t
            );
        })(o.PokerBaseStore);
        (t.BacPokerStore = e),
            __reflect(e.prototype, 'VideoGameCore.Live.BacPokerStore');
    })((t = o.Live || (o.Live = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(o) {
    var t;
    !(function(t) {
        var e = (function(n) {
            function t() {
                var t = n.call(this) || this;
                return (t.socketList = [o.LiveGameSocket.instance]), t;
            }
            return (
                __extends(t, n),
                Object.defineProperty(t, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (t.init = function() {
                    return this.initInstance(this);
                }),
                (t.prototype.onSocketConnected = function(t) {}),
                (t.prototype.onSocketData = function(t, e) {
                    var i = this;
                    if (
                        (n.prototype.onSocketData.call(this, t, e),
                        !t.vid || this.vid === t.vid)
                    )
                        switch (t.respId) {
                            case o.Qr:
                                (this.pokerDataQue = []),
                                    this.resetAll(),
                                    this.dispatchAction(o.Z);
                                break;
                            case o.Ye:
                                var r = t;
                                dclib(this.pokerDataQue);
                                Core.NonstopTimer.instance.setTimeout(
                                    function() {
                                        r.index > i.pokerDataQue.length &&
                                            (i.pokerDataQue.push(
                                                new o.PokerData(
                                                    r.card,
                                                    r.who,
                                                    r.index
                                                )
                                            ),
                                            i.parsePokerDataQue(),
                                            i.dispatchAction(o.vt));
                                    },
                                    this,
                                    o.StreamConfig.instance.getAverageDelay()
                                );
                                break;
                            case o.Mt:
                                var s = t;
                                this.resultTimer = Core.NonstopTimer.instance.setTimeout(
                                    function() {
                                        this.onResultTimeout(s);
                                    },
                                    this,
                                    5e3
                                );
                        }
                }),
                (t.prototype.release = function() {
                    n.prototype.release.call(this);
                }),
                (t.prototype.parsePokerDataQue = function() {
                    n.prototype.parsePokerDataQue.call(this),
                        (this.bDataQue = []),
                        (this.pDataQue = []),
                        (this.pScore = 0),
                        (this.bScore = 0),
                        (this.bWin = !1),
                        (this.pWin = !1),
                        (this.tie = !1);
                    for (var t = 0; t < this.pokerDataQue.length; t++) {
                        var e = this.pokerDataQue[t],
                            i = e.cardValue;
                        0 == e.who && this.bDataQue.length <= o.MAX_DT_POKER_NUM
                            ? (this.bDataQue.push(e), (this.bScore += i))
                            : 1 == e.who &&
                              this.pDataQue.length <= o.MAX_DT_POKER_NUM &&
                              (this.pDataQue.push(e), (this.pScore += i));
                    }
                }),
                (t.prototype.uniqueEnqueue = function(t, e, i) {
                    for (var r = !1, i = 0; i < this.pokerDataQue.length; i++) {
                        var s = this.pokerDataQue[i];
                        if (t == s.card && e == s.who) {
                            r = !0;
                            break;
                        }
                    }
                    r || this.pokerDataQue.push(new o.PokerData(t, e, i));
                }),
                (t.prototype.onResultTimeout = function(t) {
                    switch (
                        ((this.bScore = t.dval),
                        (this.pScore = t.tval),
                        (this.pWin = !1),
                        (this.bWin = !1),
                        (this.tie = !1),
                        t.winPlayTypes[0])
                    ) {
                        case o.PLAYTYPE_DRAGON:
                            this.bWin = !0;
                            break;
                        case o.PLAYTYPE_TIGER:
                            this.pWin = !0;
                            break;
                        case o.PLAYTYPE_DT_TIE:
                            this.tie = !0;
                    }
                    this.dispatchAction(o.vt);
                }),
                t
            );
        })(o.PokerBaseStore);
        (t.DtPokerStore = e),
            __reflect(e.prototype, 'VideoGameCore.Live.DtPokerStore');
    })((t = o.Live || (o.Live = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(l) {
    var t;
    !(function(t) {
        var e = (function(e) {
            function i() {
                var t = e.call(this) || this;
                return (
                    (t.socketList = [l.LiveGameSocket.instance]),
                    (t.cardList = []),
                    (t.result = []),
                    (t.currentIndex = -1),
                    (t.beadData = null),
                    t
                );
            }
            return (
                __extends(i, e),
                Object.defineProperty(i, 'instance', {
                    get: function() {
                        return this.getInstance(this);
                    },
                    enumerable: !0,
                    configurable: !0
                }),
                (i.init = function() {
                    return this.initInstance(this);
                }),
                (i.prototype.resetCardList = function() {
                    (this.cardList = []), (this.currentIndex = -1);
                    for (var t = 0; 21 > t; t++) this.cardList.push(0);
                    this.result = [];
                    for (
                        var e = this.cardList.slice(1, 21),
                            i = 5,
                            t = 0,
                            r = e.length;
                        r > t;
                        t += i
                    ) {
                        var s = e.slice(t, t + i);
                        this.result.push({
                            cards: s,
                            cardType: '',
                            result: null
                        });
                    }
                }),
                (i.prototype.resetCards = function() {
                    (this.cardList = []),
                        (this.cardInfos = { cards: [], currentIndex: -1 });
                    for (var t = 0; t < i.MAX_POKER_NUM; t++)
                        if ((this.cardList.push(-1), t > 0)) {
                            var e = t - 1;
                            this.cardInfos.cards[Math.floor(e / 5)] ||
                                (this.cardInfos.cards[Math.floor(e / 5)] = []),
                                this.cardInfos.cards[Math.floor(e / 5)].push(
                                    -1
                                );
                        }
                }),
                (i.prototype.onSocketData = function(t, e) {
                    var i = this;
                    if (!t.vid || this.vid === t.vid) {
                        var r, s;
                        switch (t.respId) {
                            case l.Qr:
                                (this.beadData = null),
                                    this.resetCardList(),
                                    this.dispatchEventWith(l.Z);
                                break;
                            case l.Ct:
                                this.resetCardList();
                                break;
                            case l.Ye:
                                var n = t;
                                if (void 0 !== this.cardList[n.index]) {
                                    0 == n.index && (this.firstCard = n.card),
                                        (this.cardList[n.index] = n.card);
                                    var o = Math.ceil(n.index / 5) - 1,
                                        a = (n.index - 1) % 5;
                                    void 0 !== this.result[o] &&
                                        void 0 !== this.result[o].cards[a] &&
                                        ((this.result[o].cards[a] = n.card),
                                        (this.currentIndex = o));
                                }
                                this.formatResult(), this.dispatchAction(l.vt);
                                break;
                            case l.mt:
                                var h = t;
                                if (0 !== h.status && h.cardlist) {
                                    this.cardList = h.cardlist;
                                    var u = this.cardList.slice(1, 21);
                                    this.result = [];
                                    var c = 5;
                                    for (r = 0, s = u.length; s > r; r += c) {
                                        var f = u.slice(r, r + c);
                                        this.result.push({
                                            cards: f,
                                            cardType: '',
                                            result: null
                                        });
                                    }
                                    this.formatResult(),
                                        this.dispatchAction(l.vt);
                                }
                                break;
                            case l.rr:
                                var C = t;
                                for (r = 0; r < this.result.length; r++)
                                    this.result[r].result = C.beadData;
                                (this.currentIndex = -1),
                                    (this.beadData = C.beadData),
                                    Core.NonstopTimer.instance.setTimeout(
                                        function() {
                                            i.dispatchAction(l.P, {
                                                beadData: C.beadData
                                            });
                                        },
                                        this,
                                        l.StreamConfig.instance.getAverageDelay()
                                    );
                        }
                    }
                }),
                (i.prototype.getLiveStore = function() {
                    return t.LiveStore.instance;
                }),
                (i.prototype.formatResult = function() {
                    for (var t = 0; t < this.result.length; t++) {
                        for (
                            var e = this.result[t],
                                i = this.getLiveStore().combinations(
                                    e.cards,
                                    3
                                ),
                                r = !0,
                                s = 0;
                            s < i.length;
                            s++
                        ) {
                            for (
                                var n = i[s], o = 0, a = 0;
                                a < n.length;
                                a++
                            ) {
                                var h = 15 & n[a];
                                h >= 10 && (h = 10), (o += h);
                            }
                            o % 10 == 0 && (r = !1);
                        }
                        if (e.cards[4])
                            if (r) e.totalPoint = 0;
                            else {
                                for (
                                    var u = 0, a = 0;
                                    a < e.cards.length;
                                    a++
                                ) {
                                    var c = 15 & e.cards[a];
                                    u += c >= 10 ? 10 : c;
                                }
                                var f = u % 10;
                                f > 0 &&
                                !(
                                    (15 & e.cards[0]) >= 11 &&
                                    (15 & e.cards[1]) >= 11 &&
                                    (15 & e.cards[2]) >= 11 &&
                                    (15 & e.cards[3]) >= 11 &&
                                    (15 & e.cards[4]) >= 11
                                )
                                    ? (e.totalPoint = u % 10)
                                    : (15 & e.cards[0]) >= 11 &&
                                      (15 & e.cards[1]) >= 11 &&
                                      (15 & e.cards[2]) >= 11 &&
                                      (15 & e.cards[3]) >= 11 &&
                                      (15 & e.cards[4]) >= 11
                                        ? (e.totalPoint = 50)
                                        : (e.totalPoint = 20);
                            }
                        this.result[t] = e;
                    }
                }),
                (i.prototype.release = function() {
                    e.prototype.release.call(this);
                }),
                (i.MAX_POKER_NUM = 21),
                i
            );
        })(l.PokerBaseStore);
        (t.NnPokerStore = e),
            __reflect(e.prototype, 'VideoGameCore.Live.NnPokerStore');
    })((t = l.Live || (l.Live = {})));
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(c) {
    var t = (function(i) {
        function t() {
            var t = i.call(this) || this;
            (t.platforms = []),
                (t.vids = []),
                (t.cachedVids = []),
                (t.playingIndex = 0),
                (t.plazaReconnected = !1),
                (t.lastBalSeq = -1),
                (t.platforms = ['DSP', 'AGQ']),
                (t.roomInfosMap = new Core.HashMap()),
                c.RoomConfig.instance
                    .getAllRoomInfo()
                    .forEach(t.filterRoomInfo, t),
                (t.goodRoadItemMap = new Core.ArrayMap());
            var e = Core.StorageManager.instance.getItem(
                c.GOOD_ROAD_SETTING_KEY
            );
            return (
                e
                    ? (t.goodRoadSettings = JSON.parse(e))
                    : (t.goodRoadSettings = c.GOOD_ROAD_TYPE_ARRAY),
                (t.socketList = [c.GoodRoadSocket.instance]),
                t
            );
        }
        return (
            __extends(t, i),
            (t.prototype.connectToGoodRoad = function() {
                c.GoodRoadSocket.instance.autoConnect();
            }),
            (t.prototype.disconnectGoodRoad = function() {
                c.GoodRoadSocket.instance.killSocket();
            }),
            (t.prototype.filterRoomInfo = function(t) {
                if (
                    this.platforms.indexOf(t.platformtype) >= 0 &&
                    this.isSupportedGameType(t.gmtype)
                ) {
                    var e = t.vid;
                    this.roomInfosMap.set(e, t), this.vids.push(t.vid);
                }
            }),
            (t.prototype.checkVidsValid = function(t) {
                if (4 == t.length) {
                    for (var e = 0; e < t.length; e++)
                        if (this.vids.indexOf(t[e]) < 0) return !1;
                    return !0;
                }
                return !1;
            }),
            (t.prototype.isSupportedGameType = function(t) {
                return [c.GAME_BAC].indexOf(t) >= 0;
            }),
            (t.prototype.onSocketConnected = function(t) {
                if (t == c.GoodRoadSocket.instance) {
                    var e = Core.LoginStore.instance;
                    t.writeBytes(c.getCMDClientLoginGame(e.loginName, e.token));
                }
            }),
            (t.prototype.onSocketData = function(t, e) {
                switch (t.respId) {
                    case c.Se:
                        var i = t;
                        0 == i.retCode &&
                            (e.writeBytes(c.getCMDEnterRoad()),
                            e.writeBytes(c.getCMDRoadPlayerAttr()));
                        break;
                    case c.eo:
                        var r = t;
                        0 == r.retCode && this.dispatchAction(c.yc);
                        break;
                    case c.ct:
                        var s = t,
                            n = this.checkGoodRoadByVid(s.vid);
                        n
                            ? this.goodRoadItemMap.set(s.vid, {
                                  vid: s.vid,
                                  roadType: n.type,
                                  option: n.option
                              })
                            : this.goodRoadItemMap.has(s.vid) &&
                              this.goodRoadItemMap['delete'](s.vid),
                            this.dispatchAction(c.Z);
                        break;
                    case c.lt:
                        var o = t;
                        11 === o.status &&
                            (this.goodRoadItemMap.has(o.vid) &&
                                this.goodRoadItemMap['delete'](o.vid),
                            this.dispatchAction(c.Ju));
                }
            }),
            (t.prototype.onSocketDie = function(t) {}),
            (t.prototype.checkGoodRoadByVid = function(t) {
                for (
                    var e = c.PlazaRoadStore.instance.getRoadData(t),
                        i = e.getLastDaLuStr(),
                        r = 0;
                    r < c.GOOD_ROAD_TYPE_CFG.length;
                    r++
                ) {
                    for (
                        var s = c.GOOD_ROAD_TYPE_CFG[r].match.split('-'),
                            n = i.split('-'),
                            o = !0,
                            a = 0;
                        a < s.length;
                        a++
                    ) {
                        var h = s[s.length - 1 - a],
                            u = n[n.length - 1 - a];
                        if (h)
                            if ('?' === h[h.length - 1]) {
                                if (
                                    h.substr(0, h.length - 1) !==
                                    u.substr(0, h.length - 1)
                                ) {
                                    o = !1;
                                    break;
                                }
                            } else if (h !== u) {
                                o = !1;
                                break;
                            }
                    }
                    if (o) return c.GOOD_ROAD_TYPE_CFG[r];
                }
                return null;
            }),
            (t.prototype.getRoadDataByType = function(e) {
                var t = [],
                    i = c.GOOD_ROAD_TYPE_CFG.filter(function(t) {
                        return t.type === e;
                    })[0].pattern;
                if (i)
                    for (var r = 0; r < i.length; r++)
                        parseInt(i[r]) === c.RoadPaper.WinType.RED_WIN
                            ? t.push(
                                  new c.RoadPaper.BeadData(
                                      c.RoadPaper.WinType.RED_WIN
                                  )
                              )
                            : parseInt(i[r]) === c.RoadPaper.WinType.BLUE_WIN &&
                              t.push(
                                  new c.RoadPaper.BeadData(
                                      c.RoadPaper.WinType.BLUE_WIN
                                  )
                              );
                return new c.RoadPaper.RoadData(t);
            }),
            (t.prototype.saveGoodRoadSettings = function(t) {
                (this.goodRoadSettings = t.map(function(t) {
                    return c.GOOD_ROAD_TYPE_ARRAY[t];
                })),
                    Core.StorageManager.instance.setItem(
                        c.GOOD_ROAD_SETTING_KEY,
                        JSON.stringify(this.goodRoadSettings)
                    ),
                    this.dispatchAction(c.Ju);
            }),
            Object.defineProperty(t, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.init = function() {
                return this.initInstance(this);
            }),
            t
        );
    })(Core.NetworkStoreBase);
    (c.GoodRoadStore = t),
        __reflect(t.prototype, 'VideoGameCore.GoodRoadStore');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(u) {
    var t = (function(h) {
        function t(t) {
            void 0 === t && (t = null);
            var e = h.call(this, t) || this;
            return (e.socketList = [u.GoodRoadSocket.instance]), e;
        }
        return (
            __extends(t, h),
            Object.defineProperty(t.prototype, 'roomTimerStore', {
                get: function() {
                    return u.RoadStoreFactory.instance.roomTimerStoreMap.get(
                        this.vid
                    );
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.onSocketData = function(t, e) {
                if (
                    (h.prototype.onSocketData.call(this, t, e),
                    !t.vid || this.vid === t.vid)
                ) {
                    switch (t.respId) {
                        case u.jt:
                        case u.Bt:
                        case u.At:
                            var i = t;
                            this.m(i);
                            break;
                        case u.Nt:
                            var r = t;
                            this._(r);
                            break;
                        case u.Ut:
                        case u.Ft:
                            var s = t;
                            this.V(s);
                            break;
                        case u.ct:
                            var n = t;
                            this.reset();
                            var o = Core.StorageManager.instance.getItem(
                                this.vid
                            );
                            if (o) {
                                var a = JSON.parse(o);
                                a.code ==
                                    Core.LoginStore.instance.loginName +
                                        n.gmcode &&
                                    (this.stakePool.setupByData(a.data),
                                    this.donePool.setupByData(a.data));
                            }
                            this.dispatchAction(u.Kt);
                    }
                }
            }),
            (t.prototype.betRespondDo = function() {
                this.storeBet(), h.prototype.betRespondDo.call(this);
            }),
            (t.prototype.payoutTimeoutDo = function(t) {
                h.prototype.payoutTimeoutDo.call(this, t);
            }),
            (t.prototype.sendBetToServer = function(t) {
                if (
                    (h.prototype.sendBetToServer.call(this, t),
                    this.gameSocket.connected)
                ) {
                    var e = t.playType;
                    e === u.PLAYTYPE_BANKER &&
                        this.noComm &&
                        (e = u.PLAYTYPE_BANKER_NO_COMMISSION),
                        u.GoodRoadSocket.instance.writeBytes(
                            u.getCMDGoodRoadBet(
                                this.vid,
                                this.gmcode,
                                e,
                                t.amount,
                                t.seq
                            )
                        );
                }
            }),
            (t.prototype.getAmountByType = function(t, e) {
                void 0 === e && (e = 0);
                var i = 0;
                return (
                    0 === e
                        ? (i = this.stakePool.getAmount(t))
                        : 1 === e
                            ? (i = this.donePool.getAmount(t))
                            : 2 === e && (i = this.lastPool.getAmount(t)),
                    i
                );
            }),
            (t.prototype.getBetLimitByPlayType = function(t) {
                return u.UserStore.instance.getBetLimitByPlayType(t);
            }),
            (t.prototype.storeBet = function() {
                this.stakePool.totalAmount > 0 &&
                    Core.StorageManager.instance.setItem(
                        this.vid,
                        this.stakePool.toJsonWithCode(
                            Core.LoginStore.instance.loginName + this.gmcode
                        )
                    );
            }),
            (t.prototype.release = function() {
                h.prototype.release.call(this);
            }),
            t
        );
    })(u.BetStoreBaseBac);
    (u.RoadBetTableStore = t),
        __reflect(t.prototype, 'VideoGameCore.RoadBetTableStore');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(h) {
    var t = (function(a) {
        function t() {
            var t = a.call(this) || this;
            return (
                (t.isStarted = !1),
                (t.socketList = [h.GoodRoadSocket.instance]),
                t
            );
        }
        return (
            __extends(t, a),
            (t.prototype.onSocketConnected = function(t) {
                (this.isStarted = !1),
                    Core.NonstopTimer.instance.clearTimeout(this.resultTimer),
                    (this.resultTimer = 0),
                    Core.NonstopTimer.instance.clearTimeout(this.resetTimer),
                    (this.resetTimer = 0),
                    this.dealTimers &&
                        this.dealTimers.forEach(function(t) {
                            Core.NonstopTimer.instance.clearTimeout(t);
                        }, this),
                    (this.dealTimers = new Core.HashMap()),
                    this.resetAll();
            }),
            (t.prototype.onSocketData = function(t, e) {
                var i = this;
                if (
                    (a.prototype.onSocketData.call(this, t, e),
                    !t.vid || this.vid === t.vid)
                )
                    switch (t.respId) {
                        case h.Ye:
                            if (!this.isStarted) return;
                            var r = t,
                                s = Core.NonstopTimer.instance.setTimeout(
                                    function() {
                                        i.dealTimers['delete'](r.index),
                                            r.index > i.pokerDataQue.length &&
                                                (i.pokerDataQue.push(
                                                    new h.PokerData(
                                                        r.card,
                                                        r.who,
                                                        r.index
                                                    )
                                                ),
                                                i.parsePokerDataQue(),
                                                i.dispatchAction(h.vt));
                                    },
                                    this,
                                    h.StreamConfig.instance.getAverageDelay() -
                                        10
                                );
                            this.dealTimers.set(r.index, s);
                            break;
                        case h.Nt:
                            var n = t,
                                o = h.RoadStoreFactory.instance.betTableStoreMap.get(
                                    this.vid
                                );
                            o.gmcode === n.code &&
                                ((this.resultTimer = Core.NonstopTimer.instance.setTimeout(
                                    function() {
                                        (this.pScore = n.pval),
                                            (this.bScore = n.bval),
                                            (this.pWin = !1),
                                            (this.bWin = !1),
                                            (this.tie = !1),
                                            this.pScore > this.bScore
                                                ? (this.pWin = !0)
                                                : this.pScore < this.bScore
                                                    ? (this.bWin = !0)
                                                    : this.pScore ===
                                                          this.bScore &&
                                                      (this.tie = !0),
                                            this.dispatchAction(h.P);
                                    },
                                    this,
                                    h.StreamConfig.instance.getAverageDelay()
                                )),
                                (this.resetTimer = Core.NonstopTimer.instance.setTimeout(
                                    function() {
                                        this.resetAll(),
                                            this.dispatchAction(h.vt);
                                    },
                                    this,
                                    2e4
                                )));
                    }
            }),
            (t.prototype.resetByAction = function() {
                (this.isStarted = !0), a.prototype.resetByAction.call(this);
            }),
            (t.prototype.release = function() {
                a.prototype.release.call(this);
            }),
            t
        );
    })(h.PokerBaseStore);
    (h.RoadPokerStore = t),
        __reflect(t.prototype, 'VideoGameCore.RoadPokerStore');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t = (function(r) {
        function t() {
            var t = r.call(this) || this;
            return (t.socketList = [s.GoodRoadSocket.instance]), t;
        }
        return (
            __extends(t, r),
            (t.prototype.onSocketData = function(t, e) {
                if (
                    (r.prototype.onSocketData.call(this, t, e),
                    !t.vid || this.vid === t.vid)
                )
                    switch (t.respId) {
                        case s.Or:
                            var i = t;
                            (this.realtimeInfo = i),
                                this.dispatchAction(s.st, i.vid);
                    }
            }),
            (t.prototype.onGameStartDo = function() {
                this.realtimeInfo = null;
            }),
            (t.prototype.countDown = function() {
                this.timeout > 0
                    ? (this.timeout--, this.dispatchAction(s._t))
                    : (Core.NonstopTimer.instance.clearInterval(
                          this.countDownInterval
                      ),
                      (this.gameStatus = 2),
                      this.dispatchAction(s.w));
            }),
            (t.prototype.release = function() {
                r.prototype.release.call(this);
            }),
            t
        );
    })(s.RoomTimerBaseStore);
    (s.RoadRoomTimerStore = t),
        __reflect(t.prototype, 'VideoGameCore.RoadRoomTimerStore');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(s) {
    var t = (function(e) {
        function t() {
            var t = e.call(this) || this;
            return (
                (t.roomTimerStoreMap = new Core.HashMap()),
                (t.betTableStoreMap = new Core.HashMap()),
                (t.pokerStoreMap = new Core.HashMap()),
                t
            );
        }
        return (
            __extends(t, e),
            (t.prototype.setupStoresByVid = function(t) {
                if (!this.roomTimerStoreMap.has(t)) {
                    var e = new s.RoadRoomTimerStore();
                    (e.vid = t), this.roomTimerStoreMap.set(t, e);
                    var i = new s.RoadBetTableStore(t);
                    this.betTableStoreMap.set(t, i);
                    var r = new s.RoadPokerStore();
                    (r.vid = t), this.pokerStoreMap.set(t, r);
                }
            }),
            (t.prototype.release = function() {
                e.prototype.release.call(this),
                    this.betTableStoreMap.forEach(function(t) {
                        t.release();
                    }, this),
                    this.pokerStoreMap.forEach(function(t) {
                        t.release();
                    }, this);
            }),
            Object.defineProperty(t, 'instance', {
                get: function() {
                    return this.getInstance(this);
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.init = function() {
                return this.initInstance(this);
            }),
            t
        );
    })(Core.SingletonDispatcher);
    (s.RoadStoreFactory = t),
        __reflect(t.prototype, 'VideoGameCore.RoadStoreFactory');
})(VideoGameCore || (VideoGameCore = {}));
var VideoGameCore;
!(function(i) {
    (i.EVENT_VIDEO = { PLAY: 'PLAY', ERROR: 'ERROR', SIGNAL: 'SIGNAL' }),
        (i.DEFAULT_ROOT_ID = 'meVideoRoot'),
        (i.CUT_CARD_ROOT_ID = 'cutCardVideoRoot');
    var t = (function() {
        function t(t, e) {
            void 0 === t && (t = i.DEFAULT_ROOT_ID),
                void 0 === e && (e = null),
                (this._bufferTime = 0),
                (this._realTime = 0),
                (this._errorCount = 0),
                (this._isNormalPlaying = !1),
                (this._needPlay = !1),
                (this._needStop = !1),
                (this.rootId = t),
                this.initDom(),
                e && (this._options = e),
                (this.callbackMap = new Core.HashMap()),
                this._meConstruct();
        }
        return (
            Object.defineProperty(t.prototype, 'containerId', {
                get: function() {
                    return this.rootId + 'Container';
                },
                enumerable: !0,
                configurable: !0
            }),
            Object.defineProperty(t.prototype, 'playerId', {
                get: function() {
                    return this.rootId + 'Player';
                },
                enumerable: !0,
                configurable: !0
            }),
            (t.prototype.initDom = function() {
                var t = document.getElementById(this.containerId),
                    e = document.getElementById(this.playerId);
                t
                    ? (this._containerElement = t)
                    : ((this._containerElement = document.createElement('div')),
                      (this._containerElement.id = this.containerId)),
                    e
                        ? (this._bgVideo = e)
                        : ((this._bgVideo = document.createElement('video')),
                          (this._bgVideo.id = this.playerId)),
                    (this._bgVideo.width = i.DEFAULT_WIDTH),
                    (this._bgVideo.height = i.DEFAULT_HIGHT),
                    (this._bgVideo.preload = 'none'),
                    (this._bgVideo.controls = !1),
                    this._bgVideo.setAttribute('playsinline', ''),
                    this._bgVideo.setAttribute('webkit-playsinline', ''),
                    (e && e.parentElement === t) ||
                        (this._containerElement.appendChild(this._bgVideo),
                        document.body.appendChild(this._containerElement));
            }),
            (t.prototype._meConstruct = function() {
                var r = this,
                    t = document.getElementById(this.playerId);
                if (!t)
                    return void egret.setTimeout(
                        function() {
                            r._meConstruct();
                        },
                        this,
                        100
                    );
                this._bgVideo = t;
                var e = (this._options && this._options.hasAudio,
                ['native_flv', 'html5', 'native_hls', 'flash_video']);
                Core.getMobileOS() === Core.OS_IOS && e.shift(),
                    Core.getBrowser() === Core.BROWSER_IE &&
                        (e = ['flash_video']);
                var i = {
                    renderers: e,
                    pluginPath: 'libs/modules/mediaelement/',
                    plugins: ['flash', 'silverlight'],
                    features: [],
                    clickToPlayPause: !1,
                    pauseOtherPlayers: !1,
                    success: function(t, e, i) {
                        (r._mediaElement = t),
                            (r._mePlayer = i),
                            r._needStop
                                ? r._mePlayer.pause()
                                : r._needPlay && r.startPlay();
                    },
                    error: function(t, e, i) {
                        r._errorHandler();
                    }
                };
                new MediaElementPlayer(this._bgVideo, i);
            }),
            (t.prototype.startPlay = function() {
                this._src && this.setSrc(this._src),
                    this._mePlayer.load(),
                    this._mePlayer.play(),
                    this._clearCheckTimer(),
                    (this._checkVideoTimer = egret.setInterval(
                        this._checkVideo,
                        this,
                        1e3
                    )),
                    this._clearRetryTimer(),
                    (this._retryVideoTimer = egret.setTimeout(
                        this._errorHandler,
                        this,
                        15e3
                    ));
            }),
            (t.prototype._clearCheckTimer = function() {
                this._checkVideoTimer &&
                    (egret.clearInterval(this._checkVideoTimer),
                    (this._checkVideoTimer = null),
                    (this._realTime = 0),
                    (this._bufferTime = 0),
                    (this._errorCount = 0));
            }),
            (t.prototype._clearRetryTimer = function() {
                this._retryVideoTimer &&
                    (egret.clearTimeout(this._retryVideoTimer),
                    (this._retryVideoTimer = null));
            }),
            (t.prototype._checkVideo = function() {
                if (this._mePlayer) {
                    var t = this._mePlayer.getSrc();
                    if (t && 'mp4' === t.substr(t.length - 3))
                        return (
                            (this._mePlayer.options.loop = !0),
                            void this._playHandler()
                        );
                    (this._mePlayer.options.loop = !1),
                        (0 !== this._realTime &&
                            0 === this._mePlayer.currentTime) ||
                        (0 !== this._bufferTime &&
                            this._mePlayer.currentTime === this._bufferTime) ||
                        isNaN(this._mePlayer.currentTime)
                            ? this._errorCount++
                            : (this._errorCount = 0),
                        (this._bufferTime = this._mePlayer.currentTime || 0),
                        this.updateVideoSignal(),
                        0 == this._realTime ||
                        this._realTime + 1 < this._bufferTime
                            ? (this._realTime = this._bufferTime)
                            : (this._realTime += 1),
                        this._errorCount >= 5
                            ? this._errorHandler()
                            : this._mePlayer.currentTime > 0 &&
                              this._playHandler();
                }
            }),
            (t.prototype._playHandler = function() {
                this._clearRetryTimer(),
                    this.callbackMap.has(i.EVENT_VIDEO.PLAY) &&
                        this.callbackMap.get(i.EVENT_VIDEO.PLAY)();
            }),
            (t.prototype._loadHandler = function() {}),
            (t.prototype.updateVideoSignal = function() {
                var t,
                    e = this._bufferTime - this._realTime;
                (t = e > 1 ? 4 : e > 0.6 ? 3 : e > 0.2 ? 2 : 1),
                    this.callbackMap.has(i.EVENT_VIDEO.SIGNAL) &&
                        this.callbackMap.get(i.EVENT_VIDEO.SIGNAL)(t);
            }),
            (t.prototype._errorHandler = function() {
                this._clearCheckTimer(),
                    this._clearRetryTimer(),
                    this.callbackMap.has(i.EVENT_VIDEO.ERROR) &&
                        this.callbackMap.get(i.EVENT_VIDEO.ERROR)();
            }),
            (t.prototype._meDestroy = function() {
                if (
                    (this._mediaElement && (this._mediaElement = null),
                    this._mePlayer)
                ) {
                    try {
                        this._mePlayer.remove();
                    } catch (t) {
                        console.error('Err:', t);
                        var e = document.getElementById(this.playerId);
                        if (e) return (this._bgVideo = null), !1;
                    }
                    return (
                        (this._mePlayer = null),
                        (this._errorCount = 0),
                        (this._needPlay = !1),
                        !0
                    );
                }
                return !1;
            }),
            (t.prototype.addEventListener = function(t, e) {
                this.callbackMap.set(t, e);
            }),
            (t.prototype.removeEventListener = function(t) {
                this.callbackMap['delete'](t);
            }),
            (t.prototype.play = function() {
                this._bgVideo &&
                    (this._mePlayer ? this.startPlay() : (this._needPlay = !0));
            }),
            (t.prototype.stop = function() {
                this._bgVideo &&
                    (this._clearCheckTimer(),
                    this._clearRetryTimer(),
                    this._mePlayer
                        ? (this._mePlayer.pause(),
                          this._mePlayer.proxy &&
                              this._mePlayer.proxy.media &&
                              this._mePlayer.proxy.media.flvPlayer &&
                              this._mePlayer.proxy.media.flvPlayer.unload())
                        : (this._needStop = !0));
            }),
            (t.prototype.setOptions = function(t) {
                this._mePlayer &&
                    (this._mePlayer.options.hasAudio = t.hasAudio);
            }),
            (t.prototype.setSrc = function(t) {
                var e = [];
                Core.getMobileOS() === Core.OS_IOS &&
                    (e = t.filter(function(t) {
                        return t.type !== i.VIDEO_TYPE.FLV;
                    })),
                    Core.getBrowser() === Core.BROWSER_IE &&
                        (e = t.filter(function(t) {
                            return t.type === i.VIDEO_TYPE.RTMP;
                        })),
                    0 === e.length && (e = t.slice()),
                    this._mePlayer
                        ? (this._mePlayer.setSrc(e), (this._src = null))
                        : (this._src = e);
            }),
            (t.prototype.getVolume = function() {
                return this._mePlayer ? this._mePlayer.getVolume() : 0;
            }),
            (t.prototype.setVolume = function(t) {
                this._mePlayer && this._mePlayer.setVolume(t);
            }),
            (t.prototype.getPlayerElement = function() {
                var t = document.getElementById(
                        '__' + this.playerId + '_flash_video'
                    ),
                    e = document.getElementById(this.playerId + '_native_flv'),
                    i = document.getElementById(this.playerId + '_native_hls'),
                    r = document.getElementById(this.playerId + '_html5');
                return t || e || i || r;
            }),
            (t.prototype.getMediaElement = function() {
                return this._mediaElement;
            }),
            (t.prototype.getContainerElement = function() {
                return this._containerElement;
            }),
            (t.prototype.show = function() {
                this._containerElement &&
                    (this._containerElement.style.display = 'block');
            }),
            (t.prototype.hide = function() {
                this._containerElement &&
                    (this._containerElement.style.display = 'none');
            }),
            (t.prototype.resize = function(t, e) {
                this._mePlayer && this._mePlayer.setPlayerSize(t, e);
            }),
            (t.prototype.destroy = function() {
                this._meDestroy();
            }),
            t
        );
    })();
    (i.MediaElementJsPlayer = t),
        __reflect(t.prototype, 'VideoGameCore.MediaElementJsPlayer');
})(VideoGameCore || (VideoGameCore = {}));
